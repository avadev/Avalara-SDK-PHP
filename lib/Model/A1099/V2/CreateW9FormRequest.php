<?php
/**
 * CreateW9FormRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * CreateW9FormRequest Class Doc Comment
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CreateW9FormRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateW9Form_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'name' => 'string',
        'business_name' => 'string',
        'business_classification' => 'string',
        'business_other' => 'string',
        'foreign_partner_owner_or_beneficiary' => 'bool',
        'exempt_payee_code' => 'string',
        'exempt_fatca_code' => 'string',
        'foreign_country_indicator' => 'bool',
        'address' => 'string',
        'foreign_address' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'account_number' => 'string',
        'tin_type' => 'string',
        'tin' => 'string',
        'backup_withholding' => 'bool',
        'is1099able' => 'bool',
        'e_delivery_consented_at' => '\DateTime',
        'signature' => 'string',
        'company_id' => 'string',
        'reference_id' => 'string',
        'email' => 'string',
        'citizenship_country' => 'string',
        'disregarded_entity' => 'string',
        'entity_type' => 'string',
        'fatca_status' => 'string',
        'residence_address' => 'string',
        'residence_city' => 'string',
        'residence_state' => 'string',
        'residence_zip' => 'string',
        'residence_country' => 'string',
        'residence_is_mailing' => 'bool',
        'mailing_address' => 'string',
        'mailing_city' => 'string',
        'mailing_state' => 'string',
        'mailing_zip' => 'string',
        'mailing_country' => 'string',
        'giin' => 'string',
        'foreign_tin' => 'string',
        'reference_number' => 'string',
        'disregarded_entity_fatca_status' => 'string',
        'disregarded_address' => 'string',
        'disregarded_city' => 'string',
        'disregarded_state' => 'string',
        'disregarded_zip' => 'string',
        'disregarded_country' => 'string',
        'disregarded_entity_giin' => 'string',
        'qualified_intermediary_certification' => 'bool',
        'qi_primary_withholding_responsibility_certification' => 'bool',
        'qi_withholding_responsibility_for_ptp_sales_certification' => 'bool',
        'qi_nominee_withholding_responsibility_for_ptp_distributions_certification' => 'bool',
        'qi_securities_lender_substitute_dividend_withholding_certification' => 'bool',
        'qi_withholding_and1099_reporting_responsibility_certification' => 'bool',
        'qi_form1099_or_fatca_reporting_responsibility_certification' => 'bool',
        'qi_opt_out_of_form1099_reporting_certification' => 'bool',
        'qi_withholding_rate_pool_certification' => 'bool',
        'qi_intermediary_or_flow_through_entity_documentation_certification' => 'bool',
        'qualified_derivatives_dealer_certification' => 'bool',
        'qdd_corporation' => 'bool',
        'qdd_partnership' => 'bool',
        'qdd_disregarded_entity' => 'bool',
        'nonqualified_intermediary_certification' => 'bool',
        'nqi_withholding_statement_transmission_certification' => 'bool',
        'nqi_withholding_rate_pool_compliance_certification' => 'bool',
        'nqi_qualified_securities_lender_certification' => 'bool',
        'nqi_alternative_withholding_statement_verification_certification' => 'bool',
        'territory_financial_institution_certification' => 'bool',
        'tfi_treated_as_us_person_certification' => 'bool',
        'tfi_withholding_statement_transmission_certification' => 'bool',
        'tfi_treated_as_us_person_for_ptp_sales_certification' => 'bool',
        'tfi_nominee_us_person_for_ptp_distributions_certification' => 'bool',
        'tfi_not_nominee_for_ptp_distributions_certification' => 'bool',
        'us_branch_non_effectively_connected_income_certification' => 'bool',
        'us_branch_agreement_to_be_treated_as_us_person_certification' => 'bool',
        'us_branch_withholding_statement_and_compliance_certification' => 'bool',
        'us_branch_acting_as_us_person_for_ptp_sales_certification' => 'bool',
        'us_branch_nominee_for_ptp_distributions_certification' => 'bool',
        'us_branch_not_nominee_for_ptp_distributions_certification' => 'bool',
        'withholding_foreign_partnership_or_trust_certification' => 'bool',
        'nonwithholding_foreign_entity_withholding_statement_certification' => 'bool',
        'foreign_entity_partner_in_lower_tier_partnership_certification' => 'bool',
        'foreign_partnership_amount_realized_section1446_f_certification' => 'bool',
        'foreign_partnership_modified_amount_realized_certification' => 'bool',
        'foreign_grantor_trust_amount_realized_allocation_certification' => 'bool',
        'alternative_withholding_statement_reliance_certification' => 'bool',
        'np_ffi_with_exempt_beneficial_owners_certification' => 'bool',
        'ffi_sponsoring_entity' => 'string',
        'investment_entity_certification' => 'bool',
        'controlled_foreign_corporation_certification' => 'bool',
        'owner_documented_ffi_certification' => 'bool',
        'owner_documented_ffi_reporting_statement_certification' => 'bool',
        'owner_documented_ffi_auditor_letter_certification' => 'bool',
        'compliant_nonregistering_local_bank_certification' => 'bool',
        'compliant_ffi_low_value_accounts_certification' => 'bool',
        'sponsored_closely_held_entity_sponsoring_entity' => 'string',
        'sponsored_closely_held_investment_vehicle_certification' => 'bool',
        'compliant_limited_life_debt_entity_certification' => 'bool',
        'investment_entity_no_financial_accounts_certification' => 'bool',
        'restricted_distributor_certification' => 'bool',
        'restricted_distributor_agreement_certification' => 'bool',
        'restricted_distributor_preexisting_sales_compliance_certification' => 'bool',
        'foreign_central_bank_of_issue_certification' => 'bool',
        'nonreporting_iga_ffi_certification' => 'bool',
        'iga_country' => 'string',
        'iga_model' => 'string',
        'iga_legal_status_treatment' => 'string',
        'iga_ffi_trustee_or_sponsor' => 'string',
        'iga_ffi_trustee_is_foreign' => 'bool',
        'treaty_qualified_pension_fund_certification' => 'bool',
        'qualified_retirement_fund_certification' => 'bool',
        'narrow_participation_retirement_fund_certification' => 'bool',
        'section401_a_equivalent_pension_plan_certification' => 'bool',
        'investment_entity_for_retirement_funds_certification' => 'bool',
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => 'bool',
        'excepted_nonfinancial_group_entity_certification' => 'bool',
        'excepted_nonfinancial_start_up_certification' => 'bool',
        'startup_formation_or_resolution_date' => '\DateTime',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => 'bool',
        'nonfinancial_entity_filing_date' => '\DateTime',
        'publicly_traded_nffe_certification' => 'bool',
        'publicly_traded_nffe_securities_market' => 'string',
        'nffe_affiliate_of_publicly_traded_entity_certification' => 'bool',
        'publicly_traded_entity' => 'string',
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => 'string',
        'excepted_territory_nffe_certification' => 'bool',
        'active_nffe_certification' => 'bool',
        'passive_nffe_certification' => 'bool',
        'sponsored_direct_reporting_nffe_certification' => 'bool',
        'direct_reporting_nffe_sponsoring_entity' => 'string',
        'signer_name' => 'string',
        'making_treaty_claim' => 'bool',
        'foreign_tin_not_required' => 'bool',
        'treaty_country_certification' => 'bool',
        'treaty_country' => 'string',
        'benefit_limitation_certification' => 'bool',
        'benefit_limitation' => 'string',
        'qualified_resident_status_certification' => 'bool',
        'treaty_article' => 'string',
        'withholding_rate' => 'string',
        'income_type' => 'string',
        'treaty_reasons' => 'string',
        'owner_documented_ffi_trust_beneficiaries_certification' => 'bool',
        'non_commercial_financial_activity_certification' => 'bool',
        'internation_organization_certification' => 'bool',
        'intergovernmental_organization_certification' => 'bool',
        'exempt_beneficial_owner_owned_investment_entity_certification' => 'bool',
        'section501_c_organization_certification' => 'bool',
        'determination_letter_date' => '\DateTime',
        'nonprofit_organization_certification' => 'bool',
        'passive_nffe_no_substantial_us_owners_certification' => 'bool',
        'passive_nffe_substantial_us_owners_provided_certification' => 'bool',
        'excepted_inter_affiliate_ffi_certification' => 'bool',
        'substantial_us_owners' => '\Avalara\SDK\Model\A1099\V2\SubstantialUsOwnerRequest[]',
        'capacity_to_sign_certification' => 'bool',
        'birthday' => '\DateTime',
        'employee_first_name' => 'string',
        'employee_middle_name' => 'string',
        'employee_last_name' => 'string',
        'employee_name_suffix' => 'string',
        'marital_status' => 'string',
        'last_name_differs' => 'bool',
        'num_allowances' => 'int',
        'other_dependents' => 'int',
        'non_job_income' => 'float',
        'deductions' => 'float',
        'additional_withheld' => 'float',
        'exempt_from_withholding' => 'bool',
        'office_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'name' => null,
        'business_name' => null,
        'business_classification' => null,
        'business_other' => null,
        'foreign_partner_owner_or_beneficiary' => null,
        'exempt_payee_code' => null,
        'exempt_fatca_code' => null,
        'foreign_country_indicator' => null,
        'address' => null,
        'foreign_address' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'account_number' => null,
        'tin_type' => null,
        'tin' => null,
        'backup_withholding' => null,
        'is1099able' => null,
        'e_delivery_consented_at' => 'date-time',
        'signature' => null,
        'company_id' => null,
        'reference_id' => null,
        'email' => null,
        'citizenship_country' => null,
        'disregarded_entity' => null,
        'entity_type' => null,
        'fatca_status' => null,
        'residence_address' => null,
        'residence_city' => null,
        'residence_state' => null,
        'residence_zip' => null,
        'residence_country' => null,
        'residence_is_mailing' => null,
        'mailing_address' => null,
        'mailing_city' => null,
        'mailing_state' => null,
        'mailing_zip' => null,
        'mailing_country' => null,
        'giin' => null,
        'foreign_tin' => null,
        'reference_number' => null,
        'disregarded_entity_fatca_status' => null,
        'disregarded_address' => null,
        'disregarded_city' => null,
        'disregarded_state' => null,
        'disregarded_zip' => null,
        'disregarded_country' => null,
        'disregarded_entity_giin' => null,
        'qualified_intermediary_certification' => null,
        'qi_primary_withholding_responsibility_certification' => null,
        'qi_withholding_responsibility_for_ptp_sales_certification' => null,
        'qi_nominee_withholding_responsibility_for_ptp_distributions_certification' => null,
        'qi_securities_lender_substitute_dividend_withholding_certification' => null,
        'qi_withholding_and1099_reporting_responsibility_certification' => null,
        'qi_form1099_or_fatca_reporting_responsibility_certification' => null,
        'qi_opt_out_of_form1099_reporting_certification' => null,
        'qi_withholding_rate_pool_certification' => null,
        'qi_intermediary_or_flow_through_entity_documentation_certification' => null,
        'qualified_derivatives_dealer_certification' => null,
        'qdd_corporation' => null,
        'qdd_partnership' => null,
        'qdd_disregarded_entity' => null,
        'nonqualified_intermediary_certification' => null,
        'nqi_withholding_statement_transmission_certification' => null,
        'nqi_withholding_rate_pool_compliance_certification' => null,
        'nqi_qualified_securities_lender_certification' => null,
        'nqi_alternative_withholding_statement_verification_certification' => null,
        'territory_financial_institution_certification' => null,
        'tfi_treated_as_us_person_certification' => null,
        'tfi_withholding_statement_transmission_certification' => null,
        'tfi_treated_as_us_person_for_ptp_sales_certification' => null,
        'tfi_nominee_us_person_for_ptp_distributions_certification' => null,
        'tfi_not_nominee_for_ptp_distributions_certification' => null,
        'us_branch_non_effectively_connected_income_certification' => null,
        'us_branch_agreement_to_be_treated_as_us_person_certification' => null,
        'us_branch_withholding_statement_and_compliance_certification' => null,
        'us_branch_acting_as_us_person_for_ptp_sales_certification' => null,
        'us_branch_nominee_for_ptp_distributions_certification' => null,
        'us_branch_not_nominee_for_ptp_distributions_certification' => null,
        'withholding_foreign_partnership_or_trust_certification' => null,
        'nonwithholding_foreign_entity_withholding_statement_certification' => null,
        'foreign_entity_partner_in_lower_tier_partnership_certification' => null,
        'foreign_partnership_amount_realized_section1446_f_certification' => null,
        'foreign_partnership_modified_amount_realized_certification' => null,
        'foreign_grantor_trust_amount_realized_allocation_certification' => null,
        'alternative_withholding_statement_reliance_certification' => null,
        'np_ffi_with_exempt_beneficial_owners_certification' => null,
        'ffi_sponsoring_entity' => null,
        'investment_entity_certification' => null,
        'controlled_foreign_corporation_certification' => null,
        'owner_documented_ffi_certification' => null,
        'owner_documented_ffi_reporting_statement_certification' => null,
        'owner_documented_ffi_auditor_letter_certification' => null,
        'compliant_nonregistering_local_bank_certification' => null,
        'compliant_ffi_low_value_accounts_certification' => null,
        'sponsored_closely_held_entity_sponsoring_entity' => null,
        'sponsored_closely_held_investment_vehicle_certification' => null,
        'compliant_limited_life_debt_entity_certification' => null,
        'investment_entity_no_financial_accounts_certification' => null,
        'restricted_distributor_certification' => null,
        'restricted_distributor_agreement_certification' => null,
        'restricted_distributor_preexisting_sales_compliance_certification' => null,
        'foreign_central_bank_of_issue_certification' => null,
        'nonreporting_iga_ffi_certification' => null,
        'iga_country' => null,
        'iga_model' => null,
        'iga_legal_status_treatment' => null,
        'iga_ffi_trustee_or_sponsor' => null,
        'iga_ffi_trustee_is_foreign' => null,
        'treaty_qualified_pension_fund_certification' => null,
        'qualified_retirement_fund_certification' => null,
        'narrow_participation_retirement_fund_certification' => null,
        'section401_a_equivalent_pension_plan_certification' => null,
        'investment_entity_for_retirement_funds_certification' => null,
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => null,
        'excepted_nonfinancial_group_entity_certification' => null,
        'excepted_nonfinancial_start_up_certification' => null,
        'startup_formation_or_resolution_date' => 'date',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => null,
        'nonfinancial_entity_filing_date' => 'date',
        'publicly_traded_nffe_certification' => null,
        'publicly_traded_nffe_securities_market' => null,
        'nffe_affiliate_of_publicly_traded_entity_certification' => null,
        'publicly_traded_entity' => null,
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => null,
        'excepted_territory_nffe_certification' => null,
        'active_nffe_certification' => null,
        'passive_nffe_certification' => null,
        'sponsored_direct_reporting_nffe_certification' => null,
        'direct_reporting_nffe_sponsoring_entity' => null,
        'signer_name' => null,
        'making_treaty_claim' => null,
        'foreign_tin_not_required' => null,
        'treaty_country_certification' => null,
        'treaty_country' => null,
        'benefit_limitation_certification' => null,
        'benefit_limitation' => null,
        'qualified_resident_status_certification' => null,
        'treaty_article' => null,
        'withholding_rate' => null,
        'income_type' => null,
        'treaty_reasons' => null,
        'owner_documented_ffi_trust_beneficiaries_certification' => null,
        'non_commercial_financial_activity_certification' => null,
        'internation_organization_certification' => null,
        'intergovernmental_organization_certification' => null,
        'exempt_beneficial_owner_owned_investment_entity_certification' => null,
        'section501_c_organization_certification' => null,
        'determination_letter_date' => 'date',
        'nonprofit_organization_certification' => null,
        'passive_nffe_no_substantial_us_owners_certification' => null,
        'passive_nffe_substantial_us_owners_provided_certification' => null,
        'excepted_inter_affiliate_ffi_certification' => null,
        'substantial_us_owners' => null,
        'capacity_to_sign_certification' => null,
        'birthday' => 'date',
        'employee_first_name' => null,
        'employee_middle_name' => null,
        'employee_last_name' => null,
        'employee_name_suffix' => null,
        'marital_status' => null,
        'last_name_differs' => null,
        'num_allowances' => 'int32',
        'other_dependents' => 'int32',
        'non_job_income' => 'float',
        'deductions' => 'float',
        'additional_withheld' => 'float',
        'exempt_from_withholding' => null,
        'office_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'name' => 'name',
        'business_name' => 'businessName',
        'business_classification' => 'businessClassification',
        'business_other' => 'businessOther',
        'foreign_partner_owner_or_beneficiary' => 'foreignPartnerOwnerOrBeneficiary',
        'exempt_payee_code' => 'exemptPayeeCode',
        'exempt_fatca_code' => 'exemptFatcaCode',
        'foreign_country_indicator' => 'foreignCountryIndicator',
        'address' => 'address',
        'foreign_address' => 'foreignAddress',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'account_number' => 'accountNumber',
        'tin_type' => 'tinType',
        'tin' => 'tin',
        'backup_withholding' => 'backupWithholding',
        'is1099able' => 'is1099able',
        'e_delivery_consented_at' => 'eDeliveryConsentedAt',
        'signature' => 'signature',
        'company_id' => 'companyId',
        'reference_id' => 'referenceId',
        'email' => 'email',
        'citizenship_country' => 'citizenshipCountry',
        'disregarded_entity' => 'disregardedEntity',
        'entity_type' => 'entityType',
        'fatca_status' => 'fatcaStatus',
        'residence_address' => 'residenceAddress',
        'residence_city' => 'residenceCity',
        'residence_state' => 'residenceState',
        'residence_zip' => 'residenceZip',
        'residence_country' => 'residenceCountry',
        'residence_is_mailing' => 'residenceIsMailing',
        'mailing_address' => 'mailingAddress',
        'mailing_city' => 'mailingCity',
        'mailing_state' => 'mailingState',
        'mailing_zip' => 'mailingZip',
        'mailing_country' => 'mailingCountry',
        'giin' => 'giin',
        'foreign_tin' => 'foreignTin',
        'reference_number' => 'referenceNumber',
        'disregarded_entity_fatca_status' => 'disregardedEntityFatcaStatus',
        'disregarded_address' => 'disregardedAddress',
        'disregarded_city' => 'disregardedCity',
        'disregarded_state' => 'disregardedState',
        'disregarded_zip' => 'disregardedZip',
        'disregarded_country' => 'disregardedCountry',
        'disregarded_entity_giin' => 'disregardedEntityGiin',
        'qualified_intermediary_certification' => 'qualifiedIntermediaryCertification',
        'qi_primary_withholding_responsibility_certification' => 'qiPrimaryWithholdingResponsibilityCertification',
        'qi_withholding_responsibility_for_ptp_sales_certification' => 'qiWithholdingResponsibilityForPtpSalesCertification',
        'qi_nominee_withholding_responsibility_for_ptp_distributions_certification' => 'qiNomineeWithholdingResponsibilityForPtpDistributionsCertification',
        'qi_securities_lender_substitute_dividend_withholding_certification' => 'qiSecuritiesLenderSubstituteDividendWithholdingCertification',
        'qi_withholding_and1099_reporting_responsibility_certification' => 'qiWithholdingAnd1099ReportingResponsibilityCertification',
        'qi_form1099_or_fatca_reporting_responsibility_certification' => 'qiForm1099OrFatcaReportingResponsibilityCertification',
        'qi_opt_out_of_form1099_reporting_certification' => 'qiOptOutOfForm1099ReportingCertification',
        'qi_withholding_rate_pool_certification' => 'qiWithholdingRatePoolCertification',
        'qi_intermediary_or_flow_through_entity_documentation_certification' => 'qiIntermediaryOrFlowThroughEntityDocumentationCertification',
        'qualified_derivatives_dealer_certification' => 'qualifiedDerivativesDealerCertification',
        'qdd_corporation' => 'qddCorporation',
        'qdd_partnership' => 'qddPartnership',
        'qdd_disregarded_entity' => 'qddDisregardedEntity',
        'nonqualified_intermediary_certification' => 'nonqualifiedIntermediaryCertification',
        'nqi_withholding_statement_transmission_certification' => 'nqiWithholdingStatementTransmissionCertification',
        'nqi_withholding_rate_pool_compliance_certification' => 'nqiWithholdingRatePoolComplianceCertification',
        'nqi_qualified_securities_lender_certification' => 'nqiQualifiedSecuritiesLenderCertification',
        'nqi_alternative_withholding_statement_verification_certification' => 'nqiAlternativeWithholdingStatementVerificationCertification',
        'territory_financial_institution_certification' => 'territoryFinancialInstitutionCertification',
        'tfi_treated_as_us_person_certification' => 'tfiTreatedAsUsPersonCertification',
        'tfi_withholding_statement_transmission_certification' => 'tfiWithholdingStatementTransmissionCertification',
        'tfi_treated_as_us_person_for_ptp_sales_certification' => 'tfiTreatedAsUsPersonForPtpSalesCertification',
        'tfi_nominee_us_person_for_ptp_distributions_certification' => 'tfiNomineeUsPersonForPtpDistributionsCertification',
        'tfi_not_nominee_for_ptp_distributions_certification' => 'tfiNotNomineeForPtpDistributionsCertification',
        'us_branch_non_effectively_connected_income_certification' => 'usBranchNonEffectivelyConnectedIncomeCertification',
        'us_branch_agreement_to_be_treated_as_us_person_certification' => 'usBranchAgreementToBeTreatedAsUsPersonCertification',
        'us_branch_withholding_statement_and_compliance_certification' => 'usBranchWithholdingStatementAndComplianceCertification',
        'us_branch_acting_as_us_person_for_ptp_sales_certification' => 'usBranchActingAsUsPersonForPtpSalesCertification',
        'us_branch_nominee_for_ptp_distributions_certification' => 'usBranchNomineeForPtpDistributionsCertification',
        'us_branch_not_nominee_for_ptp_distributions_certification' => 'usBranchNotNomineeForPtpDistributionsCertification',
        'withholding_foreign_partnership_or_trust_certification' => 'withholdingForeignPartnershipOrTrustCertification',
        'nonwithholding_foreign_entity_withholding_statement_certification' => 'nonwithholdingForeignEntityWithholdingStatementCertification',
        'foreign_entity_partner_in_lower_tier_partnership_certification' => 'foreignEntityPartnerInLowerTierPartnershipCertification',
        'foreign_partnership_amount_realized_section1446_f_certification' => 'foreignPartnershipAmountRealizedSection1446FCertification',
        'foreign_partnership_modified_amount_realized_certification' => 'foreignPartnershipModifiedAmountRealizedCertification',
        'foreign_grantor_trust_amount_realized_allocation_certification' => 'foreignGrantorTrustAmountRealizedAllocationCertification',
        'alternative_withholding_statement_reliance_certification' => 'alternativeWithholdingStatementRelianceCertification',
        'np_ffi_with_exempt_beneficial_owners_certification' => 'npFfiWithExemptBeneficialOwnersCertification',
        'ffi_sponsoring_entity' => 'ffiSponsoringEntity',
        'investment_entity_certification' => 'investmentEntityCertification',
        'controlled_foreign_corporation_certification' => 'controlledForeignCorporationCertification',
        'owner_documented_ffi_certification' => 'ownerDocumentedFfiCertification',
        'owner_documented_ffi_reporting_statement_certification' => 'ownerDocumentedFfiReportingStatementCertification',
        'owner_documented_ffi_auditor_letter_certification' => 'ownerDocumentedFfiAuditorLetterCertification',
        'compliant_nonregistering_local_bank_certification' => 'compliantNonregisteringLocalBankCertification',
        'compliant_ffi_low_value_accounts_certification' => 'compliantFfiLowValueAccountsCertification',
        'sponsored_closely_held_entity_sponsoring_entity' => 'sponsoredCloselyHeldEntitySponsoringEntity',
        'sponsored_closely_held_investment_vehicle_certification' => 'sponsoredCloselyHeldInvestmentVehicleCertification',
        'compliant_limited_life_debt_entity_certification' => 'compliantLimitedLifeDebtEntityCertification',
        'investment_entity_no_financial_accounts_certification' => 'investmentEntityNoFinancialAccountsCertification',
        'restricted_distributor_certification' => 'restrictedDistributorCertification',
        'restricted_distributor_agreement_certification' => 'restrictedDistributorAgreementCertification',
        'restricted_distributor_preexisting_sales_compliance_certification' => 'restrictedDistributorPreexistingSalesComplianceCertification',
        'foreign_central_bank_of_issue_certification' => 'foreignCentralBankOfIssueCertification',
        'nonreporting_iga_ffi_certification' => 'nonreportingIgaFfiCertification',
        'iga_country' => 'igaCountry',
        'iga_model' => 'igaModel',
        'iga_legal_status_treatment' => 'igaLegalStatusTreatment',
        'iga_ffi_trustee_or_sponsor' => 'igaFfiTrusteeOrSponsor',
        'iga_ffi_trustee_is_foreign' => 'igaFfiTrusteeIsForeign',
        'treaty_qualified_pension_fund_certification' => 'treatyQualifiedPensionFundCertification',
        'qualified_retirement_fund_certification' => 'qualifiedRetirementFundCertification',
        'narrow_participation_retirement_fund_certification' => 'narrowParticipationRetirementFundCertification',
        'section401_a_equivalent_pension_plan_certification' => 'section401AEquivalentPensionPlanCertification',
        'investment_entity_for_retirement_funds_certification' => 'investmentEntityForRetirementFundsCertification',
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => 'exemptBeneficialOwnerSponsoredRetirementFundCertification',
        'excepted_nonfinancial_group_entity_certification' => 'exceptedNonfinancialGroupEntityCertification',
        'excepted_nonfinancial_start_up_certification' => 'exceptedNonfinancialStartUpCertification',
        'startup_formation_or_resolution_date' => 'startupFormationOrResolutionDate',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => 'exceptedNonfinancialEntityInLiquidationOrBankruptcyCertification',
        'nonfinancial_entity_filing_date' => 'nonfinancialEntityFilingDate',
        'publicly_traded_nffe_certification' => 'publiclyTradedNffeCertification',
        'publicly_traded_nffe_securities_market' => 'publiclyTradedNffeSecuritiesMarket',
        'nffe_affiliate_of_publicly_traded_entity_certification' => 'nffeAffiliateOfPubliclyTradedEntityCertification',
        'publicly_traded_entity' => 'publiclyTradedEntity',
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => 'nffeAffiliateOfPubliclyTradedEntitySecuritiesMarket',
        'excepted_territory_nffe_certification' => 'exceptedTerritoryNffeCertification',
        'active_nffe_certification' => 'activeNffeCertification',
        'passive_nffe_certification' => 'passiveNffeCertification',
        'sponsored_direct_reporting_nffe_certification' => 'sponsoredDirectReportingNffeCertification',
        'direct_reporting_nffe_sponsoring_entity' => 'directReportingNffeSponsoringEntity',
        'signer_name' => 'signerName',
        'making_treaty_claim' => 'makingTreatyClaim',
        'foreign_tin_not_required' => 'foreignTinNotRequired',
        'treaty_country_certification' => 'treatyCountryCertification',
        'treaty_country' => 'treatyCountry',
        'benefit_limitation_certification' => 'benefitLimitationCertification',
        'benefit_limitation' => 'benefitLimitation',
        'qualified_resident_status_certification' => 'qualifiedResidentStatusCertification',
        'treaty_article' => 'treatyArticle',
        'withholding_rate' => 'withholdingRate',
        'income_type' => 'incomeType',
        'treaty_reasons' => 'treatyReasons',
        'owner_documented_ffi_trust_beneficiaries_certification' => 'ownerDocumentedFfiTrustBeneficiariesCertification',
        'non_commercial_financial_activity_certification' => 'nonCommercialFinancialActivityCertification',
        'internation_organization_certification' => 'internationOrganizationCertification',
        'intergovernmental_organization_certification' => 'intergovernmentalOrganizationCertification',
        'exempt_beneficial_owner_owned_investment_entity_certification' => 'exemptBeneficialOwnerOwnedInvestmentEntityCertification',
        'section501_c_organization_certification' => 'section501COrganizationCertification',
        'determination_letter_date' => 'determinationLetterDate',
        'nonprofit_organization_certification' => 'nonprofitOrganizationCertification',
        'passive_nffe_no_substantial_us_owners_certification' => 'passiveNffeNoSubstantialUsOwnersCertification',
        'passive_nffe_substantial_us_owners_provided_certification' => 'passiveNffeSubstantialUsOwnersProvidedCertification',
        'excepted_inter_affiliate_ffi_certification' => 'exceptedInterAffiliateFfiCertification',
        'substantial_us_owners' => 'substantialUsOwners',
        'capacity_to_sign_certification' => 'capacityToSignCertification',
        'birthday' => 'birthday',
        'employee_first_name' => 'employeeFirstName',
        'employee_middle_name' => 'employeeMiddleName',
        'employee_last_name' => 'employeeLastName',
        'employee_name_suffix' => 'employeeNameSuffix',
        'marital_status' => 'maritalStatus',
        'last_name_differs' => 'lastNameDiffers',
        'num_allowances' => 'numAllowances',
        'other_dependents' => 'otherDependents',
        'non_job_income' => 'nonJobIncome',
        'deductions' => 'deductions',
        'additional_withheld' => 'additionalWithheld',
        'exempt_from_withholding' => 'exemptFromWithholding',
        'office_code' => 'officeCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'name' => 'setName',
        'business_name' => 'setBusinessName',
        'business_classification' => 'setBusinessClassification',
        'business_other' => 'setBusinessOther',
        'foreign_partner_owner_or_beneficiary' => 'setForeignPartnerOwnerOrBeneficiary',
        'exempt_payee_code' => 'setExemptPayeeCode',
        'exempt_fatca_code' => 'setExemptFatcaCode',
        'foreign_country_indicator' => 'setForeignCountryIndicator',
        'address' => 'setAddress',
        'foreign_address' => 'setForeignAddress',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'account_number' => 'setAccountNumber',
        'tin_type' => 'setTinType',
        'tin' => 'setTin',
        'backup_withholding' => 'setBackupWithholding',
        'is1099able' => 'setIs1099able',
        'e_delivery_consented_at' => 'setEDeliveryConsentedAt',
        'signature' => 'setSignature',
        'company_id' => 'setCompanyId',
        'reference_id' => 'setReferenceId',
        'email' => 'setEmail',
        'citizenship_country' => 'setCitizenshipCountry',
        'disregarded_entity' => 'setDisregardedEntity',
        'entity_type' => 'setEntityType',
        'fatca_status' => 'setFatcaStatus',
        'residence_address' => 'setResidenceAddress',
        'residence_city' => 'setResidenceCity',
        'residence_state' => 'setResidenceState',
        'residence_zip' => 'setResidenceZip',
        'residence_country' => 'setResidenceCountry',
        'residence_is_mailing' => 'setResidenceIsMailing',
        'mailing_address' => 'setMailingAddress',
        'mailing_city' => 'setMailingCity',
        'mailing_state' => 'setMailingState',
        'mailing_zip' => 'setMailingZip',
        'mailing_country' => 'setMailingCountry',
        'giin' => 'setGiin',
        'foreign_tin' => 'setForeignTin',
        'reference_number' => 'setReferenceNumber',
        'disregarded_entity_fatca_status' => 'setDisregardedEntityFatcaStatus',
        'disregarded_address' => 'setDisregardedAddress',
        'disregarded_city' => 'setDisregardedCity',
        'disregarded_state' => 'setDisregardedState',
        'disregarded_zip' => 'setDisregardedZip',
        'disregarded_country' => 'setDisregardedCountry',
        'disregarded_entity_giin' => 'setDisregardedEntityGiin',
        'qualified_intermediary_certification' => 'setQualifiedIntermediaryCertification',
        'qi_primary_withholding_responsibility_certification' => 'setQiPrimaryWithholdingResponsibilityCertification',
        'qi_withholding_responsibility_for_ptp_sales_certification' => 'setQiWithholdingResponsibilityForPtpSalesCertification',
        'qi_nominee_withholding_responsibility_for_ptp_distributions_certification' => 'setQiNomineeWithholdingResponsibilityForPtpDistributionsCertification',
        'qi_securities_lender_substitute_dividend_withholding_certification' => 'setQiSecuritiesLenderSubstituteDividendWithholdingCertification',
        'qi_withholding_and1099_reporting_responsibility_certification' => 'setQiWithholdingAnd1099ReportingResponsibilityCertification',
        'qi_form1099_or_fatca_reporting_responsibility_certification' => 'setQiForm1099OrFatcaReportingResponsibilityCertification',
        'qi_opt_out_of_form1099_reporting_certification' => 'setQiOptOutOfForm1099ReportingCertification',
        'qi_withholding_rate_pool_certification' => 'setQiWithholdingRatePoolCertification',
        'qi_intermediary_or_flow_through_entity_documentation_certification' => 'setQiIntermediaryOrFlowThroughEntityDocumentationCertification',
        'qualified_derivatives_dealer_certification' => 'setQualifiedDerivativesDealerCertification',
        'qdd_corporation' => 'setQddCorporation',
        'qdd_partnership' => 'setQddPartnership',
        'qdd_disregarded_entity' => 'setQddDisregardedEntity',
        'nonqualified_intermediary_certification' => 'setNonqualifiedIntermediaryCertification',
        'nqi_withholding_statement_transmission_certification' => 'setNqiWithholdingStatementTransmissionCertification',
        'nqi_withholding_rate_pool_compliance_certification' => 'setNqiWithholdingRatePoolComplianceCertification',
        'nqi_qualified_securities_lender_certification' => 'setNqiQualifiedSecuritiesLenderCertification',
        'nqi_alternative_withholding_statement_verification_certification' => 'setNqiAlternativeWithholdingStatementVerificationCertification',
        'territory_financial_institution_certification' => 'setTerritoryFinancialInstitutionCertification',
        'tfi_treated_as_us_person_certification' => 'setTfiTreatedAsUsPersonCertification',
        'tfi_withholding_statement_transmission_certification' => 'setTfiWithholdingStatementTransmissionCertification',
        'tfi_treated_as_us_person_for_ptp_sales_certification' => 'setTfiTreatedAsUsPersonForPtpSalesCertification',
        'tfi_nominee_us_person_for_ptp_distributions_certification' => 'setTfiNomineeUsPersonForPtpDistributionsCertification',
        'tfi_not_nominee_for_ptp_distributions_certification' => 'setTfiNotNomineeForPtpDistributionsCertification',
        'us_branch_non_effectively_connected_income_certification' => 'setUsBranchNonEffectivelyConnectedIncomeCertification',
        'us_branch_agreement_to_be_treated_as_us_person_certification' => 'setUsBranchAgreementToBeTreatedAsUsPersonCertification',
        'us_branch_withholding_statement_and_compliance_certification' => 'setUsBranchWithholdingStatementAndComplianceCertification',
        'us_branch_acting_as_us_person_for_ptp_sales_certification' => 'setUsBranchActingAsUsPersonForPtpSalesCertification',
        'us_branch_nominee_for_ptp_distributions_certification' => 'setUsBranchNomineeForPtpDistributionsCertification',
        'us_branch_not_nominee_for_ptp_distributions_certification' => 'setUsBranchNotNomineeForPtpDistributionsCertification',
        'withholding_foreign_partnership_or_trust_certification' => 'setWithholdingForeignPartnershipOrTrustCertification',
        'nonwithholding_foreign_entity_withholding_statement_certification' => 'setNonwithholdingForeignEntityWithholdingStatementCertification',
        'foreign_entity_partner_in_lower_tier_partnership_certification' => 'setForeignEntityPartnerInLowerTierPartnershipCertification',
        'foreign_partnership_amount_realized_section1446_f_certification' => 'setForeignPartnershipAmountRealizedSection1446FCertification',
        'foreign_partnership_modified_amount_realized_certification' => 'setForeignPartnershipModifiedAmountRealizedCertification',
        'foreign_grantor_trust_amount_realized_allocation_certification' => 'setForeignGrantorTrustAmountRealizedAllocationCertification',
        'alternative_withholding_statement_reliance_certification' => 'setAlternativeWithholdingStatementRelianceCertification',
        'np_ffi_with_exempt_beneficial_owners_certification' => 'setNpFfiWithExemptBeneficialOwnersCertification',
        'ffi_sponsoring_entity' => 'setFfiSponsoringEntity',
        'investment_entity_certification' => 'setInvestmentEntityCertification',
        'controlled_foreign_corporation_certification' => 'setControlledForeignCorporationCertification',
        'owner_documented_ffi_certification' => 'setOwnerDocumentedFfiCertification',
        'owner_documented_ffi_reporting_statement_certification' => 'setOwnerDocumentedFfiReportingStatementCertification',
        'owner_documented_ffi_auditor_letter_certification' => 'setOwnerDocumentedFfiAuditorLetterCertification',
        'compliant_nonregistering_local_bank_certification' => 'setCompliantNonregisteringLocalBankCertification',
        'compliant_ffi_low_value_accounts_certification' => 'setCompliantFfiLowValueAccountsCertification',
        'sponsored_closely_held_entity_sponsoring_entity' => 'setSponsoredCloselyHeldEntitySponsoringEntity',
        'sponsored_closely_held_investment_vehicle_certification' => 'setSponsoredCloselyHeldInvestmentVehicleCertification',
        'compliant_limited_life_debt_entity_certification' => 'setCompliantLimitedLifeDebtEntityCertification',
        'investment_entity_no_financial_accounts_certification' => 'setInvestmentEntityNoFinancialAccountsCertification',
        'restricted_distributor_certification' => 'setRestrictedDistributorCertification',
        'restricted_distributor_agreement_certification' => 'setRestrictedDistributorAgreementCertification',
        'restricted_distributor_preexisting_sales_compliance_certification' => 'setRestrictedDistributorPreexistingSalesComplianceCertification',
        'foreign_central_bank_of_issue_certification' => 'setForeignCentralBankOfIssueCertification',
        'nonreporting_iga_ffi_certification' => 'setNonreportingIgaFfiCertification',
        'iga_country' => 'setIgaCountry',
        'iga_model' => 'setIgaModel',
        'iga_legal_status_treatment' => 'setIgaLegalStatusTreatment',
        'iga_ffi_trustee_or_sponsor' => 'setIgaFfiTrusteeOrSponsor',
        'iga_ffi_trustee_is_foreign' => 'setIgaFfiTrusteeIsForeign',
        'treaty_qualified_pension_fund_certification' => 'setTreatyQualifiedPensionFundCertification',
        'qualified_retirement_fund_certification' => 'setQualifiedRetirementFundCertification',
        'narrow_participation_retirement_fund_certification' => 'setNarrowParticipationRetirementFundCertification',
        'section401_a_equivalent_pension_plan_certification' => 'setSection401AEquivalentPensionPlanCertification',
        'investment_entity_for_retirement_funds_certification' => 'setInvestmentEntityForRetirementFundsCertification',
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => 'setExemptBeneficialOwnerSponsoredRetirementFundCertification',
        'excepted_nonfinancial_group_entity_certification' => 'setExceptedNonfinancialGroupEntityCertification',
        'excepted_nonfinancial_start_up_certification' => 'setExceptedNonfinancialStartUpCertification',
        'startup_formation_or_resolution_date' => 'setStartupFormationOrResolutionDate',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => 'setExceptedNonfinancialEntityInLiquidationOrBankruptcyCertification',
        'nonfinancial_entity_filing_date' => 'setNonfinancialEntityFilingDate',
        'publicly_traded_nffe_certification' => 'setPubliclyTradedNffeCertification',
        'publicly_traded_nffe_securities_market' => 'setPubliclyTradedNffeSecuritiesMarket',
        'nffe_affiliate_of_publicly_traded_entity_certification' => 'setNffeAffiliateOfPubliclyTradedEntityCertification',
        'publicly_traded_entity' => 'setPubliclyTradedEntity',
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => 'setNffeAffiliateOfPubliclyTradedEntitySecuritiesMarket',
        'excepted_territory_nffe_certification' => 'setExceptedTerritoryNffeCertification',
        'active_nffe_certification' => 'setActiveNffeCertification',
        'passive_nffe_certification' => 'setPassiveNffeCertification',
        'sponsored_direct_reporting_nffe_certification' => 'setSponsoredDirectReportingNffeCertification',
        'direct_reporting_nffe_sponsoring_entity' => 'setDirectReportingNffeSponsoringEntity',
        'signer_name' => 'setSignerName',
        'making_treaty_claim' => 'setMakingTreatyClaim',
        'foreign_tin_not_required' => 'setForeignTinNotRequired',
        'treaty_country_certification' => 'setTreatyCountryCertification',
        'treaty_country' => 'setTreatyCountry',
        'benefit_limitation_certification' => 'setBenefitLimitationCertification',
        'benefit_limitation' => 'setBenefitLimitation',
        'qualified_resident_status_certification' => 'setQualifiedResidentStatusCertification',
        'treaty_article' => 'setTreatyArticle',
        'withholding_rate' => 'setWithholdingRate',
        'income_type' => 'setIncomeType',
        'treaty_reasons' => 'setTreatyReasons',
        'owner_documented_ffi_trust_beneficiaries_certification' => 'setOwnerDocumentedFfiTrustBeneficiariesCertification',
        'non_commercial_financial_activity_certification' => 'setNonCommercialFinancialActivityCertification',
        'internation_organization_certification' => 'setInternationOrganizationCertification',
        'intergovernmental_organization_certification' => 'setIntergovernmentalOrganizationCertification',
        'exempt_beneficial_owner_owned_investment_entity_certification' => 'setExemptBeneficialOwnerOwnedInvestmentEntityCertification',
        'section501_c_organization_certification' => 'setSection501COrganizationCertification',
        'determination_letter_date' => 'setDeterminationLetterDate',
        'nonprofit_organization_certification' => 'setNonprofitOrganizationCertification',
        'passive_nffe_no_substantial_us_owners_certification' => 'setPassiveNffeNoSubstantialUsOwnersCertification',
        'passive_nffe_substantial_us_owners_provided_certification' => 'setPassiveNffeSubstantialUsOwnersProvidedCertification',
        'excepted_inter_affiliate_ffi_certification' => 'setExceptedInterAffiliateFfiCertification',
        'substantial_us_owners' => 'setSubstantialUsOwners',
        'capacity_to_sign_certification' => 'setCapacityToSignCertification',
        'birthday' => 'setBirthday',
        'employee_first_name' => 'setEmployeeFirstName',
        'employee_middle_name' => 'setEmployeeMiddleName',
        'employee_last_name' => 'setEmployeeLastName',
        'employee_name_suffix' => 'setEmployeeNameSuffix',
        'marital_status' => 'setMaritalStatus',
        'last_name_differs' => 'setLastNameDiffers',
        'num_allowances' => 'setNumAllowances',
        'other_dependents' => 'setOtherDependents',
        'non_job_income' => 'setNonJobIncome',
        'deductions' => 'setDeductions',
        'additional_withheld' => 'setAdditionalWithheld',
        'exempt_from_withholding' => 'setExemptFromWithholding',
        'office_code' => 'setOfficeCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'name' => 'getName',
        'business_name' => 'getBusinessName',
        'business_classification' => 'getBusinessClassification',
        'business_other' => 'getBusinessOther',
        'foreign_partner_owner_or_beneficiary' => 'getForeignPartnerOwnerOrBeneficiary',
        'exempt_payee_code' => 'getExemptPayeeCode',
        'exempt_fatca_code' => 'getExemptFatcaCode',
        'foreign_country_indicator' => 'getForeignCountryIndicator',
        'address' => 'getAddress',
        'foreign_address' => 'getForeignAddress',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'account_number' => 'getAccountNumber',
        'tin_type' => 'getTinType',
        'tin' => 'getTin',
        'backup_withholding' => 'getBackupWithholding',
        'is1099able' => 'getIs1099able',
        'e_delivery_consented_at' => 'getEDeliveryConsentedAt',
        'signature' => 'getSignature',
        'company_id' => 'getCompanyId',
        'reference_id' => 'getReferenceId',
        'email' => 'getEmail',
        'citizenship_country' => 'getCitizenshipCountry',
        'disregarded_entity' => 'getDisregardedEntity',
        'entity_type' => 'getEntityType',
        'fatca_status' => 'getFatcaStatus',
        'residence_address' => 'getResidenceAddress',
        'residence_city' => 'getResidenceCity',
        'residence_state' => 'getResidenceState',
        'residence_zip' => 'getResidenceZip',
        'residence_country' => 'getResidenceCountry',
        'residence_is_mailing' => 'getResidenceIsMailing',
        'mailing_address' => 'getMailingAddress',
        'mailing_city' => 'getMailingCity',
        'mailing_state' => 'getMailingState',
        'mailing_zip' => 'getMailingZip',
        'mailing_country' => 'getMailingCountry',
        'giin' => 'getGiin',
        'foreign_tin' => 'getForeignTin',
        'reference_number' => 'getReferenceNumber',
        'disregarded_entity_fatca_status' => 'getDisregardedEntityFatcaStatus',
        'disregarded_address' => 'getDisregardedAddress',
        'disregarded_city' => 'getDisregardedCity',
        'disregarded_state' => 'getDisregardedState',
        'disregarded_zip' => 'getDisregardedZip',
        'disregarded_country' => 'getDisregardedCountry',
        'disregarded_entity_giin' => 'getDisregardedEntityGiin',
        'qualified_intermediary_certification' => 'getQualifiedIntermediaryCertification',
        'qi_primary_withholding_responsibility_certification' => 'getQiPrimaryWithholdingResponsibilityCertification',
        'qi_withholding_responsibility_for_ptp_sales_certification' => 'getQiWithholdingResponsibilityForPtpSalesCertification',
        'qi_nominee_withholding_responsibility_for_ptp_distributions_certification' => 'getQiNomineeWithholdingResponsibilityForPtpDistributionsCertification',
        'qi_securities_lender_substitute_dividend_withholding_certification' => 'getQiSecuritiesLenderSubstituteDividendWithholdingCertification',
        'qi_withholding_and1099_reporting_responsibility_certification' => 'getQiWithholdingAnd1099ReportingResponsibilityCertification',
        'qi_form1099_or_fatca_reporting_responsibility_certification' => 'getQiForm1099OrFatcaReportingResponsibilityCertification',
        'qi_opt_out_of_form1099_reporting_certification' => 'getQiOptOutOfForm1099ReportingCertification',
        'qi_withholding_rate_pool_certification' => 'getQiWithholdingRatePoolCertification',
        'qi_intermediary_or_flow_through_entity_documentation_certification' => 'getQiIntermediaryOrFlowThroughEntityDocumentationCertification',
        'qualified_derivatives_dealer_certification' => 'getQualifiedDerivativesDealerCertification',
        'qdd_corporation' => 'getQddCorporation',
        'qdd_partnership' => 'getQddPartnership',
        'qdd_disregarded_entity' => 'getQddDisregardedEntity',
        'nonqualified_intermediary_certification' => 'getNonqualifiedIntermediaryCertification',
        'nqi_withholding_statement_transmission_certification' => 'getNqiWithholdingStatementTransmissionCertification',
        'nqi_withholding_rate_pool_compliance_certification' => 'getNqiWithholdingRatePoolComplianceCertification',
        'nqi_qualified_securities_lender_certification' => 'getNqiQualifiedSecuritiesLenderCertification',
        'nqi_alternative_withholding_statement_verification_certification' => 'getNqiAlternativeWithholdingStatementVerificationCertification',
        'territory_financial_institution_certification' => 'getTerritoryFinancialInstitutionCertification',
        'tfi_treated_as_us_person_certification' => 'getTfiTreatedAsUsPersonCertification',
        'tfi_withholding_statement_transmission_certification' => 'getTfiWithholdingStatementTransmissionCertification',
        'tfi_treated_as_us_person_for_ptp_sales_certification' => 'getTfiTreatedAsUsPersonForPtpSalesCertification',
        'tfi_nominee_us_person_for_ptp_distributions_certification' => 'getTfiNomineeUsPersonForPtpDistributionsCertification',
        'tfi_not_nominee_for_ptp_distributions_certification' => 'getTfiNotNomineeForPtpDistributionsCertification',
        'us_branch_non_effectively_connected_income_certification' => 'getUsBranchNonEffectivelyConnectedIncomeCertification',
        'us_branch_agreement_to_be_treated_as_us_person_certification' => 'getUsBranchAgreementToBeTreatedAsUsPersonCertification',
        'us_branch_withholding_statement_and_compliance_certification' => 'getUsBranchWithholdingStatementAndComplianceCertification',
        'us_branch_acting_as_us_person_for_ptp_sales_certification' => 'getUsBranchActingAsUsPersonForPtpSalesCertification',
        'us_branch_nominee_for_ptp_distributions_certification' => 'getUsBranchNomineeForPtpDistributionsCertification',
        'us_branch_not_nominee_for_ptp_distributions_certification' => 'getUsBranchNotNomineeForPtpDistributionsCertification',
        'withholding_foreign_partnership_or_trust_certification' => 'getWithholdingForeignPartnershipOrTrustCertification',
        'nonwithholding_foreign_entity_withholding_statement_certification' => 'getNonwithholdingForeignEntityWithholdingStatementCertification',
        'foreign_entity_partner_in_lower_tier_partnership_certification' => 'getForeignEntityPartnerInLowerTierPartnershipCertification',
        'foreign_partnership_amount_realized_section1446_f_certification' => 'getForeignPartnershipAmountRealizedSection1446FCertification',
        'foreign_partnership_modified_amount_realized_certification' => 'getForeignPartnershipModifiedAmountRealizedCertification',
        'foreign_grantor_trust_amount_realized_allocation_certification' => 'getForeignGrantorTrustAmountRealizedAllocationCertification',
        'alternative_withholding_statement_reliance_certification' => 'getAlternativeWithholdingStatementRelianceCertification',
        'np_ffi_with_exempt_beneficial_owners_certification' => 'getNpFfiWithExemptBeneficialOwnersCertification',
        'ffi_sponsoring_entity' => 'getFfiSponsoringEntity',
        'investment_entity_certification' => 'getInvestmentEntityCertification',
        'controlled_foreign_corporation_certification' => 'getControlledForeignCorporationCertification',
        'owner_documented_ffi_certification' => 'getOwnerDocumentedFfiCertification',
        'owner_documented_ffi_reporting_statement_certification' => 'getOwnerDocumentedFfiReportingStatementCertification',
        'owner_documented_ffi_auditor_letter_certification' => 'getOwnerDocumentedFfiAuditorLetterCertification',
        'compliant_nonregistering_local_bank_certification' => 'getCompliantNonregisteringLocalBankCertification',
        'compliant_ffi_low_value_accounts_certification' => 'getCompliantFfiLowValueAccountsCertification',
        'sponsored_closely_held_entity_sponsoring_entity' => 'getSponsoredCloselyHeldEntitySponsoringEntity',
        'sponsored_closely_held_investment_vehicle_certification' => 'getSponsoredCloselyHeldInvestmentVehicleCertification',
        'compliant_limited_life_debt_entity_certification' => 'getCompliantLimitedLifeDebtEntityCertification',
        'investment_entity_no_financial_accounts_certification' => 'getInvestmentEntityNoFinancialAccountsCertification',
        'restricted_distributor_certification' => 'getRestrictedDistributorCertification',
        'restricted_distributor_agreement_certification' => 'getRestrictedDistributorAgreementCertification',
        'restricted_distributor_preexisting_sales_compliance_certification' => 'getRestrictedDistributorPreexistingSalesComplianceCertification',
        'foreign_central_bank_of_issue_certification' => 'getForeignCentralBankOfIssueCertification',
        'nonreporting_iga_ffi_certification' => 'getNonreportingIgaFfiCertification',
        'iga_country' => 'getIgaCountry',
        'iga_model' => 'getIgaModel',
        'iga_legal_status_treatment' => 'getIgaLegalStatusTreatment',
        'iga_ffi_trustee_or_sponsor' => 'getIgaFfiTrusteeOrSponsor',
        'iga_ffi_trustee_is_foreign' => 'getIgaFfiTrusteeIsForeign',
        'treaty_qualified_pension_fund_certification' => 'getTreatyQualifiedPensionFundCertification',
        'qualified_retirement_fund_certification' => 'getQualifiedRetirementFundCertification',
        'narrow_participation_retirement_fund_certification' => 'getNarrowParticipationRetirementFundCertification',
        'section401_a_equivalent_pension_plan_certification' => 'getSection401AEquivalentPensionPlanCertification',
        'investment_entity_for_retirement_funds_certification' => 'getInvestmentEntityForRetirementFundsCertification',
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => 'getExemptBeneficialOwnerSponsoredRetirementFundCertification',
        'excepted_nonfinancial_group_entity_certification' => 'getExceptedNonfinancialGroupEntityCertification',
        'excepted_nonfinancial_start_up_certification' => 'getExceptedNonfinancialStartUpCertification',
        'startup_formation_or_resolution_date' => 'getStartupFormationOrResolutionDate',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => 'getExceptedNonfinancialEntityInLiquidationOrBankruptcyCertification',
        'nonfinancial_entity_filing_date' => 'getNonfinancialEntityFilingDate',
        'publicly_traded_nffe_certification' => 'getPubliclyTradedNffeCertification',
        'publicly_traded_nffe_securities_market' => 'getPubliclyTradedNffeSecuritiesMarket',
        'nffe_affiliate_of_publicly_traded_entity_certification' => 'getNffeAffiliateOfPubliclyTradedEntityCertification',
        'publicly_traded_entity' => 'getPubliclyTradedEntity',
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => 'getNffeAffiliateOfPubliclyTradedEntitySecuritiesMarket',
        'excepted_territory_nffe_certification' => 'getExceptedTerritoryNffeCertification',
        'active_nffe_certification' => 'getActiveNffeCertification',
        'passive_nffe_certification' => 'getPassiveNffeCertification',
        'sponsored_direct_reporting_nffe_certification' => 'getSponsoredDirectReportingNffeCertification',
        'direct_reporting_nffe_sponsoring_entity' => 'getDirectReportingNffeSponsoringEntity',
        'signer_name' => 'getSignerName',
        'making_treaty_claim' => 'getMakingTreatyClaim',
        'foreign_tin_not_required' => 'getForeignTinNotRequired',
        'treaty_country_certification' => 'getTreatyCountryCertification',
        'treaty_country' => 'getTreatyCountry',
        'benefit_limitation_certification' => 'getBenefitLimitationCertification',
        'benefit_limitation' => 'getBenefitLimitation',
        'qualified_resident_status_certification' => 'getQualifiedResidentStatusCertification',
        'treaty_article' => 'getTreatyArticle',
        'withholding_rate' => 'getWithholdingRate',
        'income_type' => 'getIncomeType',
        'treaty_reasons' => 'getTreatyReasons',
        'owner_documented_ffi_trust_beneficiaries_certification' => 'getOwnerDocumentedFfiTrustBeneficiariesCertification',
        'non_commercial_financial_activity_certification' => 'getNonCommercialFinancialActivityCertification',
        'internation_organization_certification' => 'getInternationOrganizationCertification',
        'intergovernmental_organization_certification' => 'getIntergovernmentalOrganizationCertification',
        'exempt_beneficial_owner_owned_investment_entity_certification' => 'getExemptBeneficialOwnerOwnedInvestmentEntityCertification',
        'section501_c_organization_certification' => 'getSection501COrganizationCertification',
        'determination_letter_date' => 'getDeterminationLetterDate',
        'nonprofit_organization_certification' => 'getNonprofitOrganizationCertification',
        'passive_nffe_no_substantial_us_owners_certification' => 'getPassiveNffeNoSubstantialUsOwnersCertification',
        'passive_nffe_substantial_us_owners_provided_certification' => 'getPassiveNffeSubstantialUsOwnersProvidedCertification',
        'excepted_inter_affiliate_ffi_certification' => 'getExceptedInterAffiliateFfiCertification',
        'substantial_us_owners' => 'getSubstantialUsOwners',
        'capacity_to_sign_certification' => 'getCapacityToSignCertification',
        'birthday' => 'getBirthday',
        'employee_first_name' => 'getEmployeeFirstName',
        'employee_middle_name' => 'getEmployeeMiddleName',
        'employee_last_name' => 'getEmployeeLastName',
        'employee_name_suffix' => 'getEmployeeNameSuffix',
        'marital_status' => 'getMaritalStatus',
        'last_name_differs' => 'getLastNameDiffers',
        'num_allowances' => 'getNumAllowances',
        'other_dependents' => 'getOtherDependents',
        'non_job_income' => 'getNonJobIncome',
        'deductions' => 'getDeductions',
        'additional_withheld' => 'getAdditionalWithheld',
        'exempt_from_withholding' => 'getExemptFromWithholding',
        'office_code' => 'getOfficeCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_W4 = 'W4';
    const TYPE_W8_BEN = 'W8Ben';
    const TYPE_W8_BEN_E = 'W8BenE';
    const TYPE_W8_IMY = 'W8Imy';
    const TYPE_W9 = 'W9';
    const BUSINESS_CLASSIFICATION_INDIVIDUAL = 'Individual';
    const BUSINESS_CLASSIFICATION_C_CORPORATION = 'CCorporation';
    const BUSINESS_CLASSIFICATION_S_CORPORATION = 'SCorporation';
    const BUSINESS_CLASSIFICATION_PARTNERSHIP = 'Partnership';
    const BUSINESS_CLASSIFICATION_TRUST_ESTATE = 'TrustEstate';
    const BUSINESS_CLASSIFICATION_LLC_C = 'LlcC';
    const BUSINESS_CLASSIFICATION_LLC_S = 'LlcS';
    const BUSINESS_CLASSIFICATION_LLC_P = 'LlcP';
    const BUSINESS_CLASSIFICATION_OTHER = 'Other';
    const STATE_AA = 'AA';
    const STATE_AE = 'AE';
    const STATE_AK = 'AK';
    const STATE_AL = 'AL';
    const STATE_AP = 'AP';
    const STATE_AR = 'AR';
    const STATE__AS = 'AS';
    const STATE_AZ = 'AZ';
    const STATE_CA = 'CA';
    const STATE_CO = 'CO';
    const STATE_CT = 'CT';
    const STATE_DC = 'DC';
    const STATE_DE = 'DE';
    const STATE_FL = 'FL';
    const STATE_FM = 'FM';
    const STATE_GA = 'GA';
    const STATE_GU = 'GU';
    const STATE_HI = 'HI';
    const STATE_IA = 'IA';
    const STATE_ID = 'ID';
    const STATE_IL = 'IL';
    const STATE_IN = 'IN';
    const STATE_KS = 'KS';
    const STATE_KY = 'KY';
    const STATE_LA = 'LA';
    const STATE_MA = 'MA';
    const STATE_MD = 'MD';
    const STATE_ME = 'ME';
    const STATE_MH = 'MH';
    const STATE_MI = 'MI';
    const STATE_MN = 'MN';
    const STATE_MO = 'MO';
    const STATE_MP = 'MP';
    const STATE_MS = 'MS';
    const STATE_MT = 'MT';
    const STATE_NC = 'NC';
    const STATE_ND = 'ND';
    const STATE_NE = 'NE';
    const STATE_NH = 'NH';
    const STATE_NJ = 'NJ';
    const STATE_NM = 'NM';
    const STATE_NV = 'NV';
    const STATE_NY = 'NY';
    const STATE_OH = 'OH';
    const STATE_OK = 'OK';
    const STATE__OR = 'OR';
    const STATE_PA = 'PA';
    const STATE_PR = 'PR';
    const STATE_PW = 'PW';
    const STATE_RI = 'RI';
    const STATE_SC = 'SC';
    const STATE_SD = 'SD';
    const STATE_TN = 'TN';
    const STATE_TX = 'TX';
    const STATE_UT = 'UT';
    const STATE_VA = 'VA';
    const STATE_VI = 'VI';
    const STATE_VT = 'VT';
    const STATE_WA = 'WA';
    const STATE_WI = 'WI';
    const STATE_WV = 'WV';
    const STATE_WY = 'WY';
    const CITIZENSHIP_COUNTRY_US = 'US';
    const CITIZENSHIP_COUNTRY_AF = 'AF';
    const CITIZENSHIP_COUNTRY_AX = 'AX';
    const CITIZENSHIP_COUNTRY_AL = 'AL';
    const CITIZENSHIP_COUNTRY_AG = 'AG';
    const CITIZENSHIP_COUNTRY_AQ = 'AQ';
    const CITIZENSHIP_COUNTRY_AN = 'AN';
    const CITIZENSHIP_COUNTRY_AO = 'AO';
    const CITIZENSHIP_COUNTRY_AV = 'AV';
    const CITIZENSHIP_COUNTRY_AY = 'AY';
    const CITIZENSHIP_COUNTRY_AC = 'AC';
    const CITIZENSHIP_COUNTRY_AR = 'AR';
    const CITIZENSHIP_COUNTRY_AM = 'AM';
    const CITIZENSHIP_COUNTRY_AA = 'AA';
    const CITIZENSHIP_COUNTRY_AT = 'AT';
    const CITIZENSHIP_COUNTRY__AS = 'AS';
    const CITIZENSHIP_COUNTRY_AU = 'AU';
    const CITIZENSHIP_COUNTRY_AJ = 'AJ';
    const CITIZENSHIP_COUNTRY_BF = 'BF';
    const CITIZENSHIP_COUNTRY_BA = 'BA';
    const CITIZENSHIP_COUNTRY_FQ = 'FQ';
    const CITIZENSHIP_COUNTRY_BG = 'BG';
    const CITIZENSHIP_COUNTRY_BB = 'BB';
    const CITIZENSHIP_COUNTRY_BO = 'BO';
    const CITIZENSHIP_COUNTRY_BE = 'BE';
    const CITIZENSHIP_COUNTRY_BH = 'BH';
    const CITIZENSHIP_COUNTRY_BN = 'BN';
    const CITIZENSHIP_COUNTRY_BD = 'BD';
    const CITIZENSHIP_COUNTRY_BT = 'BT';
    const CITIZENSHIP_COUNTRY_BL = 'BL';
    const CITIZENSHIP_COUNTRY_BK = 'BK';
    const CITIZENSHIP_COUNTRY_BC = 'BC';
    const CITIZENSHIP_COUNTRY_BV = 'BV';
    const CITIZENSHIP_COUNTRY_BR = 'BR';
    const CITIZENSHIP_COUNTRY_IO = 'IO';
    const CITIZENSHIP_COUNTRY_VI = 'VI';
    const CITIZENSHIP_COUNTRY_BX = 'BX';
    const CITIZENSHIP_COUNTRY_BU = 'BU';
    const CITIZENSHIP_COUNTRY_UV = 'UV';
    const CITIZENSHIP_COUNTRY_BM = 'BM';
    const CITIZENSHIP_COUNTRY_BY = 'BY';
    const CITIZENSHIP_COUNTRY_CB = 'CB';
    const CITIZENSHIP_COUNTRY_CM = 'CM';
    const CITIZENSHIP_COUNTRY_CA = 'CA';
    const CITIZENSHIP_COUNTRY_CV = 'CV';
    const CITIZENSHIP_COUNTRY_CJ = 'CJ';
    const CITIZENSHIP_COUNTRY_CT = 'CT';
    const CITIZENSHIP_COUNTRY_CD = 'CD';
    const CITIZENSHIP_COUNTRY_CI = 'CI';
    const CITIZENSHIP_COUNTRY_CH = 'CH';
    const CITIZENSHIP_COUNTRY_KT = 'KT';
    const CITIZENSHIP_COUNTRY_IP = 'IP';
    const CITIZENSHIP_COUNTRY_CK = 'CK';
    const CITIZENSHIP_COUNTRY_CO = 'CO';
    const CITIZENSHIP_COUNTRY_CN = 'CN';
    const CITIZENSHIP_COUNTRY_CF = 'CF';
    const CITIZENSHIP_COUNTRY_CG = 'CG';
    const CITIZENSHIP_COUNTRY_CW = 'CW';
    const CITIZENSHIP_COUNTRY_CR = 'CR';
    const CITIZENSHIP_COUNTRY_CS = 'CS';
    const CITIZENSHIP_COUNTRY_IV = 'IV';
    const CITIZENSHIP_COUNTRY_HR = 'HR';
    const CITIZENSHIP_COUNTRY_CU = 'CU';
    const CITIZENSHIP_COUNTRY_UC = 'UC';
    const CITIZENSHIP_COUNTRY_CY = 'CY';
    const CITIZENSHIP_COUNTRY_EZ = 'EZ';
    const CITIZENSHIP_COUNTRY_DA = 'DA';
    const CITIZENSHIP_COUNTRY_DX = 'DX';
    const CITIZENSHIP_COUNTRY_DJ = 'DJ';
    const CITIZENSHIP_COUNTRY__DO = 'DO';
    const CITIZENSHIP_COUNTRY_DR = 'DR';
    const CITIZENSHIP_COUNTRY_TT = 'TT';
    const CITIZENSHIP_COUNTRY_EC = 'EC';
    const CITIZENSHIP_COUNTRY_EG = 'EG';
    const CITIZENSHIP_COUNTRY_ES = 'ES';
    const CITIZENSHIP_COUNTRY_EK = 'EK';
    const CITIZENSHIP_COUNTRY_ER = 'ER';
    const CITIZENSHIP_COUNTRY_EN = 'EN';
    const CITIZENSHIP_COUNTRY_ET = 'ET';
    const CITIZENSHIP_COUNTRY_FK = 'FK';
    const CITIZENSHIP_COUNTRY_FO = 'FO';
    const CITIZENSHIP_COUNTRY_FM = 'FM';
    const CITIZENSHIP_COUNTRY_FJ = 'FJ';
    const CITIZENSHIP_COUNTRY_FI = 'FI';
    const CITIZENSHIP_COUNTRY_FR = 'FR';
    const CITIZENSHIP_COUNTRY_FP = 'FP';
    const CITIZENSHIP_COUNTRY_FS = 'FS';
    const CITIZENSHIP_COUNTRY_GB = 'GB';
    const CITIZENSHIP_COUNTRY_GA = 'GA';
    const CITIZENSHIP_COUNTRY_GG = 'GG';
    const CITIZENSHIP_COUNTRY_GM = 'GM';
    const CITIZENSHIP_COUNTRY_GH = 'GH';
    const CITIZENSHIP_COUNTRY_GI = 'GI';
    const CITIZENSHIP_COUNTRY_GR = 'GR';
    const CITIZENSHIP_COUNTRY_GL = 'GL';
    const CITIZENSHIP_COUNTRY_GJ = 'GJ';
    const CITIZENSHIP_COUNTRY_GQ = 'GQ';
    const CITIZENSHIP_COUNTRY_GT = 'GT';
    const CITIZENSHIP_COUNTRY_GK = 'GK';
    const CITIZENSHIP_COUNTRY_GV = 'GV';
    const CITIZENSHIP_COUNTRY_PU = 'PU';
    const CITIZENSHIP_COUNTRY_GY = 'GY';
    const CITIZENSHIP_COUNTRY_HA = 'HA';
    const CITIZENSHIP_COUNTRY_HM = 'HM';
    const CITIZENSHIP_COUNTRY_VT = 'VT';
    const CITIZENSHIP_COUNTRY_HO = 'HO';
    const CITIZENSHIP_COUNTRY_HK = 'HK';
    const CITIZENSHIP_COUNTRY_HQ = 'HQ';
    const CITIZENSHIP_COUNTRY_HU = 'HU';
    const CITIZENSHIP_COUNTRY_IC = 'IC';
    const CITIZENSHIP_COUNTRY_IN = 'IN';
    const CITIZENSHIP_COUNTRY_ID = 'ID';
    const CITIZENSHIP_COUNTRY_IR = 'IR';
    const CITIZENSHIP_COUNTRY_IZ = 'IZ';
    const CITIZENSHIP_COUNTRY_EI = 'EI';
    const CITIZENSHIP_COUNTRY_IS = 'IS';
    const CITIZENSHIP_COUNTRY_IT = 'IT';
    const CITIZENSHIP_COUNTRY_JM = 'JM';
    const CITIZENSHIP_COUNTRY_JN = 'JN';
    const CITIZENSHIP_COUNTRY_JA = 'JA';
    const CITIZENSHIP_COUNTRY_DQ = 'DQ';
    const CITIZENSHIP_COUNTRY_JE = 'JE';
    const CITIZENSHIP_COUNTRY_JQ = 'JQ';
    const CITIZENSHIP_COUNTRY_JO = 'JO';
    const CITIZENSHIP_COUNTRY_KZ = 'KZ';
    const CITIZENSHIP_COUNTRY_KE = 'KE';
    const CITIZENSHIP_COUNTRY_KQ = 'KQ';
    const CITIZENSHIP_COUNTRY_KR = 'KR';
    const CITIZENSHIP_COUNTRY_KN = 'KN';
    const CITIZENSHIP_COUNTRY_KS = 'KS';
    const CITIZENSHIP_COUNTRY_KV = 'KV';
    const CITIZENSHIP_COUNTRY_KU = 'KU';
    const CITIZENSHIP_COUNTRY_KG = 'KG';
    const CITIZENSHIP_COUNTRY_LA = 'LA';
    const CITIZENSHIP_COUNTRY_LG = 'LG';
    const CITIZENSHIP_COUNTRY_LE = 'LE';
    const CITIZENSHIP_COUNTRY_LT = 'LT';
    const CITIZENSHIP_COUNTRY_LI = 'LI';
    const CITIZENSHIP_COUNTRY_LY = 'LY';
    const CITIZENSHIP_COUNTRY_LS = 'LS';
    const CITIZENSHIP_COUNTRY_LH = 'LH';
    const CITIZENSHIP_COUNTRY_LU = 'LU';
    const CITIZENSHIP_COUNTRY_MC = 'MC';
    const CITIZENSHIP_COUNTRY_MK = 'MK';
    const CITIZENSHIP_COUNTRY_MA = 'MA';
    const CITIZENSHIP_COUNTRY_MI = 'MI';
    const CITIZENSHIP_COUNTRY_MY = 'MY';
    const CITIZENSHIP_COUNTRY_MV = 'MV';
    const CITIZENSHIP_COUNTRY_ML = 'ML';
    const CITIZENSHIP_COUNTRY_MT = 'MT';
    const CITIZENSHIP_COUNTRY_IM = 'IM';
    const CITIZENSHIP_COUNTRY_RM = 'RM';
    const CITIZENSHIP_COUNTRY_MR = 'MR';
    const CITIZENSHIP_COUNTRY_MP = 'MP';
    const CITIZENSHIP_COUNTRY_MX = 'MX';
    const CITIZENSHIP_COUNTRY_MQ = 'MQ';
    const CITIZENSHIP_COUNTRY_MD = 'MD';
    const CITIZENSHIP_COUNTRY_MN = 'MN';
    const CITIZENSHIP_COUNTRY_MG = 'MG';
    const CITIZENSHIP_COUNTRY_MJ = 'MJ';
    const CITIZENSHIP_COUNTRY_MH = 'MH';
    const CITIZENSHIP_COUNTRY_MO = 'MO';
    const CITIZENSHIP_COUNTRY_MZ = 'MZ';
    const CITIZENSHIP_COUNTRY_WA = 'WA';
    const CITIZENSHIP_COUNTRY_NR = 'NR';
    const CITIZENSHIP_COUNTRY_BQ = 'BQ';
    const CITIZENSHIP_COUNTRY_NP = 'NP';
    const CITIZENSHIP_COUNTRY_NL = 'NL';
    const CITIZENSHIP_COUNTRY_NC = 'NC';
    const CITIZENSHIP_COUNTRY_NZ = 'NZ';
    const CITIZENSHIP_COUNTRY_NU = 'NU';
    const CITIZENSHIP_COUNTRY_NG = 'NG';
    const CITIZENSHIP_COUNTRY_NI = 'NI';
    const CITIZENSHIP_COUNTRY_NE = 'NE';
    const CITIZENSHIP_COUNTRY_NF = 'NF';
    const CITIZENSHIP_COUNTRY_CQ = 'CQ';
    const CITIZENSHIP_COUNTRY_NO = 'NO';
    const CITIZENSHIP_COUNTRY_MU = 'MU';
    const CITIZENSHIP_COUNTRY_OC = 'OC';
    const CITIZENSHIP_COUNTRY_PK = 'PK';
    const CITIZENSHIP_COUNTRY_PS = 'PS';
    const CITIZENSHIP_COUNTRY_LQ = 'LQ';
    const CITIZENSHIP_COUNTRY_PM = 'PM';
    const CITIZENSHIP_COUNTRY_PP = 'PP';
    const CITIZENSHIP_COUNTRY_PF = 'PF';
    const CITIZENSHIP_COUNTRY_PA = 'PA';
    const CITIZENSHIP_COUNTRY_PE = 'PE';
    const CITIZENSHIP_COUNTRY_RP = 'RP';
    const CITIZENSHIP_COUNTRY_PC = 'PC';
    const CITIZENSHIP_COUNTRY_PL = 'PL';
    const CITIZENSHIP_COUNTRY_PO = 'PO';
    const CITIZENSHIP_COUNTRY_RQ = 'RQ';
    const CITIZENSHIP_COUNTRY_QA = 'QA';
    const CITIZENSHIP_COUNTRY_RO = 'RO';
    const CITIZENSHIP_COUNTRY_RS = 'RS';
    const CITIZENSHIP_COUNTRY_RW = 'RW';
    const CITIZENSHIP_COUNTRY_TB = 'TB';
    const CITIZENSHIP_COUNTRY_RN = 'RN';
    const CITIZENSHIP_COUNTRY_WS = 'WS';
    const CITIZENSHIP_COUNTRY_SM = 'SM';
    const CITIZENSHIP_COUNTRY_TP = 'TP';
    const CITIZENSHIP_COUNTRY_SA = 'SA';
    const CITIZENSHIP_COUNTRY_SG = 'SG';
    const CITIZENSHIP_COUNTRY_RI = 'RI';
    const CITIZENSHIP_COUNTRY_SE = 'SE';
    const CITIZENSHIP_COUNTRY_SL = 'SL';
    const CITIZENSHIP_COUNTRY_SN = 'SN';
    const CITIZENSHIP_COUNTRY_NN = 'NN';
    const CITIZENSHIP_COUNTRY_LO = 'LO';
    const CITIZENSHIP_COUNTRY_SI = 'SI';
    const CITIZENSHIP_COUNTRY_BP = 'BP';
    const CITIZENSHIP_COUNTRY_SO = 'SO';
    const CITIZENSHIP_COUNTRY_SF = 'SF';
    const CITIZENSHIP_COUNTRY_SX = 'SX';
    const CITIZENSHIP_COUNTRY_SP = 'SP';
    const CITIZENSHIP_COUNTRY_PG = 'PG';
    const CITIZENSHIP_COUNTRY_CE = 'CE';
    const CITIZENSHIP_COUNTRY_SH = 'SH';
    const CITIZENSHIP_COUNTRY_SC = 'SC';
    const CITIZENSHIP_COUNTRY_ST = 'ST';
    const CITIZENSHIP_COUNTRY_SB = 'SB';
    const CITIZENSHIP_COUNTRY_VC = 'VC';
    const CITIZENSHIP_COUNTRY_SU = 'SU';
    const CITIZENSHIP_COUNTRY_NS = 'NS';
    const CITIZENSHIP_COUNTRY_SV = 'SV';
    const CITIZENSHIP_COUNTRY_WZ = 'WZ';
    const CITIZENSHIP_COUNTRY_SW = 'SW';
    const CITIZENSHIP_COUNTRY_SZ = 'SZ';
    const CITIZENSHIP_COUNTRY_SY = 'SY';
    const CITIZENSHIP_COUNTRY_TW = 'TW';
    const CITIZENSHIP_COUNTRY_TI = 'TI';
    const CITIZENSHIP_COUNTRY_TZ = 'TZ';
    const CITIZENSHIP_COUNTRY_TH = 'TH';
    const CITIZENSHIP_COUNTRY_TO = 'TO';
    const CITIZENSHIP_COUNTRY_TL = 'TL';
    const CITIZENSHIP_COUNTRY_TN = 'TN';
    const CITIZENSHIP_COUNTRY_TD = 'TD';
    const CITIZENSHIP_COUNTRY_TS = 'TS';
    const CITIZENSHIP_COUNTRY_TU = 'TU';
    const CITIZENSHIP_COUNTRY_TX = 'TX';
    const CITIZENSHIP_COUNTRY_TK = 'TK';
    const CITIZENSHIP_COUNTRY_TV = 'TV';
    const CITIZENSHIP_COUNTRY_UG = 'UG';
    const CITIZENSHIP_COUNTRY_UP = 'UP';
    const CITIZENSHIP_COUNTRY_AE = 'AE';
    const CITIZENSHIP_COUNTRY_UK = 'UK';
    const CITIZENSHIP_COUNTRY_UY = 'UY';
    const CITIZENSHIP_COUNTRY_UZ = 'UZ';
    const CITIZENSHIP_COUNTRY_NH = 'NH';
    const CITIZENSHIP_COUNTRY_VE = 'VE';
    const CITIZENSHIP_COUNTRY_VM = 'VM';
    const CITIZENSHIP_COUNTRY_VQ = 'VQ';
    const CITIZENSHIP_COUNTRY_WQ = 'WQ';
    const CITIZENSHIP_COUNTRY_WF = 'WF';
    const CITIZENSHIP_COUNTRY_WI = 'WI';
    const CITIZENSHIP_COUNTRY_YM = 'YM';
    const CITIZENSHIP_COUNTRY_ZA = 'ZA';
    const CITIZENSHIP_COUNTRY_ZI = 'ZI';
    const ENTITY_TYPE_CORPORATION = 'Corporation';
    const ENTITY_TYPE_DISREGARDED_ENTITY = 'DisregardedEntity';
    const ENTITY_TYPE_PARTNERSHIP = 'Partnership';
    const ENTITY_TYPE_SIMPLE_TRUST = 'SimpleTrust';
    const ENTITY_TYPE_GRANTOR_TRUST = 'GrantorTrust';
    const ENTITY_TYPE_COMPLEX_TRUST = 'ComplexTrust';
    const ENTITY_TYPE_ESTATE = 'Estate';
    const ENTITY_TYPE_FOREIGN_GOVERNMENT_CONTROLLED_ENTITY = 'ForeignGovernmentControlledEntity';
    const ENTITY_TYPE_CENTRAL_BANK_OF_ISSUE = 'CentralBankOfIssue';
    const ENTITY_TYPE_TAX_EXEMPT_ORGANIZATION = 'TaxExemptOrganization';
    const ENTITY_TYPE_PRIVATE_FOUNDATION = 'PrivateFoundation';
    const ENTITY_TYPE_INTERNATIONAL_ORGANIZATION = 'InternationalOrganization';
    const ENTITY_TYPE_FOREIGN_GOVERNMENT_CONTROLLED_INTEGRAL_PART = 'ForeignGovernmentControlledIntegralPart';
    const FATCA_STATUS_NONPARTICIPATING_FFI = 'NonparticipatingFFI';
    const FATCA_STATUS_PARTICIPATING_FFI = 'ParticipatingFFI';
    const FATCA_STATUS_REPORTING_MODEL1_FFI = 'ReportingModel1FFI';
    const FATCA_STATUS_REPORTING_MODEL2_FFI = 'ReportingModel2FFI';
    const FATCA_STATUS_REGISTERED_DEEMED_COMPLIANT_FFI = 'RegisteredDeemedCompliantFFI';
    const FATCA_STATUS_SPONSORED_FFI_WITHOUT_GIIN = 'SponsoredFFIWithoutGIIN';
    const FATCA_STATUS_CERTIFIED_DEEMED_COMPLIANT_NONREGISTERING_LOCAL_BANK = 'CertifiedDeemedCompliantNonregisteringLocalBank';
    const FATCA_STATUS_CERTIFIED_DEEMED_COMPLIANT_FFI_WITH_LOW_VALUE_ACCOUNTS = 'CertifiedDeemedCompliantFFIWithLowValueAccounts';
    const FATCA_STATUS_CERTIFIED_DEEMED_COMPLIANT_SPONSORED_CLOSELY_HELD_INVESTMENT_VEHICLE = 'CertifiedDeemedCompliantSponsoredCloselyHeldInvestmentVehicle';
    const FATCA_STATUS_CERTIFIED_DEEMED_COMPLIANT_LIMITED_LIFE_DEBT_INVESTMENT_ENTITY = 'CertifiedDeemedCompliantLimitedLifeDebtInvestmentEntity';
    const FATCA_STATUS_CERTAIN_INVESTMENT_ENTITIES_WITHOUT_FINANCIAL_ACCOUNTS = 'CertainInvestmentEntitiesWithoutFinancialAccounts';
    const FATCA_STATUS_OWNER_DOCUMENTED_FFI = 'OwnerDocumentedFFI';
    const FATCA_STATUS_RESTRICTED_DISTRIBUTOR = 'RestrictedDistributor';
    const FATCA_STATUS_NONREPORTING_IGAFFI = 'NonreportingIGAFFI';
    const FATCA_STATUS_FOREIGN_GOVERNMENT_OR_US_POSSESSION_OR_FOREIGN_CENTRAL_BANK = 'ForeignGovernmentOrUSPossessionOrForeignCentralBank';
    const FATCA_STATUS_INTERNATIONAL_ORGANIZATION = 'InternationalOrganization';
    const FATCA_STATUS_EXEMPT_RETIREMENT_PLANS = 'ExemptRetirementPlans';
    const FATCA_STATUS_ENTITY_WHOLLY_OWNED_BY_EXEMPT_BENEFICIAL_OWNERS = 'EntityWhollyOwnedByExemptBeneficialOwners';
    const FATCA_STATUS_TERRITORY_FINANCIAL_INSTITUTION = 'TerritoryFinancialInstitution';
    const FATCA_STATUS_NONFINANCIAL_GROUP_ENTITY = 'NonfinancialGroupEntity';
    const FATCA_STATUS_EXCEPTED_NONFINANCIAL_START_UP_COMPANY = 'ExceptedNonfinancialStartUpCompany';
    const FATCA_STATUS_EXCEPTED_NONFINANCIAL_ENTITY_IN_LIQUIDATION_OR_BANKRUPTCY = 'ExceptedNonfinancialEntityInLiquidationOrBankruptcy';
    const FATCA_STATUS_ORGANIZATION501C = 'Organization501c';
    const FATCA_STATUS_NONPROFIT_ORGANIZATION = 'NonprofitOrganization';
    const FATCA_STATUS_PUBLICLY_TRADED_NFFEOR_AFFILIATE_OF_PUBLICLY_TRADED_CORPORATION = 'PubliclyTradedNFFEOrAffiliateOfPubliclyTradedCorporation';
    const FATCA_STATUS_EXCEPTED_TERRITORY_NFFE = 'ExceptedTerritoryNFFE';
    const FATCA_STATUS_ACTIVE_NFFE = 'ActiveNFFE';
    const FATCA_STATUS_PASSIVE_NFFE = 'PassiveNFFE';
    const FATCA_STATUS_EXCEPTED_INTER_AFFILIATE_FFI = 'ExceptedInterAffiliateFFI';
    const FATCA_STATUS_DIRECT_REPORTING_NFFE = 'DirectReportingNFFE';
    const FATCA_STATUS_SPONSORED_DIRECT_REPORTING_NFFE = 'SponsoredDirectReportingNFFE';
    const FATCA_STATUS_ACCOUNT_THAT_IS_NOT_FINANCIAL_ACCOUNT = 'AccountThatIsNotFinancialAccount';
    const RESIDENCE_STATE_AA = 'AA';
    const RESIDENCE_STATE_AE = 'AE';
    const RESIDENCE_STATE_AK = 'AK';
    const RESIDENCE_STATE_AL = 'AL';
    const RESIDENCE_STATE_AP = 'AP';
    const RESIDENCE_STATE_AR = 'AR';
    const RESIDENCE_STATE__AS = 'AS';
    const RESIDENCE_STATE_AZ = 'AZ';
    const RESIDENCE_STATE_CA = 'CA';
    const RESIDENCE_STATE_CO = 'CO';
    const RESIDENCE_STATE_CT = 'CT';
    const RESIDENCE_STATE_DC = 'DC';
    const RESIDENCE_STATE_DE = 'DE';
    const RESIDENCE_STATE_FL = 'FL';
    const RESIDENCE_STATE_FM = 'FM';
    const RESIDENCE_STATE_GA = 'GA';
    const RESIDENCE_STATE_GU = 'GU';
    const RESIDENCE_STATE_HI = 'HI';
    const RESIDENCE_STATE_IA = 'IA';
    const RESIDENCE_STATE_ID = 'ID';
    const RESIDENCE_STATE_IL = 'IL';
    const RESIDENCE_STATE_IN = 'IN';
    const RESIDENCE_STATE_KS = 'KS';
    const RESIDENCE_STATE_KY = 'KY';
    const RESIDENCE_STATE_LA = 'LA';
    const RESIDENCE_STATE_MA = 'MA';
    const RESIDENCE_STATE_MD = 'MD';
    const RESIDENCE_STATE_ME = 'ME';
    const RESIDENCE_STATE_MH = 'MH';
    const RESIDENCE_STATE_MI = 'MI';
    const RESIDENCE_STATE_MN = 'MN';
    const RESIDENCE_STATE_MO = 'MO';
    const RESIDENCE_STATE_MP = 'MP';
    const RESIDENCE_STATE_MS = 'MS';
    const RESIDENCE_STATE_MT = 'MT';
    const RESIDENCE_STATE_NC = 'NC';
    const RESIDENCE_STATE_ND = 'ND';
    const RESIDENCE_STATE_NE = 'NE';
    const RESIDENCE_STATE_NH = 'NH';
    const RESIDENCE_STATE_NJ = 'NJ';
    const RESIDENCE_STATE_NM = 'NM';
    const RESIDENCE_STATE_NV = 'NV';
    const RESIDENCE_STATE_NY = 'NY';
    const RESIDENCE_STATE_OH = 'OH';
    const RESIDENCE_STATE_OK = 'OK';
    const RESIDENCE_STATE__OR = 'OR';
    const RESIDENCE_STATE_PA = 'PA';
    const RESIDENCE_STATE_PR = 'PR';
    const RESIDENCE_STATE_PW = 'PW';
    const RESIDENCE_STATE_RI = 'RI';
    const RESIDENCE_STATE_SC = 'SC';
    const RESIDENCE_STATE_SD = 'SD';
    const RESIDENCE_STATE_TN = 'TN';
    const RESIDENCE_STATE_TX = 'TX';
    const RESIDENCE_STATE_UT = 'UT';
    const RESIDENCE_STATE_VA = 'VA';
    const RESIDENCE_STATE_VI = 'VI';
    const RESIDENCE_STATE_VT = 'VT';
    const RESIDENCE_STATE_WA = 'WA';
    const RESIDENCE_STATE_WI = 'WI';
    const RESIDENCE_STATE_WV = 'WV';
    const RESIDENCE_STATE_WY = 'WY';
    const RESIDENCE_STATE_AB = 'AB';
    const RESIDENCE_STATE_BC = 'BC';
    const RESIDENCE_STATE_MB = 'MB';
    const RESIDENCE_STATE_NB = 'NB';
    const RESIDENCE_STATE_NL = 'NL';
    const RESIDENCE_STATE_NS = 'NS';
    const RESIDENCE_STATE_NT = 'NT';
    const RESIDENCE_STATE_NU = 'NU';
    const RESIDENCE_STATE_ON = 'ON';
    const RESIDENCE_STATE_PE = 'PE';
    const RESIDENCE_STATE_QC = 'QC';
    const RESIDENCE_STATE_SK = 'SK';
    const RESIDENCE_STATE_YT = 'YT';
    const RESIDENCE_COUNTRY_US = 'US';
    const RESIDENCE_COUNTRY_AF = 'AF';
    const RESIDENCE_COUNTRY_AX = 'AX';
    const RESIDENCE_COUNTRY_AL = 'AL';
    const RESIDENCE_COUNTRY_AG = 'AG';
    const RESIDENCE_COUNTRY_AQ = 'AQ';
    const RESIDENCE_COUNTRY_AN = 'AN';
    const RESIDENCE_COUNTRY_AO = 'AO';
    const RESIDENCE_COUNTRY_AV = 'AV';
    const RESIDENCE_COUNTRY_AY = 'AY';
    const RESIDENCE_COUNTRY_AC = 'AC';
    const RESIDENCE_COUNTRY_AR = 'AR';
    const RESIDENCE_COUNTRY_AM = 'AM';
    const RESIDENCE_COUNTRY_AA = 'AA';
    const RESIDENCE_COUNTRY_AT = 'AT';
    const RESIDENCE_COUNTRY__AS = 'AS';
    const RESIDENCE_COUNTRY_AU = 'AU';
    const RESIDENCE_COUNTRY_AJ = 'AJ';
    const RESIDENCE_COUNTRY_BF = 'BF';
    const RESIDENCE_COUNTRY_BA = 'BA';
    const RESIDENCE_COUNTRY_FQ = 'FQ';
    const RESIDENCE_COUNTRY_BG = 'BG';
    const RESIDENCE_COUNTRY_BB = 'BB';
    const RESIDENCE_COUNTRY_BO = 'BO';
    const RESIDENCE_COUNTRY_BE = 'BE';
    const RESIDENCE_COUNTRY_BH = 'BH';
    const RESIDENCE_COUNTRY_BN = 'BN';
    const RESIDENCE_COUNTRY_BD = 'BD';
    const RESIDENCE_COUNTRY_BT = 'BT';
    const RESIDENCE_COUNTRY_BL = 'BL';
    const RESIDENCE_COUNTRY_BK = 'BK';
    const RESIDENCE_COUNTRY_BC = 'BC';
    const RESIDENCE_COUNTRY_BV = 'BV';
    const RESIDENCE_COUNTRY_BR = 'BR';
    const RESIDENCE_COUNTRY_IO = 'IO';
    const RESIDENCE_COUNTRY_VI = 'VI';
    const RESIDENCE_COUNTRY_BX = 'BX';
    const RESIDENCE_COUNTRY_BU = 'BU';
    const RESIDENCE_COUNTRY_UV = 'UV';
    const RESIDENCE_COUNTRY_BM = 'BM';
    const RESIDENCE_COUNTRY_BY = 'BY';
    const RESIDENCE_COUNTRY_CB = 'CB';
    const RESIDENCE_COUNTRY_CM = 'CM';
    const RESIDENCE_COUNTRY_CA = 'CA';
    const RESIDENCE_COUNTRY_CV = 'CV';
    const RESIDENCE_COUNTRY_CJ = 'CJ';
    const RESIDENCE_COUNTRY_CT = 'CT';
    const RESIDENCE_COUNTRY_CD = 'CD';
    const RESIDENCE_COUNTRY_CI = 'CI';
    const RESIDENCE_COUNTRY_CH = 'CH';
    const RESIDENCE_COUNTRY_KT = 'KT';
    const RESIDENCE_COUNTRY_IP = 'IP';
    const RESIDENCE_COUNTRY_CK = 'CK';
    const RESIDENCE_COUNTRY_CO = 'CO';
    const RESIDENCE_COUNTRY_CN = 'CN';
    const RESIDENCE_COUNTRY_CF = 'CF';
    const RESIDENCE_COUNTRY_CG = 'CG';
    const RESIDENCE_COUNTRY_CW = 'CW';
    const RESIDENCE_COUNTRY_CR = 'CR';
    const RESIDENCE_COUNTRY_CS = 'CS';
    const RESIDENCE_COUNTRY_IV = 'IV';
    const RESIDENCE_COUNTRY_HR = 'HR';
    const RESIDENCE_COUNTRY_CU = 'CU';
    const RESIDENCE_COUNTRY_UC = 'UC';
    const RESIDENCE_COUNTRY_CY = 'CY';
    const RESIDENCE_COUNTRY_EZ = 'EZ';
    const RESIDENCE_COUNTRY_DA = 'DA';
    const RESIDENCE_COUNTRY_DX = 'DX';
    const RESIDENCE_COUNTRY_DJ = 'DJ';
    const RESIDENCE_COUNTRY__DO = 'DO';
    const RESIDENCE_COUNTRY_DR = 'DR';
    const RESIDENCE_COUNTRY_TT = 'TT';
    const RESIDENCE_COUNTRY_EC = 'EC';
    const RESIDENCE_COUNTRY_EG = 'EG';
    const RESIDENCE_COUNTRY_ES = 'ES';
    const RESIDENCE_COUNTRY_EK = 'EK';
    const RESIDENCE_COUNTRY_ER = 'ER';
    const RESIDENCE_COUNTRY_EN = 'EN';
    const RESIDENCE_COUNTRY_ET = 'ET';
    const RESIDENCE_COUNTRY_FK = 'FK';
    const RESIDENCE_COUNTRY_FO = 'FO';
    const RESIDENCE_COUNTRY_FM = 'FM';
    const RESIDENCE_COUNTRY_FJ = 'FJ';
    const RESIDENCE_COUNTRY_FI = 'FI';
    const RESIDENCE_COUNTRY_FR = 'FR';
    const RESIDENCE_COUNTRY_FP = 'FP';
    const RESIDENCE_COUNTRY_FS = 'FS';
    const RESIDENCE_COUNTRY_GB = 'GB';
    const RESIDENCE_COUNTRY_GA = 'GA';
    const RESIDENCE_COUNTRY_GG = 'GG';
    const RESIDENCE_COUNTRY_GM = 'GM';
    const RESIDENCE_COUNTRY_GH = 'GH';
    const RESIDENCE_COUNTRY_GI = 'GI';
    const RESIDENCE_COUNTRY_GR = 'GR';
    const RESIDENCE_COUNTRY_GL = 'GL';
    const RESIDENCE_COUNTRY_GJ = 'GJ';
    const RESIDENCE_COUNTRY_GQ = 'GQ';
    const RESIDENCE_COUNTRY_GT = 'GT';
    const RESIDENCE_COUNTRY_GK = 'GK';
    const RESIDENCE_COUNTRY_GV = 'GV';
    const RESIDENCE_COUNTRY_PU = 'PU';
    const RESIDENCE_COUNTRY_GY = 'GY';
    const RESIDENCE_COUNTRY_HA = 'HA';
    const RESIDENCE_COUNTRY_HM = 'HM';
    const RESIDENCE_COUNTRY_VT = 'VT';
    const RESIDENCE_COUNTRY_HO = 'HO';
    const RESIDENCE_COUNTRY_HK = 'HK';
    const RESIDENCE_COUNTRY_HQ = 'HQ';
    const RESIDENCE_COUNTRY_HU = 'HU';
    const RESIDENCE_COUNTRY_IC = 'IC';
    const RESIDENCE_COUNTRY_IN = 'IN';
    const RESIDENCE_COUNTRY_ID = 'ID';
    const RESIDENCE_COUNTRY_IR = 'IR';
    const RESIDENCE_COUNTRY_IZ = 'IZ';
    const RESIDENCE_COUNTRY_EI = 'EI';
    const RESIDENCE_COUNTRY_IS = 'IS';
    const RESIDENCE_COUNTRY_IT = 'IT';
    const RESIDENCE_COUNTRY_JM = 'JM';
    const RESIDENCE_COUNTRY_JN = 'JN';
    const RESIDENCE_COUNTRY_JA = 'JA';
    const RESIDENCE_COUNTRY_DQ = 'DQ';
    const RESIDENCE_COUNTRY_JE = 'JE';
    const RESIDENCE_COUNTRY_JQ = 'JQ';
    const RESIDENCE_COUNTRY_JO = 'JO';
    const RESIDENCE_COUNTRY_KZ = 'KZ';
    const RESIDENCE_COUNTRY_KE = 'KE';
    const RESIDENCE_COUNTRY_KQ = 'KQ';
    const RESIDENCE_COUNTRY_KR = 'KR';
    const RESIDENCE_COUNTRY_KN = 'KN';
    const RESIDENCE_COUNTRY_KS = 'KS';
    const RESIDENCE_COUNTRY_KV = 'KV';
    const RESIDENCE_COUNTRY_KU = 'KU';
    const RESIDENCE_COUNTRY_KG = 'KG';
    const RESIDENCE_COUNTRY_LA = 'LA';
    const RESIDENCE_COUNTRY_LG = 'LG';
    const RESIDENCE_COUNTRY_LE = 'LE';
    const RESIDENCE_COUNTRY_LT = 'LT';
    const RESIDENCE_COUNTRY_LI = 'LI';
    const RESIDENCE_COUNTRY_LY = 'LY';
    const RESIDENCE_COUNTRY_LS = 'LS';
    const RESIDENCE_COUNTRY_LH = 'LH';
    const RESIDENCE_COUNTRY_LU = 'LU';
    const RESIDENCE_COUNTRY_MC = 'MC';
    const RESIDENCE_COUNTRY_MK = 'MK';
    const RESIDENCE_COUNTRY_MA = 'MA';
    const RESIDENCE_COUNTRY_MI = 'MI';
    const RESIDENCE_COUNTRY_MY = 'MY';
    const RESIDENCE_COUNTRY_MV = 'MV';
    const RESIDENCE_COUNTRY_ML = 'ML';
    const RESIDENCE_COUNTRY_MT = 'MT';
    const RESIDENCE_COUNTRY_IM = 'IM';
    const RESIDENCE_COUNTRY_RM = 'RM';
    const RESIDENCE_COUNTRY_MR = 'MR';
    const RESIDENCE_COUNTRY_MP = 'MP';
    const RESIDENCE_COUNTRY_MX = 'MX';
    const RESIDENCE_COUNTRY_MQ = 'MQ';
    const RESIDENCE_COUNTRY_MD = 'MD';
    const RESIDENCE_COUNTRY_MN = 'MN';
    const RESIDENCE_COUNTRY_MG = 'MG';
    const RESIDENCE_COUNTRY_MJ = 'MJ';
    const RESIDENCE_COUNTRY_MH = 'MH';
    const RESIDENCE_COUNTRY_MO = 'MO';
    const RESIDENCE_COUNTRY_MZ = 'MZ';
    const RESIDENCE_COUNTRY_WA = 'WA';
    const RESIDENCE_COUNTRY_NR = 'NR';
    const RESIDENCE_COUNTRY_BQ = 'BQ';
    const RESIDENCE_COUNTRY_NP = 'NP';
    const RESIDENCE_COUNTRY_NL = 'NL';
    const RESIDENCE_COUNTRY_NC = 'NC';
    const RESIDENCE_COUNTRY_NZ = 'NZ';
    const RESIDENCE_COUNTRY_NU = 'NU';
    const RESIDENCE_COUNTRY_NG = 'NG';
    const RESIDENCE_COUNTRY_NI = 'NI';
    const RESIDENCE_COUNTRY_NE = 'NE';
    const RESIDENCE_COUNTRY_NF = 'NF';
    const RESIDENCE_COUNTRY_CQ = 'CQ';
    const RESIDENCE_COUNTRY_NO = 'NO';
    const RESIDENCE_COUNTRY_MU = 'MU';
    const RESIDENCE_COUNTRY_OC = 'OC';
    const RESIDENCE_COUNTRY_PK = 'PK';
    const RESIDENCE_COUNTRY_PS = 'PS';
    const RESIDENCE_COUNTRY_LQ = 'LQ';
    const RESIDENCE_COUNTRY_PM = 'PM';
    const RESIDENCE_COUNTRY_PP = 'PP';
    const RESIDENCE_COUNTRY_PF = 'PF';
    const RESIDENCE_COUNTRY_PA = 'PA';
    const RESIDENCE_COUNTRY_PE = 'PE';
    const RESIDENCE_COUNTRY_RP = 'RP';
    const RESIDENCE_COUNTRY_PC = 'PC';
    const RESIDENCE_COUNTRY_PL = 'PL';
    const RESIDENCE_COUNTRY_PO = 'PO';
    const RESIDENCE_COUNTRY_RQ = 'RQ';
    const RESIDENCE_COUNTRY_QA = 'QA';
    const RESIDENCE_COUNTRY_RO = 'RO';
    const RESIDENCE_COUNTRY_RS = 'RS';
    const RESIDENCE_COUNTRY_RW = 'RW';
    const RESIDENCE_COUNTRY_TB = 'TB';
    const RESIDENCE_COUNTRY_RN = 'RN';
    const RESIDENCE_COUNTRY_WS = 'WS';
    const RESIDENCE_COUNTRY_SM = 'SM';
    const RESIDENCE_COUNTRY_TP = 'TP';
    const RESIDENCE_COUNTRY_SA = 'SA';
    const RESIDENCE_COUNTRY_SG = 'SG';
    const RESIDENCE_COUNTRY_RI = 'RI';
    const RESIDENCE_COUNTRY_SE = 'SE';
    const RESIDENCE_COUNTRY_SL = 'SL';
    const RESIDENCE_COUNTRY_SN = 'SN';
    const RESIDENCE_COUNTRY_NN = 'NN';
    const RESIDENCE_COUNTRY_LO = 'LO';
    const RESIDENCE_COUNTRY_SI = 'SI';
    const RESIDENCE_COUNTRY_BP = 'BP';
    const RESIDENCE_COUNTRY_SO = 'SO';
    const RESIDENCE_COUNTRY_SF = 'SF';
    const RESIDENCE_COUNTRY_SX = 'SX';
    const RESIDENCE_COUNTRY_SP = 'SP';
    const RESIDENCE_COUNTRY_PG = 'PG';
    const RESIDENCE_COUNTRY_CE = 'CE';
    const RESIDENCE_COUNTRY_SH = 'SH';
    const RESIDENCE_COUNTRY_SC = 'SC';
    const RESIDENCE_COUNTRY_ST = 'ST';
    const RESIDENCE_COUNTRY_SB = 'SB';
    const RESIDENCE_COUNTRY_VC = 'VC';
    const RESIDENCE_COUNTRY_SU = 'SU';
    const RESIDENCE_COUNTRY_NS = 'NS';
    const RESIDENCE_COUNTRY_SV = 'SV';
    const RESIDENCE_COUNTRY_WZ = 'WZ';
    const RESIDENCE_COUNTRY_SW = 'SW';
    const RESIDENCE_COUNTRY_SZ = 'SZ';
    const RESIDENCE_COUNTRY_SY = 'SY';
    const RESIDENCE_COUNTRY_TW = 'TW';
    const RESIDENCE_COUNTRY_TI = 'TI';
    const RESIDENCE_COUNTRY_TZ = 'TZ';
    const RESIDENCE_COUNTRY_TH = 'TH';
    const RESIDENCE_COUNTRY_TO = 'TO';
    const RESIDENCE_COUNTRY_TL = 'TL';
    const RESIDENCE_COUNTRY_TN = 'TN';
    const RESIDENCE_COUNTRY_TD = 'TD';
    const RESIDENCE_COUNTRY_TS = 'TS';
    const RESIDENCE_COUNTRY_TU = 'TU';
    const RESIDENCE_COUNTRY_TX = 'TX';
    const RESIDENCE_COUNTRY_TK = 'TK';
    const RESIDENCE_COUNTRY_TV = 'TV';
    const RESIDENCE_COUNTRY_UG = 'UG';
    const RESIDENCE_COUNTRY_UP = 'UP';
    const RESIDENCE_COUNTRY_AE = 'AE';
    const RESIDENCE_COUNTRY_UK = 'UK';
    const RESIDENCE_COUNTRY_UY = 'UY';
    const RESIDENCE_COUNTRY_UZ = 'UZ';
    const RESIDENCE_COUNTRY_NH = 'NH';
    const RESIDENCE_COUNTRY_VE = 'VE';
    const RESIDENCE_COUNTRY_VM = 'VM';
    const RESIDENCE_COUNTRY_VQ = 'VQ';
    const RESIDENCE_COUNTRY_WQ = 'WQ';
    const RESIDENCE_COUNTRY_WF = 'WF';
    const RESIDENCE_COUNTRY_WI = 'WI';
    const RESIDENCE_COUNTRY_YM = 'YM';
    const RESIDENCE_COUNTRY_ZA = 'ZA';
    const RESIDENCE_COUNTRY_ZI = 'ZI';
    const MAILING_STATE_AA = 'AA';
    const MAILING_STATE_AE = 'AE';
    const MAILING_STATE_AK = 'AK';
    const MAILING_STATE_AL = 'AL';
    const MAILING_STATE_AP = 'AP';
    const MAILING_STATE_AR = 'AR';
    const MAILING_STATE__AS = 'AS';
    const MAILING_STATE_AZ = 'AZ';
    const MAILING_STATE_CA = 'CA';
    const MAILING_STATE_CO = 'CO';
    const MAILING_STATE_CT = 'CT';
    const MAILING_STATE_DC = 'DC';
    const MAILING_STATE_DE = 'DE';
    const MAILING_STATE_FL = 'FL';
    const MAILING_STATE_FM = 'FM';
    const MAILING_STATE_GA = 'GA';
    const MAILING_STATE_GU = 'GU';
    const MAILING_STATE_HI = 'HI';
    const MAILING_STATE_IA = 'IA';
    const MAILING_STATE_ID = 'ID';
    const MAILING_STATE_IL = 'IL';
    const MAILING_STATE_IN = 'IN';
    const MAILING_STATE_KS = 'KS';
    const MAILING_STATE_KY = 'KY';
    const MAILING_STATE_LA = 'LA';
    const MAILING_STATE_MA = 'MA';
    const MAILING_STATE_MD = 'MD';
    const MAILING_STATE_ME = 'ME';
    const MAILING_STATE_MH = 'MH';
    const MAILING_STATE_MI = 'MI';
    const MAILING_STATE_MN = 'MN';
    const MAILING_STATE_MO = 'MO';
    const MAILING_STATE_MP = 'MP';
    const MAILING_STATE_MS = 'MS';
    const MAILING_STATE_MT = 'MT';
    const MAILING_STATE_NC = 'NC';
    const MAILING_STATE_ND = 'ND';
    const MAILING_STATE_NE = 'NE';
    const MAILING_STATE_NH = 'NH';
    const MAILING_STATE_NJ = 'NJ';
    const MAILING_STATE_NM = 'NM';
    const MAILING_STATE_NV = 'NV';
    const MAILING_STATE_NY = 'NY';
    const MAILING_STATE_OH = 'OH';
    const MAILING_STATE_OK = 'OK';
    const MAILING_STATE__OR = 'OR';
    const MAILING_STATE_PA = 'PA';
    const MAILING_STATE_PR = 'PR';
    const MAILING_STATE_PW = 'PW';
    const MAILING_STATE_RI = 'RI';
    const MAILING_STATE_SC = 'SC';
    const MAILING_STATE_SD = 'SD';
    const MAILING_STATE_TN = 'TN';
    const MAILING_STATE_TX = 'TX';
    const MAILING_STATE_UT = 'UT';
    const MAILING_STATE_VA = 'VA';
    const MAILING_STATE_VI = 'VI';
    const MAILING_STATE_VT = 'VT';
    const MAILING_STATE_WA = 'WA';
    const MAILING_STATE_WI = 'WI';
    const MAILING_STATE_WV = 'WV';
    const MAILING_STATE_WY = 'WY';
    const MAILING_STATE_AB = 'AB';
    const MAILING_STATE_BC = 'BC';
    const MAILING_STATE_MB = 'MB';
    const MAILING_STATE_NB = 'NB';
    const MAILING_STATE_NL = 'NL';
    const MAILING_STATE_NS = 'NS';
    const MAILING_STATE_NT = 'NT';
    const MAILING_STATE_NU = 'NU';
    const MAILING_STATE_ON = 'ON';
    const MAILING_STATE_PE = 'PE';
    const MAILING_STATE_QC = 'QC';
    const MAILING_STATE_SK = 'SK';
    const MAILING_STATE_YT = 'YT';
    const MAILING_COUNTRY_US = 'US';
    const MAILING_COUNTRY_AF = 'AF';
    const MAILING_COUNTRY_AX = 'AX';
    const MAILING_COUNTRY_AL = 'AL';
    const MAILING_COUNTRY_AG = 'AG';
    const MAILING_COUNTRY_AQ = 'AQ';
    const MAILING_COUNTRY_AN = 'AN';
    const MAILING_COUNTRY_AO = 'AO';
    const MAILING_COUNTRY_AV = 'AV';
    const MAILING_COUNTRY_AY = 'AY';
    const MAILING_COUNTRY_AC = 'AC';
    const MAILING_COUNTRY_AR = 'AR';
    const MAILING_COUNTRY_AM = 'AM';
    const MAILING_COUNTRY_AA = 'AA';
    const MAILING_COUNTRY_AT = 'AT';
    const MAILING_COUNTRY__AS = 'AS';
    const MAILING_COUNTRY_AU = 'AU';
    const MAILING_COUNTRY_AJ = 'AJ';
    const MAILING_COUNTRY_BF = 'BF';
    const MAILING_COUNTRY_BA = 'BA';
    const MAILING_COUNTRY_FQ = 'FQ';
    const MAILING_COUNTRY_BG = 'BG';
    const MAILING_COUNTRY_BB = 'BB';
    const MAILING_COUNTRY_BO = 'BO';
    const MAILING_COUNTRY_BE = 'BE';
    const MAILING_COUNTRY_BH = 'BH';
    const MAILING_COUNTRY_BN = 'BN';
    const MAILING_COUNTRY_BD = 'BD';
    const MAILING_COUNTRY_BT = 'BT';
    const MAILING_COUNTRY_BL = 'BL';
    const MAILING_COUNTRY_BK = 'BK';
    const MAILING_COUNTRY_BC = 'BC';
    const MAILING_COUNTRY_BV = 'BV';
    const MAILING_COUNTRY_BR = 'BR';
    const MAILING_COUNTRY_IO = 'IO';
    const MAILING_COUNTRY_VI = 'VI';
    const MAILING_COUNTRY_BX = 'BX';
    const MAILING_COUNTRY_BU = 'BU';
    const MAILING_COUNTRY_UV = 'UV';
    const MAILING_COUNTRY_BM = 'BM';
    const MAILING_COUNTRY_BY = 'BY';
    const MAILING_COUNTRY_CB = 'CB';
    const MAILING_COUNTRY_CM = 'CM';
    const MAILING_COUNTRY_CA = 'CA';
    const MAILING_COUNTRY_CV = 'CV';
    const MAILING_COUNTRY_CJ = 'CJ';
    const MAILING_COUNTRY_CT = 'CT';
    const MAILING_COUNTRY_CD = 'CD';
    const MAILING_COUNTRY_CI = 'CI';
    const MAILING_COUNTRY_CH = 'CH';
    const MAILING_COUNTRY_KT = 'KT';
    const MAILING_COUNTRY_IP = 'IP';
    const MAILING_COUNTRY_CK = 'CK';
    const MAILING_COUNTRY_CO = 'CO';
    const MAILING_COUNTRY_CN = 'CN';
    const MAILING_COUNTRY_CF = 'CF';
    const MAILING_COUNTRY_CG = 'CG';
    const MAILING_COUNTRY_CW = 'CW';
    const MAILING_COUNTRY_CR = 'CR';
    const MAILING_COUNTRY_CS = 'CS';
    const MAILING_COUNTRY_IV = 'IV';
    const MAILING_COUNTRY_HR = 'HR';
    const MAILING_COUNTRY_CU = 'CU';
    const MAILING_COUNTRY_UC = 'UC';
    const MAILING_COUNTRY_CY = 'CY';
    const MAILING_COUNTRY_EZ = 'EZ';
    const MAILING_COUNTRY_DA = 'DA';
    const MAILING_COUNTRY_DX = 'DX';
    const MAILING_COUNTRY_DJ = 'DJ';
    const MAILING_COUNTRY__DO = 'DO';
    const MAILING_COUNTRY_DR = 'DR';
    const MAILING_COUNTRY_TT = 'TT';
    const MAILING_COUNTRY_EC = 'EC';
    const MAILING_COUNTRY_EG = 'EG';
    const MAILING_COUNTRY_ES = 'ES';
    const MAILING_COUNTRY_EK = 'EK';
    const MAILING_COUNTRY_ER = 'ER';
    const MAILING_COUNTRY_EN = 'EN';
    const MAILING_COUNTRY_ET = 'ET';
    const MAILING_COUNTRY_FK = 'FK';
    const MAILING_COUNTRY_FO = 'FO';
    const MAILING_COUNTRY_FM = 'FM';
    const MAILING_COUNTRY_FJ = 'FJ';
    const MAILING_COUNTRY_FI = 'FI';
    const MAILING_COUNTRY_FR = 'FR';
    const MAILING_COUNTRY_FP = 'FP';
    const MAILING_COUNTRY_FS = 'FS';
    const MAILING_COUNTRY_GB = 'GB';
    const MAILING_COUNTRY_GA = 'GA';
    const MAILING_COUNTRY_GG = 'GG';
    const MAILING_COUNTRY_GM = 'GM';
    const MAILING_COUNTRY_GH = 'GH';
    const MAILING_COUNTRY_GI = 'GI';
    const MAILING_COUNTRY_GR = 'GR';
    const MAILING_COUNTRY_GL = 'GL';
    const MAILING_COUNTRY_GJ = 'GJ';
    const MAILING_COUNTRY_GQ = 'GQ';
    const MAILING_COUNTRY_GT = 'GT';
    const MAILING_COUNTRY_GK = 'GK';
    const MAILING_COUNTRY_GV = 'GV';
    const MAILING_COUNTRY_PU = 'PU';
    const MAILING_COUNTRY_GY = 'GY';
    const MAILING_COUNTRY_HA = 'HA';
    const MAILING_COUNTRY_HM = 'HM';
    const MAILING_COUNTRY_VT = 'VT';
    const MAILING_COUNTRY_HO = 'HO';
    const MAILING_COUNTRY_HK = 'HK';
    const MAILING_COUNTRY_HQ = 'HQ';
    const MAILING_COUNTRY_HU = 'HU';
    const MAILING_COUNTRY_IC = 'IC';
    const MAILING_COUNTRY_IN = 'IN';
    const MAILING_COUNTRY_ID = 'ID';
    const MAILING_COUNTRY_IR = 'IR';
    const MAILING_COUNTRY_IZ = 'IZ';
    const MAILING_COUNTRY_EI = 'EI';
    const MAILING_COUNTRY_IS = 'IS';
    const MAILING_COUNTRY_IT = 'IT';
    const MAILING_COUNTRY_JM = 'JM';
    const MAILING_COUNTRY_JN = 'JN';
    const MAILING_COUNTRY_JA = 'JA';
    const MAILING_COUNTRY_DQ = 'DQ';
    const MAILING_COUNTRY_JE = 'JE';
    const MAILING_COUNTRY_JQ = 'JQ';
    const MAILING_COUNTRY_JO = 'JO';
    const MAILING_COUNTRY_KZ = 'KZ';
    const MAILING_COUNTRY_KE = 'KE';
    const MAILING_COUNTRY_KQ = 'KQ';
    const MAILING_COUNTRY_KR = 'KR';
    const MAILING_COUNTRY_KN = 'KN';
    const MAILING_COUNTRY_KS = 'KS';
    const MAILING_COUNTRY_KV = 'KV';
    const MAILING_COUNTRY_KU = 'KU';
    const MAILING_COUNTRY_KG = 'KG';
    const MAILING_COUNTRY_LA = 'LA';
    const MAILING_COUNTRY_LG = 'LG';
    const MAILING_COUNTRY_LE = 'LE';
    const MAILING_COUNTRY_LT = 'LT';
    const MAILING_COUNTRY_LI = 'LI';
    const MAILING_COUNTRY_LY = 'LY';
    const MAILING_COUNTRY_LS = 'LS';
    const MAILING_COUNTRY_LH = 'LH';
    const MAILING_COUNTRY_LU = 'LU';
    const MAILING_COUNTRY_MC = 'MC';
    const MAILING_COUNTRY_MK = 'MK';
    const MAILING_COUNTRY_MA = 'MA';
    const MAILING_COUNTRY_MI = 'MI';
    const MAILING_COUNTRY_MY = 'MY';
    const MAILING_COUNTRY_MV = 'MV';
    const MAILING_COUNTRY_ML = 'ML';
    const MAILING_COUNTRY_MT = 'MT';
    const MAILING_COUNTRY_IM = 'IM';
    const MAILING_COUNTRY_RM = 'RM';
    const MAILING_COUNTRY_MR = 'MR';
    const MAILING_COUNTRY_MP = 'MP';
    const MAILING_COUNTRY_MX = 'MX';
    const MAILING_COUNTRY_MQ = 'MQ';
    const MAILING_COUNTRY_MD = 'MD';
    const MAILING_COUNTRY_MN = 'MN';
    const MAILING_COUNTRY_MG = 'MG';
    const MAILING_COUNTRY_MJ = 'MJ';
    const MAILING_COUNTRY_MH = 'MH';
    const MAILING_COUNTRY_MO = 'MO';
    const MAILING_COUNTRY_MZ = 'MZ';
    const MAILING_COUNTRY_WA = 'WA';
    const MAILING_COUNTRY_NR = 'NR';
    const MAILING_COUNTRY_BQ = 'BQ';
    const MAILING_COUNTRY_NP = 'NP';
    const MAILING_COUNTRY_NL = 'NL';
    const MAILING_COUNTRY_NC = 'NC';
    const MAILING_COUNTRY_NZ = 'NZ';
    const MAILING_COUNTRY_NU = 'NU';
    const MAILING_COUNTRY_NG = 'NG';
    const MAILING_COUNTRY_NI = 'NI';
    const MAILING_COUNTRY_NE = 'NE';
    const MAILING_COUNTRY_NF = 'NF';
    const MAILING_COUNTRY_CQ = 'CQ';
    const MAILING_COUNTRY_NO = 'NO';
    const MAILING_COUNTRY_MU = 'MU';
    const MAILING_COUNTRY_OC = 'OC';
    const MAILING_COUNTRY_PK = 'PK';
    const MAILING_COUNTRY_PS = 'PS';
    const MAILING_COUNTRY_LQ = 'LQ';
    const MAILING_COUNTRY_PM = 'PM';
    const MAILING_COUNTRY_PP = 'PP';
    const MAILING_COUNTRY_PF = 'PF';
    const MAILING_COUNTRY_PA = 'PA';
    const MAILING_COUNTRY_PE = 'PE';
    const MAILING_COUNTRY_RP = 'RP';
    const MAILING_COUNTRY_PC = 'PC';
    const MAILING_COUNTRY_PL = 'PL';
    const MAILING_COUNTRY_PO = 'PO';
    const MAILING_COUNTRY_RQ = 'RQ';
    const MAILING_COUNTRY_QA = 'QA';
    const MAILING_COUNTRY_RO = 'RO';
    const MAILING_COUNTRY_RS = 'RS';
    const MAILING_COUNTRY_RW = 'RW';
    const MAILING_COUNTRY_TB = 'TB';
    const MAILING_COUNTRY_RN = 'RN';
    const MAILING_COUNTRY_WS = 'WS';
    const MAILING_COUNTRY_SM = 'SM';
    const MAILING_COUNTRY_TP = 'TP';
    const MAILING_COUNTRY_SA = 'SA';
    const MAILING_COUNTRY_SG = 'SG';
    const MAILING_COUNTRY_RI = 'RI';
    const MAILING_COUNTRY_SE = 'SE';
    const MAILING_COUNTRY_SL = 'SL';
    const MAILING_COUNTRY_SN = 'SN';
    const MAILING_COUNTRY_NN = 'NN';
    const MAILING_COUNTRY_LO = 'LO';
    const MAILING_COUNTRY_SI = 'SI';
    const MAILING_COUNTRY_BP = 'BP';
    const MAILING_COUNTRY_SO = 'SO';
    const MAILING_COUNTRY_SF = 'SF';
    const MAILING_COUNTRY_SX = 'SX';
    const MAILING_COUNTRY_SP = 'SP';
    const MAILING_COUNTRY_PG = 'PG';
    const MAILING_COUNTRY_CE = 'CE';
    const MAILING_COUNTRY_SH = 'SH';
    const MAILING_COUNTRY_SC = 'SC';
    const MAILING_COUNTRY_ST = 'ST';
    const MAILING_COUNTRY_SB = 'SB';
    const MAILING_COUNTRY_VC = 'VC';
    const MAILING_COUNTRY_SU = 'SU';
    const MAILING_COUNTRY_NS = 'NS';
    const MAILING_COUNTRY_SV = 'SV';
    const MAILING_COUNTRY_WZ = 'WZ';
    const MAILING_COUNTRY_SW = 'SW';
    const MAILING_COUNTRY_SZ = 'SZ';
    const MAILING_COUNTRY_SY = 'SY';
    const MAILING_COUNTRY_TW = 'TW';
    const MAILING_COUNTRY_TI = 'TI';
    const MAILING_COUNTRY_TZ = 'TZ';
    const MAILING_COUNTRY_TH = 'TH';
    const MAILING_COUNTRY_TO = 'TO';
    const MAILING_COUNTRY_TL = 'TL';
    const MAILING_COUNTRY_TN = 'TN';
    const MAILING_COUNTRY_TD = 'TD';
    const MAILING_COUNTRY_TS = 'TS';
    const MAILING_COUNTRY_TU = 'TU';
    const MAILING_COUNTRY_TX = 'TX';
    const MAILING_COUNTRY_TK = 'TK';
    const MAILING_COUNTRY_TV = 'TV';
    const MAILING_COUNTRY_UG = 'UG';
    const MAILING_COUNTRY_UP = 'UP';
    const MAILING_COUNTRY_AE = 'AE';
    const MAILING_COUNTRY_UK = 'UK';
    const MAILING_COUNTRY_UY = 'UY';
    const MAILING_COUNTRY_UZ = 'UZ';
    const MAILING_COUNTRY_NH = 'NH';
    const MAILING_COUNTRY_VE = 'VE';
    const MAILING_COUNTRY_VM = 'VM';
    const MAILING_COUNTRY_VQ = 'VQ';
    const MAILING_COUNTRY_WQ = 'WQ';
    const MAILING_COUNTRY_WF = 'WF';
    const MAILING_COUNTRY_WI = 'WI';
    const MAILING_COUNTRY_YM = 'YM';
    const MAILING_COUNTRY_ZA = 'ZA';
    const MAILING_COUNTRY_ZI = 'ZI';
    const DISREGARDED_ENTITY_FATCA_STATUS_BRANCH_TREATED_AS_NONPARTICIPATING_FFI = 'BranchTreatedAsNonparticipatingFFI';
    const DISREGARDED_ENTITY_FATCA_STATUS_US_BRANCH = 'USBranch';
    const DISREGARDED_ENTITY_FATCA_STATUS_PARTICIPATING_FFI = 'ParticipatingFFI';
    const DISREGARDED_ENTITY_FATCA_STATUS_REPORTING_MODEL1_FFI = 'ReportingModel1FFI';
    const DISREGARDED_ENTITY_FATCA_STATUS_REPORTING_MODEL2_FFI = 'ReportingModel2FFI';
    const DISREGARDED_STATE_AA = 'AA';
    const DISREGARDED_STATE_AE = 'AE';
    const DISREGARDED_STATE_AK = 'AK';
    const DISREGARDED_STATE_AL = 'AL';
    const DISREGARDED_STATE_AP = 'AP';
    const DISREGARDED_STATE_AR = 'AR';
    const DISREGARDED_STATE__AS = 'AS';
    const DISREGARDED_STATE_AZ = 'AZ';
    const DISREGARDED_STATE_CA = 'CA';
    const DISREGARDED_STATE_CO = 'CO';
    const DISREGARDED_STATE_CT = 'CT';
    const DISREGARDED_STATE_DC = 'DC';
    const DISREGARDED_STATE_DE = 'DE';
    const DISREGARDED_STATE_FL = 'FL';
    const DISREGARDED_STATE_FM = 'FM';
    const DISREGARDED_STATE_GA = 'GA';
    const DISREGARDED_STATE_GU = 'GU';
    const DISREGARDED_STATE_HI = 'HI';
    const DISREGARDED_STATE_IA = 'IA';
    const DISREGARDED_STATE_ID = 'ID';
    const DISREGARDED_STATE_IL = 'IL';
    const DISREGARDED_STATE_IN = 'IN';
    const DISREGARDED_STATE_KS = 'KS';
    const DISREGARDED_STATE_KY = 'KY';
    const DISREGARDED_STATE_LA = 'LA';
    const DISREGARDED_STATE_MA = 'MA';
    const DISREGARDED_STATE_MD = 'MD';
    const DISREGARDED_STATE_ME = 'ME';
    const DISREGARDED_STATE_MH = 'MH';
    const DISREGARDED_STATE_MI = 'MI';
    const DISREGARDED_STATE_MN = 'MN';
    const DISREGARDED_STATE_MO = 'MO';
    const DISREGARDED_STATE_MP = 'MP';
    const DISREGARDED_STATE_MS = 'MS';
    const DISREGARDED_STATE_MT = 'MT';
    const DISREGARDED_STATE_NC = 'NC';
    const DISREGARDED_STATE_ND = 'ND';
    const DISREGARDED_STATE_NE = 'NE';
    const DISREGARDED_STATE_NH = 'NH';
    const DISREGARDED_STATE_NJ = 'NJ';
    const DISREGARDED_STATE_NM = 'NM';
    const DISREGARDED_STATE_NV = 'NV';
    const DISREGARDED_STATE_NY = 'NY';
    const DISREGARDED_STATE_OH = 'OH';
    const DISREGARDED_STATE_OK = 'OK';
    const DISREGARDED_STATE__OR = 'OR';
    const DISREGARDED_STATE_PA = 'PA';
    const DISREGARDED_STATE_PR = 'PR';
    const DISREGARDED_STATE_PW = 'PW';
    const DISREGARDED_STATE_RI = 'RI';
    const DISREGARDED_STATE_SC = 'SC';
    const DISREGARDED_STATE_SD = 'SD';
    const DISREGARDED_STATE_TN = 'TN';
    const DISREGARDED_STATE_TX = 'TX';
    const DISREGARDED_STATE_UT = 'UT';
    const DISREGARDED_STATE_VA = 'VA';
    const DISREGARDED_STATE_VI = 'VI';
    const DISREGARDED_STATE_VT = 'VT';
    const DISREGARDED_STATE_WA = 'WA';
    const DISREGARDED_STATE_WI = 'WI';
    const DISREGARDED_STATE_WV = 'WV';
    const DISREGARDED_STATE_WY = 'WY';
    const IGA_MODEL_MODEL1_IGA = 'Model1IGA';
    const IGA_MODEL_MODEL2_IGA = 'Model2IGA';
    const TREATY_COUNTRY_US = 'US';
    const TREATY_COUNTRY_AF = 'AF';
    const TREATY_COUNTRY_AX = 'AX';
    const TREATY_COUNTRY_AL = 'AL';
    const TREATY_COUNTRY_AG = 'AG';
    const TREATY_COUNTRY_AQ = 'AQ';
    const TREATY_COUNTRY_AN = 'AN';
    const TREATY_COUNTRY_AO = 'AO';
    const TREATY_COUNTRY_AV = 'AV';
    const TREATY_COUNTRY_AY = 'AY';
    const TREATY_COUNTRY_AC = 'AC';
    const TREATY_COUNTRY_AR = 'AR';
    const TREATY_COUNTRY_AM = 'AM';
    const TREATY_COUNTRY_AA = 'AA';
    const TREATY_COUNTRY_AT = 'AT';
    const TREATY_COUNTRY__AS = 'AS';
    const TREATY_COUNTRY_AU = 'AU';
    const TREATY_COUNTRY_AJ = 'AJ';
    const TREATY_COUNTRY_BF = 'BF';
    const TREATY_COUNTRY_BA = 'BA';
    const TREATY_COUNTRY_FQ = 'FQ';
    const TREATY_COUNTRY_BG = 'BG';
    const TREATY_COUNTRY_BB = 'BB';
    const TREATY_COUNTRY_BO = 'BO';
    const TREATY_COUNTRY_BE = 'BE';
    const TREATY_COUNTRY_BH = 'BH';
    const TREATY_COUNTRY_BN = 'BN';
    const TREATY_COUNTRY_BD = 'BD';
    const TREATY_COUNTRY_BT = 'BT';
    const TREATY_COUNTRY_BL = 'BL';
    const TREATY_COUNTRY_BK = 'BK';
    const TREATY_COUNTRY_BC = 'BC';
    const TREATY_COUNTRY_BV = 'BV';
    const TREATY_COUNTRY_BR = 'BR';
    const TREATY_COUNTRY_IO = 'IO';
    const TREATY_COUNTRY_VI = 'VI';
    const TREATY_COUNTRY_BX = 'BX';
    const TREATY_COUNTRY_BU = 'BU';
    const TREATY_COUNTRY_UV = 'UV';
    const TREATY_COUNTRY_BM = 'BM';
    const TREATY_COUNTRY_BY = 'BY';
    const TREATY_COUNTRY_CB = 'CB';
    const TREATY_COUNTRY_CM = 'CM';
    const TREATY_COUNTRY_CA = 'CA';
    const TREATY_COUNTRY_CV = 'CV';
    const TREATY_COUNTRY_CJ = 'CJ';
    const TREATY_COUNTRY_CT = 'CT';
    const TREATY_COUNTRY_CD = 'CD';
    const TREATY_COUNTRY_CI = 'CI';
    const TREATY_COUNTRY_CH = 'CH';
    const TREATY_COUNTRY_KT = 'KT';
    const TREATY_COUNTRY_IP = 'IP';
    const TREATY_COUNTRY_CK = 'CK';
    const TREATY_COUNTRY_CO = 'CO';
    const TREATY_COUNTRY_CN = 'CN';
    const TREATY_COUNTRY_CF = 'CF';
    const TREATY_COUNTRY_CG = 'CG';
    const TREATY_COUNTRY_CW = 'CW';
    const TREATY_COUNTRY_CR = 'CR';
    const TREATY_COUNTRY_CS = 'CS';
    const TREATY_COUNTRY_IV = 'IV';
    const TREATY_COUNTRY_HR = 'HR';
    const TREATY_COUNTRY_CU = 'CU';
    const TREATY_COUNTRY_UC = 'UC';
    const TREATY_COUNTRY_CY = 'CY';
    const TREATY_COUNTRY_EZ = 'EZ';
    const TREATY_COUNTRY_DA = 'DA';
    const TREATY_COUNTRY_DX = 'DX';
    const TREATY_COUNTRY_DJ = 'DJ';
    const TREATY_COUNTRY__DO = 'DO';
    const TREATY_COUNTRY_DR = 'DR';
    const TREATY_COUNTRY_TT = 'TT';
    const TREATY_COUNTRY_EC = 'EC';
    const TREATY_COUNTRY_EG = 'EG';
    const TREATY_COUNTRY_ES = 'ES';
    const TREATY_COUNTRY_EK = 'EK';
    const TREATY_COUNTRY_ER = 'ER';
    const TREATY_COUNTRY_EN = 'EN';
    const TREATY_COUNTRY_ET = 'ET';
    const TREATY_COUNTRY_FK = 'FK';
    const TREATY_COUNTRY_FO = 'FO';
    const TREATY_COUNTRY_FM = 'FM';
    const TREATY_COUNTRY_FJ = 'FJ';
    const TREATY_COUNTRY_FI = 'FI';
    const TREATY_COUNTRY_FR = 'FR';
    const TREATY_COUNTRY_FP = 'FP';
    const TREATY_COUNTRY_FS = 'FS';
    const TREATY_COUNTRY_GB = 'GB';
    const TREATY_COUNTRY_GA = 'GA';
    const TREATY_COUNTRY_GG = 'GG';
    const TREATY_COUNTRY_GM = 'GM';
    const TREATY_COUNTRY_GH = 'GH';
    const TREATY_COUNTRY_GI = 'GI';
    const TREATY_COUNTRY_GR = 'GR';
    const TREATY_COUNTRY_GL = 'GL';
    const TREATY_COUNTRY_GJ = 'GJ';
    const TREATY_COUNTRY_GQ = 'GQ';
    const TREATY_COUNTRY_GT = 'GT';
    const TREATY_COUNTRY_GK = 'GK';
    const TREATY_COUNTRY_GV = 'GV';
    const TREATY_COUNTRY_PU = 'PU';
    const TREATY_COUNTRY_GY = 'GY';
    const TREATY_COUNTRY_HA = 'HA';
    const TREATY_COUNTRY_HM = 'HM';
    const TREATY_COUNTRY_VT = 'VT';
    const TREATY_COUNTRY_HO = 'HO';
    const TREATY_COUNTRY_HK = 'HK';
    const TREATY_COUNTRY_HQ = 'HQ';
    const TREATY_COUNTRY_HU = 'HU';
    const TREATY_COUNTRY_IC = 'IC';
    const TREATY_COUNTRY_IN = 'IN';
    const TREATY_COUNTRY_ID = 'ID';
    const TREATY_COUNTRY_IR = 'IR';
    const TREATY_COUNTRY_IZ = 'IZ';
    const TREATY_COUNTRY_EI = 'EI';
    const TREATY_COUNTRY_IS = 'IS';
    const TREATY_COUNTRY_IT = 'IT';
    const TREATY_COUNTRY_JM = 'JM';
    const TREATY_COUNTRY_JN = 'JN';
    const TREATY_COUNTRY_JA = 'JA';
    const TREATY_COUNTRY_DQ = 'DQ';
    const TREATY_COUNTRY_JE = 'JE';
    const TREATY_COUNTRY_JQ = 'JQ';
    const TREATY_COUNTRY_JO = 'JO';
    const TREATY_COUNTRY_KZ = 'KZ';
    const TREATY_COUNTRY_KE = 'KE';
    const TREATY_COUNTRY_KQ = 'KQ';
    const TREATY_COUNTRY_KR = 'KR';
    const TREATY_COUNTRY_KN = 'KN';
    const TREATY_COUNTRY_KS = 'KS';
    const TREATY_COUNTRY_KV = 'KV';
    const TREATY_COUNTRY_KU = 'KU';
    const TREATY_COUNTRY_KG = 'KG';
    const TREATY_COUNTRY_LA = 'LA';
    const TREATY_COUNTRY_LG = 'LG';
    const TREATY_COUNTRY_LE = 'LE';
    const TREATY_COUNTRY_LT = 'LT';
    const TREATY_COUNTRY_LI = 'LI';
    const TREATY_COUNTRY_LY = 'LY';
    const TREATY_COUNTRY_LS = 'LS';
    const TREATY_COUNTRY_LH = 'LH';
    const TREATY_COUNTRY_LU = 'LU';
    const TREATY_COUNTRY_MC = 'MC';
    const TREATY_COUNTRY_MK = 'MK';
    const TREATY_COUNTRY_MA = 'MA';
    const TREATY_COUNTRY_MI = 'MI';
    const TREATY_COUNTRY_MY = 'MY';
    const TREATY_COUNTRY_MV = 'MV';
    const TREATY_COUNTRY_ML = 'ML';
    const TREATY_COUNTRY_MT = 'MT';
    const TREATY_COUNTRY_IM = 'IM';
    const TREATY_COUNTRY_RM = 'RM';
    const TREATY_COUNTRY_MR = 'MR';
    const TREATY_COUNTRY_MP = 'MP';
    const TREATY_COUNTRY_MX = 'MX';
    const TREATY_COUNTRY_MQ = 'MQ';
    const TREATY_COUNTRY_MD = 'MD';
    const TREATY_COUNTRY_MN = 'MN';
    const TREATY_COUNTRY_MG = 'MG';
    const TREATY_COUNTRY_MJ = 'MJ';
    const TREATY_COUNTRY_MH = 'MH';
    const TREATY_COUNTRY_MO = 'MO';
    const TREATY_COUNTRY_MZ = 'MZ';
    const TREATY_COUNTRY_WA = 'WA';
    const TREATY_COUNTRY_NR = 'NR';
    const TREATY_COUNTRY_BQ = 'BQ';
    const TREATY_COUNTRY_NP = 'NP';
    const TREATY_COUNTRY_NL = 'NL';
    const TREATY_COUNTRY_NC = 'NC';
    const TREATY_COUNTRY_NZ = 'NZ';
    const TREATY_COUNTRY_NU = 'NU';
    const TREATY_COUNTRY_NG = 'NG';
    const TREATY_COUNTRY_NI = 'NI';
    const TREATY_COUNTRY_NE = 'NE';
    const TREATY_COUNTRY_NF = 'NF';
    const TREATY_COUNTRY_CQ = 'CQ';
    const TREATY_COUNTRY_NO = 'NO';
    const TREATY_COUNTRY_MU = 'MU';
    const TREATY_COUNTRY_OC = 'OC';
    const TREATY_COUNTRY_PK = 'PK';
    const TREATY_COUNTRY_PS = 'PS';
    const TREATY_COUNTRY_LQ = 'LQ';
    const TREATY_COUNTRY_PM = 'PM';
    const TREATY_COUNTRY_PP = 'PP';
    const TREATY_COUNTRY_PF = 'PF';
    const TREATY_COUNTRY_PA = 'PA';
    const TREATY_COUNTRY_PE = 'PE';
    const TREATY_COUNTRY_RP = 'RP';
    const TREATY_COUNTRY_PC = 'PC';
    const TREATY_COUNTRY_PL = 'PL';
    const TREATY_COUNTRY_PO = 'PO';
    const TREATY_COUNTRY_RQ = 'RQ';
    const TREATY_COUNTRY_QA = 'QA';
    const TREATY_COUNTRY_RO = 'RO';
    const TREATY_COUNTRY_RS = 'RS';
    const TREATY_COUNTRY_RW = 'RW';
    const TREATY_COUNTRY_TB = 'TB';
    const TREATY_COUNTRY_RN = 'RN';
    const TREATY_COUNTRY_WS = 'WS';
    const TREATY_COUNTRY_SM = 'SM';
    const TREATY_COUNTRY_TP = 'TP';
    const TREATY_COUNTRY_SA = 'SA';
    const TREATY_COUNTRY_SG = 'SG';
    const TREATY_COUNTRY_RI = 'RI';
    const TREATY_COUNTRY_SE = 'SE';
    const TREATY_COUNTRY_SL = 'SL';
    const TREATY_COUNTRY_SN = 'SN';
    const TREATY_COUNTRY_NN = 'NN';
    const TREATY_COUNTRY_LO = 'LO';
    const TREATY_COUNTRY_SI = 'SI';
    const TREATY_COUNTRY_BP = 'BP';
    const TREATY_COUNTRY_SO = 'SO';
    const TREATY_COUNTRY_SF = 'SF';
    const TREATY_COUNTRY_SX = 'SX';
    const TREATY_COUNTRY_SP = 'SP';
    const TREATY_COUNTRY_PG = 'PG';
    const TREATY_COUNTRY_CE = 'CE';
    const TREATY_COUNTRY_SH = 'SH';
    const TREATY_COUNTRY_SC = 'SC';
    const TREATY_COUNTRY_ST = 'ST';
    const TREATY_COUNTRY_SB = 'SB';
    const TREATY_COUNTRY_VC = 'VC';
    const TREATY_COUNTRY_SU = 'SU';
    const TREATY_COUNTRY_NS = 'NS';
    const TREATY_COUNTRY_SV = 'SV';
    const TREATY_COUNTRY_WZ = 'WZ';
    const TREATY_COUNTRY_SW = 'SW';
    const TREATY_COUNTRY_SZ = 'SZ';
    const TREATY_COUNTRY_SY = 'SY';
    const TREATY_COUNTRY_TW = 'TW';
    const TREATY_COUNTRY_TI = 'TI';
    const TREATY_COUNTRY_TZ = 'TZ';
    const TREATY_COUNTRY_TH = 'TH';
    const TREATY_COUNTRY_TO = 'TO';
    const TREATY_COUNTRY_TL = 'TL';
    const TREATY_COUNTRY_TN = 'TN';
    const TREATY_COUNTRY_TD = 'TD';
    const TREATY_COUNTRY_TS = 'TS';
    const TREATY_COUNTRY_TU = 'TU';
    const TREATY_COUNTRY_TX = 'TX';
    const TREATY_COUNTRY_TK = 'TK';
    const TREATY_COUNTRY_TV = 'TV';
    const TREATY_COUNTRY_UG = 'UG';
    const TREATY_COUNTRY_UP = 'UP';
    const TREATY_COUNTRY_AE = 'AE';
    const TREATY_COUNTRY_UK = 'UK';
    const TREATY_COUNTRY_UY = 'UY';
    const TREATY_COUNTRY_UZ = 'UZ';
    const TREATY_COUNTRY_NH = 'NH';
    const TREATY_COUNTRY_VE = 'VE';
    const TREATY_COUNTRY_VM = 'VM';
    const TREATY_COUNTRY_VQ = 'VQ';
    const TREATY_COUNTRY_WQ = 'WQ';
    const TREATY_COUNTRY_WF = 'WF';
    const TREATY_COUNTRY_WI = 'WI';
    const TREATY_COUNTRY_YM = 'YM';
    const TREATY_COUNTRY_ZA = 'ZA';
    const TREATY_COUNTRY_ZI = 'ZI';
    const BENEFIT_LIMITATION_GOVERNMENT = 'Government';
    const BENEFIT_LIMITATION_TAX_EXEMPT_PENSION_TRUST_OR_PENSION_FUND = 'TaxExemptPensionTrustOrPensionFund';
    const BENEFIT_LIMITATION_OTHER_TAX_EXEMPT_ORGANIZATION = 'OtherTaxExemptOrganization';
    const BENEFIT_LIMITATION_PUBLICLY_TRADED_CORPORATION = 'PubliclyTradedCorporation';
    const BENEFIT_LIMITATION_SUBSIDIARY_OF_PUBLICLY_TRADED_CORPORATION = 'SubsidiaryOfPubliclyTradedCorporation';
    const BENEFIT_LIMITATION_COMPANY_THAT_MEETS_OWNERSHIP_AND_BASE_EROSION_TEST = 'CompanyThatMeetsOwnershipAndBaseErosionTest';
    const BENEFIT_LIMITATION_COMPANY_THAT_MEETS_DERIVATIVE_BENEFITS_TEST = 'CompanyThatMeetsDerivativeBenefitsTest';
    const BENEFIT_LIMITATION_COMPANY_WITH_ITEM_OF_INCOME_THAT_MEETS_ACTIVE_TRADE_OR_BUSINESS_TEST = 'CompanyWithItemOfIncomeThatMeetsActiveTradeOrBusinessTest';
    const BENEFIT_LIMITATION_FAVORABLE_DISCRETIONARY_DETERMINATION_BY_US_COMPETENT_AUTHORITY_RECEIVED = 'FavorableDiscretionaryDeterminationByUSCompetentAuthorityReceived';
    const BENEFIT_LIMITATION_OTHER = 'Other';
    const BENEFIT_LIMITATION_NO_LOB_ARTICLE_IN_TREATY = 'NoLOBArticleInTreaty';
    const WITHHOLDING_RATE__0 = '0';
    const WITHHOLDING_RATE__0_0 = '0.0';
    const WITHHOLDING_RATE__0_00 = '0.00';
    const WITHHOLDING_RATE__5 = '5';
    const WITHHOLDING_RATE__5_5 = '5.5';
    const WITHHOLDING_RATE__10 = '10';
    const WITHHOLDING_RATE__12_50 = '12.50';
    const WITHHOLDING_RATE__15 = '15';
    const WITHHOLDING_RATE__20 = '20';
    const WITHHOLDING_RATE__25 = '25';
    const WITHHOLDING_RATE__30 = '30';
    const MARITAL_STATUS_SINGLE = 'Single';
    const MARITAL_STATUS_MARRIED = 'Married';
    const MARITAL_STATUS_MARRIED_BUT = 'MarriedBut';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_W4,
            self::TYPE_W8_BEN,
            self::TYPE_W8_BEN_E,
            self::TYPE_W8_IMY,
            self::TYPE_W9,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBusinessClassificationAllowableValues()
    {
        return [
            self::BUSINESS_CLASSIFICATION_INDIVIDUAL,
            self::BUSINESS_CLASSIFICATION_C_CORPORATION,
            self::BUSINESS_CLASSIFICATION_S_CORPORATION,
            self::BUSINESS_CLASSIFICATION_PARTNERSHIP,
            self::BUSINESS_CLASSIFICATION_TRUST_ESTATE,
            self::BUSINESS_CLASSIFICATION_LLC_C,
            self::BUSINESS_CLASSIFICATION_LLC_S,
            self::BUSINESS_CLASSIFICATION_LLC_P,
            self::BUSINESS_CLASSIFICATION_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_AA,
            self::STATE_AE,
            self::STATE_AK,
            self::STATE_AL,
            self::STATE_AP,
            self::STATE_AR,
            self::STATE__AS,
            self::STATE_AZ,
            self::STATE_CA,
            self::STATE_CO,
            self::STATE_CT,
            self::STATE_DC,
            self::STATE_DE,
            self::STATE_FL,
            self::STATE_FM,
            self::STATE_GA,
            self::STATE_GU,
            self::STATE_HI,
            self::STATE_IA,
            self::STATE_ID,
            self::STATE_IL,
            self::STATE_IN,
            self::STATE_KS,
            self::STATE_KY,
            self::STATE_LA,
            self::STATE_MA,
            self::STATE_MD,
            self::STATE_ME,
            self::STATE_MH,
            self::STATE_MI,
            self::STATE_MN,
            self::STATE_MO,
            self::STATE_MP,
            self::STATE_MS,
            self::STATE_MT,
            self::STATE_NC,
            self::STATE_ND,
            self::STATE_NE,
            self::STATE_NH,
            self::STATE_NJ,
            self::STATE_NM,
            self::STATE_NV,
            self::STATE_NY,
            self::STATE_OH,
            self::STATE_OK,
            self::STATE__OR,
            self::STATE_PA,
            self::STATE_PR,
            self::STATE_PW,
            self::STATE_RI,
            self::STATE_SC,
            self::STATE_SD,
            self::STATE_TN,
            self::STATE_TX,
            self::STATE_UT,
            self::STATE_VA,
            self::STATE_VI,
            self::STATE_VT,
            self::STATE_WA,
            self::STATE_WI,
            self::STATE_WV,
            self::STATE_WY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCitizenshipCountryAllowableValues()
    {
        return [
            self::CITIZENSHIP_COUNTRY_US,
            self::CITIZENSHIP_COUNTRY_AF,
            self::CITIZENSHIP_COUNTRY_AX,
            self::CITIZENSHIP_COUNTRY_AL,
            self::CITIZENSHIP_COUNTRY_AG,
            self::CITIZENSHIP_COUNTRY_AQ,
            self::CITIZENSHIP_COUNTRY_AN,
            self::CITIZENSHIP_COUNTRY_AO,
            self::CITIZENSHIP_COUNTRY_AV,
            self::CITIZENSHIP_COUNTRY_AY,
            self::CITIZENSHIP_COUNTRY_AC,
            self::CITIZENSHIP_COUNTRY_AR,
            self::CITIZENSHIP_COUNTRY_AM,
            self::CITIZENSHIP_COUNTRY_AA,
            self::CITIZENSHIP_COUNTRY_AT,
            self::CITIZENSHIP_COUNTRY__AS,
            self::CITIZENSHIP_COUNTRY_AU,
            self::CITIZENSHIP_COUNTRY_AJ,
            self::CITIZENSHIP_COUNTRY_BF,
            self::CITIZENSHIP_COUNTRY_BA,
            self::CITIZENSHIP_COUNTRY_FQ,
            self::CITIZENSHIP_COUNTRY_BG,
            self::CITIZENSHIP_COUNTRY_BB,
            self::CITIZENSHIP_COUNTRY_BO,
            self::CITIZENSHIP_COUNTRY_BE,
            self::CITIZENSHIP_COUNTRY_BH,
            self::CITIZENSHIP_COUNTRY_BN,
            self::CITIZENSHIP_COUNTRY_BD,
            self::CITIZENSHIP_COUNTRY_BT,
            self::CITIZENSHIP_COUNTRY_BL,
            self::CITIZENSHIP_COUNTRY_BK,
            self::CITIZENSHIP_COUNTRY_BC,
            self::CITIZENSHIP_COUNTRY_BV,
            self::CITIZENSHIP_COUNTRY_BR,
            self::CITIZENSHIP_COUNTRY_IO,
            self::CITIZENSHIP_COUNTRY_VI,
            self::CITIZENSHIP_COUNTRY_BX,
            self::CITIZENSHIP_COUNTRY_BU,
            self::CITIZENSHIP_COUNTRY_UV,
            self::CITIZENSHIP_COUNTRY_BM,
            self::CITIZENSHIP_COUNTRY_BY,
            self::CITIZENSHIP_COUNTRY_CB,
            self::CITIZENSHIP_COUNTRY_CM,
            self::CITIZENSHIP_COUNTRY_CA,
            self::CITIZENSHIP_COUNTRY_CV,
            self::CITIZENSHIP_COUNTRY_CJ,
            self::CITIZENSHIP_COUNTRY_CT,
            self::CITIZENSHIP_COUNTRY_CD,
            self::CITIZENSHIP_COUNTRY_CI,
            self::CITIZENSHIP_COUNTRY_CH,
            self::CITIZENSHIP_COUNTRY_KT,
            self::CITIZENSHIP_COUNTRY_IP,
            self::CITIZENSHIP_COUNTRY_CK,
            self::CITIZENSHIP_COUNTRY_CO,
            self::CITIZENSHIP_COUNTRY_CN,
            self::CITIZENSHIP_COUNTRY_CF,
            self::CITIZENSHIP_COUNTRY_CG,
            self::CITIZENSHIP_COUNTRY_CW,
            self::CITIZENSHIP_COUNTRY_CR,
            self::CITIZENSHIP_COUNTRY_CS,
            self::CITIZENSHIP_COUNTRY_IV,
            self::CITIZENSHIP_COUNTRY_HR,
            self::CITIZENSHIP_COUNTRY_CU,
            self::CITIZENSHIP_COUNTRY_UC,
            self::CITIZENSHIP_COUNTRY_CY,
            self::CITIZENSHIP_COUNTRY_EZ,
            self::CITIZENSHIP_COUNTRY_DA,
            self::CITIZENSHIP_COUNTRY_DX,
            self::CITIZENSHIP_COUNTRY_DJ,
            self::CITIZENSHIP_COUNTRY__DO,
            self::CITIZENSHIP_COUNTRY_DR,
            self::CITIZENSHIP_COUNTRY_TT,
            self::CITIZENSHIP_COUNTRY_EC,
            self::CITIZENSHIP_COUNTRY_EG,
            self::CITIZENSHIP_COUNTRY_ES,
            self::CITIZENSHIP_COUNTRY_EK,
            self::CITIZENSHIP_COUNTRY_ER,
            self::CITIZENSHIP_COUNTRY_EN,
            self::CITIZENSHIP_COUNTRY_ET,
            self::CITIZENSHIP_COUNTRY_FK,
            self::CITIZENSHIP_COUNTRY_FO,
            self::CITIZENSHIP_COUNTRY_FM,
            self::CITIZENSHIP_COUNTRY_FJ,
            self::CITIZENSHIP_COUNTRY_FI,
            self::CITIZENSHIP_COUNTRY_FR,
            self::CITIZENSHIP_COUNTRY_FP,
            self::CITIZENSHIP_COUNTRY_FS,
            self::CITIZENSHIP_COUNTRY_GB,
            self::CITIZENSHIP_COUNTRY_GA,
            self::CITIZENSHIP_COUNTRY_GG,
            self::CITIZENSHIP_COUNTRY_GM,
            self::CITIZENSHIP_COUNTRY_GH,
            self::CITIZENSHIP_COUNTRY_GI,
            self::CITIZENSHIP_COUNTRY_GR,
            self::CITIZENSHIP_COUNTRY_GL,
            self::CITIZENSHIP_COUNTRY_GJ,
            self::CITIZENSHIP_COUNTRY_GQ,
            self::CITIZENSHIP_COUNTRY_GT,
            self::CITIZENSHIP_COUNTRY_GK,
            self::CITIZENSHIP_COUNTRY_GV,
            self::CITIZENSHIP_COUNTRY_PU,
            self::CITIZENSHIP_COUNTRY_GY,
            self::CITIZENSHIP_COUNTRY_HA,
            self::CITIZENSHIP_COUNTRY_HM,
            self::CITIZENSHIP_COUNTRY_VT,
            self::CITIZENSHIP_COUNTRY_HO,
            self::CITIZENSHIP_COUNTRY_HK,
            self::CITIZENSHIP_COUNTRY_HQ,
            self::CITIZENSHIP_COUNTRY_HU,
            self::CITIZENSHIP_COUNTRY_IC,
            self::CITIZENSHIP_COUNTRY_IN,
            self::CITIZENSHIP_COUNTRY_ID,
            self::CITIZENSHIP_COUNTRY_IR,
            self::CITIZENSHIP_COUNTRY_IZ,
            self::CITIZENSHIP_COUNTRY_EI,
            self::CITIZENSHIP_COUNTRY_IS,
            self::CITIZENSHIP_COUNTRY_IT,
            self::CITIZENSHIP_COUNTRY_JM,
            self::CITIZENSHIP_COUNTRY_JN,
            self::CITIZENSHIP_COUNTRY_JA,
            self::CITIZENSHIP_COUNTRY_DQ,
            self::CITIZENSHIP_COUNTRY_JE,
            self::CITIZENSHIP_COUNTRY_JQ,
            self::CITIZENSHIP_COUNTRY_JO,
            self::CITIZENSHIP_COUNTRY_KZ,
            self::CITIZENSHIP_COUNTRY_KE,
            self::CITIZENSHIP_COUNTRY_KQ,
            self::CITIZENSHIP_COUNTRY_KR,
            self::CITIZENSHIP_COUNTRY_KN,
            self::CITIZENSHIP_COUNTRY_KS,
            self::CITIZENSHIP_COUNTRY_KV,
            self::CITIZENSHIP_COUNTRY_KU,
            self::CITIZENSHIP_COUNTRY_KG,
            self::CITIZENSHIP_COUNTRY_LA,
            self::CITIZENSHIP_COUNTRY_LG,
            self::CITIZENSHIP_COUNTRY_LE,
            self::CITIZENSHIP_COUNTRY_LT,
            self::CITIZENSHIP_COUNTRY_LI,
            self::CITIZENSHIP_COUNTRY_LY,
            self::CITIZENSHIP_COUNTRY_LS,
            self::CITIZENSHIP_COUNTRY_LH,
            self::CITIZENSHIP_COUNTRY_LU,
            self::CITIZENSHIP_COUNTRY_MC,
            self::CITIZENSHIP_COUNTRY_MK,
            self::CITIZENSHIP_COUNTRY_MA,
            self::CITIZENSHIP_COUNTRY_MI,
            self::CITIZENSHIP_COUNTRY_MY,
            self::CITIZENSHIP_COUNTRY_MV,
            self::CITIZENSHIP_COUNTRY_ML,
            self::CITIZENSHIP_COUNTRY_MT,
            self::CITIZENSHIP_COUNTRY_IM,
            self::CITIZENSHIP_COUNTRY_RM,
            self::CITIZENSHIP_COUNTRY_MR,
            self::CITIZENSHIP_COUNTRY_MP,
            self::CITIZENSHIP_COUNTRY_MX,
            self::CITIZENSHIP_COUNTRY_MQ,
            self::CITIZENSHIP_COUNTRY_MD,
            self::CITIZENSHIP_COUNTRY_MN,
            self::CITIZENSHIP_COUNTRY_MG,
            self::CITIZENSHIP_COUNTRY_MJ,
            self::CITIZENSHIP_COUNTRY_MH,
            self::CITIZENSHIP_COUNTRY_MO,
            self::CITIZENSHIP_COUNTRY_MZ,
            self::CITIZENSHIP_COUNTRY_WA,
            self::CITIZENSHIP_COUNTRY_NR,
            self::CITIZENSHIP_COUNTRY_BQ,
            self::CITIZENSHIP_COUNTRY_NP,
            self::CITIZENSHIP_COUNTRY_NL,
            self::CITIZENSHIP_COUNTRY_NC,
            self::CITIZENSHIP_COUNTRY_NZ,
            self::CITIZENSHIP_COUNTRY_NU,
            self::CITIZENSHIP_COUNTRY_NG,
            self::CITIZENSHIP_COUNTRY_NI,
            self::CITIZENSHIP_COUNTRY_NE,
            self::CITIZENSHIP_COUNTRY_NF,
            self::CITIZENSHIP_COUNTRY_CQ,
            self::CITIZENSHIP_COUNTRY_NO,
            self::CITIZENSHIP_COUNTRY_MU,
            self::CITIZENSHIP_COUNTRY_OC,
            self::CITIZENSHIP_COUNTRY_PK,
            self::CITIZENSHIP_COUNTRY_PS,
            self::CITIZENSHIP_COUNTRY_LQ,
            self::CITIZENSHIP_COUNTRY_PM,
            self::CITIZENSHIP_COUNTRY_PP,
            self::CITIZENSHIP_COUNTRY_PF,
            self::CITIZENSHIP_COUNTRY_PA,
            self::CITIZENSHIP_COUNTRY_PE,
            self::CITIZENSHIP_COUNTRY_RP,
            self::CITIZENSHIP_COUNTRY_PC,
            self::CITIZENSHIP_COUNTRY_PL,
            self::CITIZENSHIP_COUNTRY_PO,
            self::CITIZENSHIP_COUNTRY_RQ,
            self::CITIZENSHIP_COUNTRY_QA,
            self::CITIZENSHIP_COUNTRY_RO,
            self::CITIZENSHIP_COUNTRY_RS,
            self::CITIZENSHIP_COUNTRY_RW,
            self::CITIZENSHIP_COUNTRY_TB,
            self::CITIZENSHIP_COUNTRY_RN,
            self::CITIZENSHIP_COUNTRY_WS,
            self::CITIZENSHIP_COUNTRY_SM,
            self::CITIZENSHIP_COUNTRY_TP,
            self::CITIZENSHIP_COUNTRY_SA,
            self::CITIZENSHIP_COUNTRY_SG,
            self::CITIZENSHIP_COUNTRY_RI,
            self::CITIZENSHIP_COUNTRY_SE,
            self::CITIZENSHIP_COUNTRY_SL,
            self::CITIZENSHIP_COUNTRY_SN,
            self::CITIZENSHIP_COUNTRY_NN,
            self::CITIZENSHIP_COUNTRY_LO,
            self::CITIZENSHIP_COUNTRY_SI,
            self::CITIZENSHIP_COUNTRY_BP,
            self::CITIZENSHIP_COUNTRY_SO,
            self::CITIZENSHIP_COUNTRY_SF,
            self::CITIZENSHIP_COUNTRY_SX,
            self::CITIZENSHIP_COUNTRY_SP,
            self::CITIZENSHIP_COUNTRY_PG,
            self::CITIZENSHIP_COUNTRY_CE,
            self::CITIZENSHIP_COUNTRY_SH,
            self::CITIZENSHIP_COUNTRY_SC,
            self::CITIZENSHIP_COUNTRY_ST,
            self::CITIZENSHIP_COUNTRY_SB,
            self::CITIZENSHIP_COUNTRY_VC,
            self::CITIZENSHIP_COUNTRY_SU,
            self::CITIZENSHIP_COUNTRY_NS,
            self::CITIZENSHIP_COUNTRY_SV,
            self::CITIZENSHIP_COUNTRY_WZ,
            self::CITIZENSHIP_COUNTRY_SW,
            self::CITIZENSHIP_COUNTRY_SZ,
            self::CITIZENSHIP_COUNTRY_SY,
            self::CITIZENSHIP_COUNTRY_TW,
            self::CITIZENSHIP_COUNTRY_TI,
            self::CITIZENSHIP_COUNTRY_TZ,
            self::CITIZENSHIP_COUNTRY_TH,
            self::CITIZENSHIP_COUNTRY_TO,
            self::CITIZENSHIP_COUNTRY_TL,
            self::CITIZENSHIP_COUNTRY_TN,
            self::CITIZENSHIP_COUNTRY_TD,
            self::CITIZENSHIP_COUNTRY_TS,
            self::CITIZENSHIP_COUNTRY_TU,
            self::CITIZENSHIP_COUNTRY_TX,
            self::CITIZENSHIP_COUNTRY_TK,
            self::CITIZENSHIP_COUNTRY_TV,
            self::CITIZENSHIP_COUNTRY_UG,
            self::CITIZENSHIP_COUNTRY_UP,
            self::CITIZENSHIP_COUNTRY_AE,
            self::CITIZENSHIP_COUNTRY_UK,
            self::CITIZENSHIP_COUNTRY_UY,
            self::CITIZENSHIP_COUNTRY_UZ,
            self::CITIZENSHIP_COUNTRY_NH,
            self::CITIZENSHIP_COUNTRY_VE,
            self::CITIZENSHIP_COUNTRY_VM,
            self::CITIZENSHIP_COUNTRY_VQ,
            self::CITIZENSHIP_COUNTRY_WQ,
            self::CITIZENSHIP_COUNTRY_WF,
            self::CITIZENSHIP_COUNTRY_WI,
            self::CITIZENSHIP_COUNTRY_YM,
            self::CITIZENSHIP_COUNTRY_ZA,
            self::CITIZENSHIP_COUNTRY_ZI,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntityTypeAllowableValues()
    {
        return [
            self::ENTITY_TYPE_CORPORATION,
            self::ENTITY_TYPE_DISREGARDED_ENTITY,
            self::ENTITY_TYPE_PARTNERSHIP,
            self::ENTITY_TYPE_SIMPLE_TRUST,
            self::ENTITY_TYPE_GRANTOR_TRUST,
            self::ENTITY_TYPE_COMPLEX_TRUST,
            self::ENTITY_TYPE_ESTATE,
            self::ENTITY_TYPE_FOREIGN_GOVERNMENT_CONTROLLED_ENTITY,
            self::ENTITY_TYPE_CENTRAL_BANK_OF_ISSUE,
            self::ENTITY_TYPE_TAX_EXEMPT_ORGANIZATION,
            self::ENTITY_TYPE_PRIVATE_FOUNDATION,
            self::ENTITY_TYPE_INTERNATIONAL_ORGANIZATION,
            self::ENTITY_TYPE_FOREIGN_GOVERNMENT_CONTROLLED_INTEGRAL_PART,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFatcaStatusAllowableValues()
    {
        return [
            self::FATCA_STATUS_NONPARTICIPATING_FFI,
            self::FATCA_STATUS_PARTICIPATING_FFI,
            self::FATCA_STATUS_REPORTING_MODEL1_FFI,
            self::FATCA_STATUS_REPORTING_MODEL2_FFI,
            self::FATCA_STATUS_REGISTERED_DEEMED_COMPLIANT_FFI,
            self::FATCA_STATUS_SPONSORED_FFI_WITHOUT_GIIN,
            self::FATCA_STATUS_CERTIFIED_DEEMED_COMPLIANT_NONREGISTERING_LOCAL_BANK,
            self::FATCA_STATUS_CERTIFIED_DEEMED_COMPLIANT_FFI_WITH_LOW_VALUE_ACCOUNTS,
            self::FATCA_STATUS_CERTIFIED_DEEMED_COMPLIANT_SPONSORED_CLOSELY_HELD_INVESTMENT_VEHICLE,
            self::FATCA_STATUS_CERTIFIED_DEEMED_COMPLIANT_LIMITED_LIFE_DEBT_INVESTMENT_ENTITY,
            self::FATCA_STATUS_CERTAIN_INVESTMENT_ENTITIES_WITHOUT_FINANCIAL_ACCOUNTS,
            self::FATCA_STATUS_OWNER_DOCUMENTED_FFI,
            self::FATCA_STATUS_RESTRICTED_DISTRIBUTOR,
            self::FATCA_STATUS_NONREPORTING_IGAFFI,
            self::FATCA_STATUS_FOREIGN_GOVERNMENT_OR_US_POSSESSION_OR_FOREIGN_CENTRAL_BANK,
            self::FATCA_STATUS_INTERNATIONAL_ORGANIZATION,
            self::FATCA_STATUS_EXEMPT_RETIREMENT_PLANS,
            self::FATCA_STATUS_ENTITY_WHOLLY_OWNED_BY_EXEMPT_BENEFICIAL_OWNERS,
            self::FATCA_STATUS_TERRITORY_FINANCIAL_INSTITUTION,
            self::FATCA_STATUS_NONFINANCIAL_GROUP_ENTITY,
            self::FATCA_STATUS_EXCEPTED_NONFINANCIAL_START_UP_COMPANY,
            self::FATCA_STATUS_EXCEPTED_NONFINANCIAL_ENTITY_IN_LIQUIDATION_OR_BANKRUPTCY,
            self::FATCA_STATUS_ORGANIZATION501C,
            self::FATCA_STATUS_NONPROFIT_ORGANIZATION,
            self::FATCA_STATUS_PUBLICLY_TRADED_NFFEOR_AFFILIATE_OF_PUBLICLY_TRADED_CORPORATION,
            self::FATCA_STATUS_EXCEPTED_TERRITORY_NFFE,
            self::FATCA_STATUS_ACTIVE_NFFE,
            self::FATCA_STATUS_PASSIVE_NFFE,
            self::FATCA_STATUS_EXCEPTED_INTER_AFFILIATE_FFI,
            self::FATCA_STATUS_DIRECT_REPORTING_NFFE,
            self::FATCA_STATUS_SPONSORED_DIRECT_REPORTING_NFFE,
            self::FATCA_STATUS_ACCOUNT_THAT_IS_NOT_FINANCIAL_ACCOUNT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResidenceStateAllowableValues()
    {
        return [
            self::RESIDENCE_STATE_AA,
            self::RESIDENCE_STATE_AE,
            self::RESIDENCE_STATE_AK,
            self::RESIDENCE_STATE_AL,
            self::RESIDENCE_STATE_AP,
            self::RESIDENCE_STATE_AR,
            self::RESIDENCE_STATE__AS,
            self::RESIDENCE_STATE_AZ,
            self::RESIDENCE_STATE_CA,
            self::RESIDENCE_STATE_CO,
            self::RESIDENCE_STATE_CT,
            self::RESIDENCE_STATE_DC,
            self::RESIDENCE_STATE_DE,
            self::RESIDENCE_STATE_FL,
            self::RESIDENCE_STATE_FM,
            self::RESIDENCE_STATE_GA,
            self::RESIDENCE_STATE_GU,
            self::RESIDENCE_STATE_HI,
            self::RESIDENCE_STATE_IA,
            self::RESIDENCE_STATE_ID,
            self::RESIDENCE_STATE_IL,
            self::RESIDENCE_STATE_IN,
            self::RESIDENCE_STATE_KS,
            self::RESIDENCE_STATE_KY,
            self::RESIDENCE_STATE_LA,
            self::RESIDENCE_STATE_MA,
            self::RESIDENCE_STATE_MD,
            self::RESIDENCE_STATE_ME,
            self::RESIDENCE_STATE_MH,
            self::RESIDENCE_STATE_MI,
            self::RESIDENCE_STATE_MN,
            self::RESIDENCE_STATE_MO,
            self::RESIDENCE_STATE_MP,
            self::RESIDENCE_STATE_MS,
            self::RESIDENCE_STATE_MT,
            self::RESIDENCE_STATE_NC,
            self::RESIDENCE_STATE_ND,
            self::RESIDENCE_STATE_NE,
            self::RESIDENCE_STATE_NH,
            self::RESIDENCE_STATE_NJ,
            self::RESIDENCE_STATE_NM,
            self::RESIDENCE_STATE_NV,
            self::RESIDENCE_STATE_NY,
            self::RESIDENCE_STATE_OH,
            self::RESIDENCE_STATE_OK,
            self::RESIDENCE_STATE__OR,
            self::RESIDENCE_STATE_PA,
            self::RESIDENCE_STATE_PR,
            self::RESIDENCE_STATE_PW,
            self::RESIDENCE_STATE_RI,
            self::RESIDENCE_STATE_SC,
            self::RESIDENCE_STATE_SD,
            self::RESIDENCE_STATE_TN,
            self::RESIDENCE_STATE_TX,
            self::RESIDENCE_STATE_UT,
            self::RESIDENCE_STATE_VA,
            self::RESIDENCE_STATE_VI,
            self::RESIDENCE_STATE_VT,
            self::RESIDENCE_STATE_WA,
            self::RESIDENCE_STATE_WI,
            self::RESIDENCE_STATE_WV,
            self::RESIDENCE_STATE_WY,
            self::RESIDENCE_STATE_AB,
            self::RESIDENCE_STATE_BC,
            self::RESIDENCE_STATE_MB,
            self::RESIDENCE_STATE_NB,
            self::RESIDENCE_STATE_NL,
            self::RESIDENCE_STATE_NS,
            self::RESIDENCE_STATE_NT,
            self::RESIDENCE_STATE_NU,
            self::RESIDENCE_STATE_ON,
            self::RESIDENCE_STATE_PE,
            self::RESIDENCE_STATE_QC,
            self::RESIDENCE_STATE_SK,
            self::RESIDENCE_STATE_YT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResidenceCountryAllowableValues()
    {
        return [
            self::RESIDENCE_COUNTRY_US,
            self::RESIDENCE_COUNTRY_AF,
            self::RESIDENCE_COUNTRY_AX,
            self::RESIDENCE_COUNTRY_AL,
            self::RESIDENCE_COUNTRY_AG,
            self::RESIDENCE_COUNTRY_AQ,
            self::RESIDENCE_COUNTRY_AN,
            self::RESIDENCE_COUNTRY_AO,
            self::RESIDENCE_COUNTRY_AV,
            self::RESIDENCE_COUNTRY_AY,
            self::RESIDENCE_COUNTRY_AC,
            self::RESIDENCE_COUNTRY_AR,
            self::RESIDENCE_COUNTRY_AM,
            self::RESIDENCE_COUNTRY_AA,
            self::RESIDENCE_COUNTRY_AT,
            self::RESIDENCE_COUNTRY__AS,
            self::RESIDENCE_COUNTRY_AU,
            self::RESIDENCE_COUNTRY_AJ,
            self::RESIDENCE_COUNTRY_BF,
            self::RESIDENCE_COUNTRY_BA,
            self::RESIDENCE_COUNTRY_FQ,
            self::RESIDENCE_COUNTRY_BG,
            self::RESIDENCE_COUNTRY_BB,
            self::RESIDENCE_COUNTRY_BO,
            self::RESIDENCE_COUNTRY_BE,
            self::RESIDENCE_COUNTRY_BH,
            self::RESIDENCE_COUNTRY_BN,
            self::RESIDENCE_COUNTRY_BD,
            self::RESIDENCE_COUNTRY_BT,
            self::RESIDENCE_COUNTRY_BL,
            self::RESIDENCE_COUNTRY_BK,
            self::RESIDENCE_COUNTRY_BC,
            self::RESIDENCE_COUNTRY_BV,
            self::RESIDENCE_COUNTRY_BR,
            self::RESIDENCE_COUNTRY_IO,
            self::RESIDENCE_COUNTRY_VI,
            self::RESIDENCE_COUNTRY_BX,
            self::RESIDENCE_COUNTRY_BU,
            self::RESIDENCE_COUNTRY_UV,
            self::RESIDENCE_COUNTRY_BM,
            self::RESIDENCE_COUNTRY_BY,
            self::RESIDENCE_COUNTRY_CB,
            self::RESIDENCE_COUNTRY_CM,
            self::RESIDENCE_COUNTRY_CA,
            self::RESIDENCE_COUNTRY_CV,
            self::RESIDENCE_COUNTRY_CJ,
            self::RESIDENCE_COUNTRY_CT,
            self::RESIDENCE_COUNTRY_CD,
            self::RESIDENCE_COUNTRY_CI,
            self::RESIDENCE_COUNTRY_CH,
            self::RESIDENCE_COUNTRY_KT,
            self::RESIDENCE_COUNTRY_IP,
            self::RESIDENCE_COUNTRY_CK,
            self::RESIDENCE_COUNTRY_CO,
            self::RESIDENCE_COUNTRY_CN,
            self::RESIDENCE_COUNTRY_CF,
            self::RESIDENCE_COUNTRY_CG,
            self::RESIDENCE_COUNTRY_CW,
            self::RESIDENCE_COUNTRY_CR,
            self::RESIDENCE_COUNTRY_CS,
            self::RESIDENCE_COUNTRY_IV,
            self::RESIDENCE_COUNTRY_HR,
            self::RESIDENCE_COUNTRY_CU,
            self::RESIDENCE_COUNTRY_UC,
            self::RESIDENCE_COUNTRY_CY,
            self::RESIDENCE_COUNTRY_EZ,
            self::RESIDENCE_COUNTRY_DA,
            self::RESIDENCE_COUNTRY_DX,
            self::RESIDENCE_COUNTRY_DJ,
            self::RESIDENCE_COUNTRY__DO,
            self::RESIDENCE_COUNTRY_DR,
            self::RESIDENCE_COUNTRY_TT,
            self::RESIDENCE_COUNTRY_EC,
            self::RESIDENCE_COUNTRY_EG,
            self::RESIDENCE_COUNTRY_ES,
            self::RESIDENCE_COUNTRY_EK,
            self::RESIDENCE_COUNTRY_ER,
            self::RESIDENCE_COUNTRY_EN,
            self::RESIDENCE_COUNTRY_ET,
            self::RESIDENCE_COUNTRY_FK,
            self::RESIDENCE_COUNTRY_FO,
            self::RESIDENCE_COUNTRY_FM,
            self::RESIDENCE_COUNTRY_FJ,
            self::RESIDENCE_COUNTRY_FI,
            self::RESIDENCE_COUNTRY_FR,
            self::RESIDENCE_COUNTRY_FP,
            self::RESIDENCE_COUNTRY_FS,
            self::RESIDENCE_COUNTRY_GB,
            self::RESIDENCE_COUNTRY_GA,
            self::RESIDENCE_COUNTRY_GG,
            self::RESIDENCE_COUNTRY_GM,
            self::RESIDENCE_COUNTRY_GH,
            self::RESIDENCE_COUNTRY_GI,
            self::RESIDENCE_COUNTRY_GR,
            self::RESIDENCE_COUNTRY_GL,
            self::RESIDENCE_COUNTRY_GJ,
            self::RESIDENCE_COUNTRY_GQ,
            self::RESIDENCE_COUNTRY_GT,
            self::RESIDENCE_COUNTRY_GK,
            self::RESIDENCE_COUNTRY_GV,
            self::RESIDENCE_COUNTRY_PU,
            self::RESIDENCE_COUNTRY_GY,
            self::RESIDENCE_COUNTRY_HA,
            self::RESIDENCE_COUNTRY_HM,
            self::RESIDENCE_COUNTRY_VT,
            self::RESIDENCE_COUNTRY_HO,
            self::RESIDENCE_COUNTRY_HK,
            self::RESIDENCE_COUNTRY_HQ,
            self::RESIDENCE_COUNTRY_HU,
            self::RESIDENCE_COUNTRY_IC,
            self::RESIDENCE_COUNTRY_IN,
            self::RESIDENCE_COUNTRY_ID,
            self::RESIDENCE_COUNTRY_IR,
            self::RESIDENCE_COUNTRY_IZ,
            self::RESIDENCE_COUNTRY_EI,
            self::RESIDENCE_COUNTRY_IS,
            self::RESIDENCE_COUNTRY_IT,
            self::RESIDENCE_COUNTRY_JM,
            self::RESIDENCE_COUNTRY_JN,
            self::RESIDENCE_COUNTRY_JA,
            self::RESIDENCE_COUNTRY_DQ,
            self::RESIDENCE_COUNTRY_JE,
            self::RESIDENCE_COUNTRY_JQ,
            self::RESIDENCE_COUNTRY_JO,
            self::RESIDENCE_COUNTRY_KZ,
            self::RESIDENCE_COUNTRY_KE,
            self::RESIDENCE_COUNTRY_KQ,
            self::RESIDENCE_COUNTRY_KR,
            self::RESIDENCE_COUNTRY_KN,
            self::RESIDENCE_COUNTRY_KS,
            self::RESIDENCE_COUNTRY_KV,
            self::RESIDENCE_COUNTRY_KU,
            self::RESIDENCE_COUNTRY_KG,
            self::RESIDENCE_COUNTRY_LA,
            self::RESIDENCE_COUNTRY_LG,
            self::RESIDENCE_COUNTRY_LE,
            self::RESIDENCE_COUNTRY_LT,
            self::RESIDENCE_COUNTRY_LI,
            self::RESIDENCE_COUNTRY_LY,
            self::RESIDENCE_COUNTRY_LS,
            self::RESIDENCE_COUNTRY_LH,
            self::RESIDENCE_COUNTRY_LU,
            self::RESIDENCE_COUNTRY_MC,
            self::RESIDENCE_COUNTRY_MK,
            self::RESIDENCE_COUNTRY_MA,
            self::RESIDENCE_COUNTRY_MI,
            self::RESIDENCE_COUNTRY_MY,
            self::RESIDENCE_COUNTRY_MV,
            self::RESIDENCE_COUNTRY_ML,
            self::RESIDENCE_COUNTRY_MT,
            self::RESIDENCE_COUNTRY_IM,
            self::RESIDENCE_COUNTRY_RM,
            self::RESIDENCE_COUNTRY_MR,
            self::RESIDENCE_COUNTRY_MP,
            self::RESIDENCE_COUNTRY_MX,
            self::RESIDENCE_COUNTRY_MQ,
            self::RESIDENCE_COUNTRY_MD,
            self::RESIDENCE_COUNTRY_MN,
            self::RESIDENCE_COUNTRY_MG,
            self::RESIDENCE_COUNTRY_MJ,
            self::RESIDENCE_COUNTRY_MH,
            self::RESIDENCE_COUNTRY_MO,
            self::RESIDENCE_COUNTRY_MZ,
            self::RESIDENCE_COUNTRY_WA,
            self::RESIDENCE_COUNTRY_NR,
            self::RESIDENCE_COUNTRY_BQ,
            self::RESIDENCE_COUNTRY_NP,
            self::RESIDENCE_COUNTRY_NL,
            self::RESIDENCE_COUNTRY_NC,
            self::RESIDENCE_COUNTRY_NZ,
            self::RESIDENCE_COUNTRY_NU,
            self::RESIDENCE_COUNTRY_NG,
            self::RESIDENCE_COUNTRY_NI,
            self::RESIDENCE_COUNTRY_NE,
            self::RESIDENCE_COUNTRY_NF,
            self::RESIDENCE_COUNTRY_CQ,
            self::RESIDENCE_COUNTRY_NO,
            self::RESIDENCE_COUNTRY_MU,
            self::RESIDENCE_COUNTRY_OC,
            self::RESIDENCE_COUNTRY_PK,
            self::RESIDENCE_COUNTRY_PS,
            self::RESIDENCE_COUNTRY_LQ,
            self::RESIDENCE_COUNTRY_PM,
            self::RESIDENCE_COUNTRY_PP,
            self::RESIDENCE_COUNTRY_PF,
            self::RESIDENCE_COUNTRY_PA,
            self::RESIDENCE_COUNTRY_PE,
            self::RESIDENCE_COUNTRY_RP,
            self::RESIDENCE_COUNTRY_PC,
            self::RESIDENCE_COUNTRY_PL,
            self::RESIDENCE_COUNTRY_PO,
            self::RESIDENCE_COUNTRY_RQ,
            self::RESIDENCE_COUNTRY_QA,
            self::RESIDENCE_COUNTRY_RO,
            self::RESIDENCE_COUNTRY_RS,
            self::RESIDENCE_COUNTRY_RW,
            self::RESIDENCE_COUNTRY_TB,
            self::RESIDENCE_COUNTRY_RN,
            self::RESIDENCE_COUNTRY_WS,
            self::RESIDENCE_COUNTRY_SM,
            self::RESIDENCE_COUNTRY_TP,
            self::RESIDENCE_COUNTRY_SA,
            self::RESIDENCE_COUNTRY_SG,
            self::RESIDENCE_COUNTRY_RI,
            self::RESIDENCE_COUNTRY_SE,
            self::RESIDENCE_COUNTRY_SL,
            self::RESIDENCE_COUNTRY_SN,
            self::RESIDENCE_COUNTRY_NN,
            self::RESIDENCE_COUNTRY_LO,
            self::RESIDENCE_COUNTRY_SI,
            self::RESIDENCE_COUNTRY_BP,
            self::RESIDENCE_COUNTRY_SO,
            self::RESIDENCE_COUNTRY_SF,
            self::RESIDENCE_COUNTRY_SX,
            self::RESIDENCE_COUNTRY_SP,
            self::RESIDENCE_COUNTRY_PG,
            self::RESIDENCE_COUNTRY_CE,
            self::RESIDENCE_COUNTRY_SH,
            self::RESIDENCE_COUNTRY_SC,
            self::RESIDENCE_COUNTRY_ST,
            self::RESIDENCE_COUNTRY_SB,
            self::RESIDENCE_COUNTRY_VC,
            self::RESIDENCE_COUNTRY_SU,
            self::RESIDENCE_COUNTRY_NS,
            self::RESIDENCE_COUNTRY_SV,
            self::RESIDENCE_COUNTRY_WZ,
            self::RESIDENCE_COUNTRY_SW,
            self::RESIDENCE_COUNTRY_SZ,
            self::RESIDENCE_COUNTRY_SY,
            self::RESIDENCE_COUNTRY_TW,
            self::RESIDENCE_COUNTRY_TI,
            self::RESIDENCE_COUNTRY_TZ,
            self::RESIDENCE_COUNTRY_TH,
            self::RESIDENCE_COUNTRY_TO,
            self::RESIDENCE_COUNTRY_TL,
            self::RESIDENCE_COUNTRY_TN,
            self::RESIDENCE_COUNTRY_TD,
            self::RESIDENCE_COUNTRY_TS,
            self::RESIDENCE_COUNTRY_TU,
            self::RESIDENCE_COUNTRY_TX,
            self::RESIDENCE_COUNTRY_TK,
            self::RESIDENCE_COUNTRY_TV,
            self::RESIDENCE_COUNTRY_UG,
            self::RESIDENCE_COUNTRY_UP,
            self::RESIDENCE_COUNTRY_AE,
            self::RESIDENCE_COUNTRY_UK,
            self::RESIDENCE_COUNTRY_UY,
            self::RESIDENCE_COUNTRY_UZ,
            self::RESIDENCE_COUNTRY_NH,
            self::RESIDENCE_COUNTRY_VE,
            self::RESIDENCE_COUNTRY_VM,
            self::RESIDENCE_COUNTRY_VQ,
            self::RESIDENCE_COUNTRY_WQ,
            self::RESIDENCE_COUNTRY_WF,
            self::RESIDENCE_COUNTRY_WI,
            self::RESIDENCE_COUNTRY_YM,
            self::RESIDENCE_COUNTRY_ZA,
            self::RESIDENCE_COUNTRY_ZI,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMailingStateAllowableValues()
    {
        return [
            self::MAILING_STATE_AA,
            self::MAILING_STATE_AE,
            self::MAILING_STATE_AK,
            self::MAILING_STATE_AL,
            self::MAILING_STATE_AP,
            self::MAILING_STATE_AR,
            self::MAILING_STATE__AS,
            self::MAILING_STATE_AZ,
            self::MAILING_STATE_CA,
            self::MAILING_STATE_CO,
            self::MAILING_STATE_CT,
            self::MAILING_STATE_DC,
            self::MAILING_STATE_DE,
            self::MAILING_STATE_FL,
            self::MAILING_STATE_FM,
            self::MAILING_STATE_GA,
            self::MAILING_STATE_GU,
            self::MAILING_STATE_HI,
            self::MAILING_STATE_IA,
            self::MAILING_STATE_ID,
            self::MAILING_STATE_IL,
            self::MAILING_STATE_IN,
            self::MAILING_STATE_KS,
            self::MAILING_STATE_KY,
            self::MAILING_STATE_LA,
            self::MAILING_STATE_MA,
            self::MAILING_STATE_MD,
            self::MAILING_STATE_ME,
            self::MAILING_STATE_MH,
            self::MAILING_STATE_MI,
            self::MAILING_STATE_MN,
            self::MAILING_STATE_MO,
            self::MAILING_STATE_MP,
            self::MAILING_STATE_MS,
            self::MAILING_STATE_MT,
            self::MAILING_STATE_NC,
            self::MAILING_STATE_ND,
            self::MAILING_STATE_NE,
            self::MAILING_STATE_NH,
            self::MAILING_STATE_NJ,
            self::MAILING_STATE_NM,
            self::MAILING_STATE_NV,
            self::MAILING_STATE_NY,
            self::MAILING_STATE_OH,
            self::MAILING_STATE_OK,
            self::MAILING_STATE__OR,
            self::MAILING_STATE_PA,
            self::MAILING_STATE_PR,
            self::MAILING_STATE_PW,
            self::MAILING_STATE_RI,
            self::MAILING_STATE_SC,
            self::MAILING_STATE_SD,
            self::MAILING_STATE_TN,
            self::MAILING_STATE_TX,
            self::MAILING_STATE_UT,
            self::MAILING_STATE_VA,
            self::MAILING_STATE_VI,
            self::MAILING_STATE_VT,
            self::MAILING_STATE_WA,
            self::MAILING_STATE_WI,
            self::MAILING_STATE_WV,
            self::MAILING_STATE_WY,
            self::MAILING_STATE_AB,
            self::MAILING_STATE_BC,
            self::MAILING_STATE_MB,
            self::MAILING_STATE_NB,
            self::MAILING_STATE_NL,
            self::MAILING_STATE_NS,
            self::MAILING_STATE_NT,
            self::MAILING_STATE_NU,
            self::MAILING_STATE_ON,
            self::MAILING_STATE_PE,
            self::MAILING_STATE_QC,
            self::MAILING_STATE_SK,
            self::MAILING_STATE_YT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMailingCountryAllowableValues()
    {
        return [
            self::MAILING_COUNTRY_US,
            self::MAILING_COUNTRY_AF,
            self::MAILING_COUNTRY_AX,
            self::MAILING_COUNTRY_AL,
            self::MAILING_COUNTRY_AG,
            self::MAILING_COUNTRY_AQ,
            self::MAILING_COUNTRY_AN,
            self::MAILING_COUNTRY_AO,
            self::MAILING_COUNTRY_AV,
            self::MAILING_COUNTRY_AY,
            self::MAILING_COUNTRY_AC,
            self::MAILING_COUNTRY_AR,
            self::MAILING_COUNTRY_AM,
            self::MAILING_COUNTRY_AA,
            self::MAILING_COUNTRY_AT,
            self::MAILING_COUNTRY__AS,
            self::MAILING_COUNTRY_AU,
            self::MAILING_COUNTRY_AJ,
            self::MAILING_COUNTRY_BF,
            self::MAILING_COUNTRY_BA,
            self::MAILING_COUNTRY_FQ,
            self::MAILING_COUNTRY_BG,
            self::MAILING_COUNTRY_BB,
            self::MAILING_COUNTRY_BO,
            self::MAILING_COUNTRY_BE,
            self::MAILING_COUNTRY_BH,
            self::MAILING_COUNTRY_BN,
            self::MAILING_COUNTRY_BD,
            self::MAILING_COUNTRY_BT,
            self::MAILING_COUNTRY_BL,
            self::MAILING_COUNTRY_BK,
            self::MAILING_COUNTRY_BC,
            self::MAILING_COUNTRY_BV,
            self::MAILING_COUNTRY_BR,
            self::MAILING_COUNTRY_IO,
            self::MAILING_COUNTRY_VI,
            self::MAILING_COUNTRY_BX,
            self::MAILING_COUNTRY_BU,
            self::MAILING_COUNTRY_UV,
            self::MAILING_COUNTRY_BM,
            self::MAILING_COUNTRY_BY,
            self::MAILING_COUNTRY_CB,
            self::MAILING_COUNTRY_CM,
            self::MAILING_COUNTRY_CA,
            self::MAILING_COUNTRY_CV,
            self::MAILING_COUNTRY_CJ,
            self::MAILING_COUNTRY_CT,
            self::MAILING_COUNTRY_CD,
            self::MAILING_COUNTRY_CI,
            self::MAILING_COUNTRY_CH,
            self::MAILING_COUNTRY_KT,
            self::MAILING_COUNTRY_IP,
            self::MAILING_COUNTRY_CK,
            self::MAILING_COUNTRY_CO,
            self::MAILING_COUNTRY_CN,
            self::MAILING_COUNTRY_CF,
            self::MAILING_COUNTRY_CG,
            self::MAILING_COUNTRY_CW,
            self::MAILING_COUNTRY_CR,
            self::MAILING_COUNTRY_CS,
            self::MAILING_COUNTRY_IV,
            self::MAILING_COUNTRY_HR,
            self::MAILING_COUNTRY_CU,
            self::MAILING_COUNTRY_UC,
            self::MAILING_COUNTRY_CY,
            self::MAILING_COUNTRY_EZ,
            self::MAILING_COUNTRY_DA,
            self::MAILING_COUNTRY_DX,
            self::MAILING_COUNTRY_DJ,
            self::MAILING_COUNTRY__DO,
            self::MAILING_COUNTRY_DR,
            self::MAILING_COUNTRY_TT,
            self::MAILING_COUNTRY_EC,
            self::MAILING_COUNTRY_EG,
            self::MAILING_COUNTRY_ES,
            self::MAILING_COUNTRY_EK,
            self::MAILING_COUNTRY_ER,
            self::MAILING_COUNTRY_EN,
            self::MAILING_COUNTRY_ET,
            self::MAILING_COUNTRY_FK,
            self::MAILING_COUNTRY_FO,
            self::MAILING_COUNTRY_FM,
            self::MAILING_COUNTRY_FJ,
            self::MAILING_COUNTRY_FI,
            self::MAILING_COUNTRY_FR,
            self::MAILING_COUNTRY_FP,
            self::MAILING_COUNTRY_FS,
            self::MAILING_COUNTRY_GB,
            self::MAILING_COUNTRY_GA,
            self::MAILING_COUNTRY_GG,
            self::MAILING_COUNTRY_GM,
            self::MAILING_COUNTRY_GH,
            self::MAILING_COUNTRY_GI,
            self::MAILING_COUNTRY_GR,
            self::MAILING_COUNTRY_GL,
            self::MAILING_COUNTRY_GJ,
            self::MAILING_COUNTRY_GQ,
            self::MAILING_COUNTRY_GT,
            self::MAILING_COUNTRY_GK,
            self::MAILING_COUNTRY_GV,
            self::MAILING_COUNTRY_PU,
            self::MAILING_COUNTRY_GY,
            self::MAILING_COUNTRY_HA,
            self::MAILING_COUNTRY_HM,
            self::MAILING_COUNTRY_VT,
            self::MAILING_COUNTRY_HO,
            self::MAILING_COUNTRY_HK,
            self::MAILING_COUNTRY_HQ,
            self::MAILING_COUNTRY_HU,
            self::MAILING_COUNTRY_IC,
            self::MAILING_COUNTRY_IN,
            self::MAILING_COUNTRY_ID,
            self::MAILING_COUNTRY_IR,
            self::MAILING_COUNTRY_IZ,
            self::MAILING_COUNTRY_EI,
            self::MAILING_COUNTRY_IS,
            self::MAILING_COUNTRY_IT,
            self::MAILING_COUNTRY_JM,
            self::MAILING_COUNTRY_JN,
            self::MAILING_COUNTRY_JA,
            self::MAILING_COUNTRY_DQ,
            self::MAILING_COUNTRY_JE,
            self::MAILING_COUNTRY_JQ,
            self::MAILING_COUNTRY_JO,
            self::MAILING_COUNTRY_KZ,
            self::MAILING_COUNTRY_KE,
            self::MAILING_COUNTRY_KQ,
            self::MAILING_COUNTRY_KR,
            self::MAILING_COUNTRY_KN,
            self::MAILING_COUNTRY_KS,
            self::MAILING_COUNTRY_KV,
            self::MAILING_COUNTRY_KU,
            self::MAILING_COUNTRY_KG,
            self::MAILING_COUNTRY_LA,
            self::MAILING_COUNTRY_LG,
            self::MAILING_COUNTRY_LE,
            self::MAILING_COUNTRY_LT,
            self::MAILING_COUNTRY_LI,
            self::MAILING_COUNTRY_LY,
            self::MAILING_COUNTRY_LS,
            self::MAILING_COUNTRY_LH,
            self::MAILING_COUNTRY_LU,
            self::MAILING_COUNTRY_MC,
            self::MAILING_COUNTRY_MK,
            self::MAILING_COUNTRY_MA,
            self::MAILING_COUNTRY_MI,
            self::MAILING_COUNTRY_MY,
            self::MAILING_COUNTRY_MV,
            self::MAILING_COUNTRY_ML,
            self::MAILING_COUNTRY_MT,
            self::MAILING_COUNTRY_IM,
            self::MAILING_COUNTRY_RM,
            self::MAILING_COUNTRY_MR,
            self::MAILING_COUNTRY_MP,
            self::MAILING_COUNTRY_MX,
            self::MAILING_COUNTRY_MQ,
            self::MAILING_COUNTRY_MD,
            self::MAILING_COUNTRY_MN,
            self::MAILING_COUNTRY_MG,
            self::MAILING_COUNTRY_MJ,
            self::MAILING_COUNTRY_MH,
            self::MAILING_COUNTRY_MO,
            self::MAILING_COUNTRY_MZ,
            self::MAILING_COUNTRY_WA,
            self::MAILING_COUNTRY_NR,
            self::MAILING_COUNTRY_BQ,
            self::MAILING_COUNTRY_NP,
            self::MAILING_COUNTRY_NL,
            self::MAILING_COUNTRY_NC,
            self::MAILING_COUNTRY_NZ,
            self::MAILING_COUNTRY_NU,
            self::MAILING_COUNTRY_NG,
            self::MAILING_COUNTRY_NI,
            self::MAILING_COUNTRY_NE,
            self::MAILING_COUNTRY_NF,
            self::MAILING_COUNTRY_CQ,
            self::MAILING_COUNTRY_NO,
            self::MAILING_COUNTRY_MU,
            self::MAILING_COUNTRY_OC,
            self::MAILING_COUNTRY_PK,
            self::MAILING_COUNTRY_PS,
            self::MAILING_COUNTRY_LQ,
            self::MAILING_COUNTRY_PM,
            self::MAILING_COUNTRY_PP,
            self::MAILING_COUNTRY_PF,
            self::MAILING_COUNTRY_PA,
            self::MAILING_COUNTRY_PE,
            self::MAILING_COUNTRY_RP,
            self::MAILING_COUNTRY_PC,
            self::MAILING_COUNTRY_PL,
            self::MAILING_COUNTRY_PO,
            self::MAILING_COUNTRY_RQ,
            self::MAILING_COUNTRY_QA,
            self::MAILING_COUNTRY_RO,
            self::MAILING_COUNTRY_RS,
            self::MAILING_COUNTRY_RW,
            self::MAILING_COUNTRY_TB,
            self::MAILING_COUNTRY_RN,
            self::MAILING_COUNTRY_WS,
            self::MAILING_COUNTRY_SM,
            self::MAILING_COUNTRY_TP,
            self::MAILING_COUNTRY_SA,
            self::MAILING_COUNTRY_SG,
            self::MAILING_COUNTRY_RI,
            self::MAILING_COUNTRY_SE,
            self::MAILING_COUNTRY_SL,
            self::MAILING_COUNTRY_SN,
            self::MAILING_COUNTRY_NN,
            self::MAILING_COUNTRY_LO,
            self::MAILING_COUNTRY_SI,
            self::MAILING_COUNTRY_BP,
            self::MAILING_COUNTRY_SO,
            self::MAILING_COUNTRY_SF,
            self::MAILING_COUNTRY_SX,
            self::MAILING_COUNTRY_SP,
            self::MAILING_COUNTRY_PG,
            self::MAILING_COUNTRY_CE,
            self::MAILING_COUNTRY_SH,
            self::MAILING_COUNTRY_SC,
            self::MAILING_COUNTRY_ST,
            self::MAILING_COUNTRY_SB,
            self::MAILING_COUNTRY_VC,
            self::MAILING_COUNTRY_SU,
            self::MAILING_COUNTRY_NS,
            self::MAILING_COUNTRY_SV,
            self::MAILING_COUNTRY_WZ,
            self::MAILING_COUNTRY_SW,
            self::MAILING_COUNTRY_SZ,
            self::MAILING_COUNTRY_SY,
            self::MAILING_COUNTRY_TW,
            self::MAILING_COUNTRY_TI,
            self::MAILING_COUNTRY_TZ,
            self::MAILING_COUNTRY_TH,
            self::MAILING_COUNTRY_TO,
            self::MAILING_COUNTRY_TL,
            self::MAILING_COUNTRY_TN,
            self::MAILING_COUNTRY_TD,
            self::MAILING_COUNTRY_TS,
            self::MAILING_COUNTRY_TU,
            self::MAILING_COUNTRY_TX,
            self::MAILING_COUNTRY_TK,
            self::MAILING_COUNTRY_TV,
            self::MAILING_COUNTRY_UG,
            self::MAILING_COUNTRY_UP,
            self::MAILING_COUNTRY_AE,
            self::MAILING_COUNTRY_UK,
            self::MAILING_COUNTRY_UY,
            self::MAILING_COUNTRY_UZ,
            self::MAILING_COUNTRY_NH,
            self::MAILING_COUNTRY_VE,
            self::MAILING_COUNTRY_VM,
            self::MAILING_COUNTRY_VQ,
            self::MAILING_COUNTRY_WQ,
            self::MAILING_COUNTRY_WF,
            self::MAILING_COUNTRY_WI,
            self::MAILING_COUNTRY_YM,
            self::MAILING_COUNTRY_ZA,
            self::MAILING_COUNTRY_ZI,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisregardedEntityFatcaStatusAllowableValues()
    {
        return [
            self::DISREGARDED_ENTITY_FATCA_STATUS_BRANCH_TREATED_AS_NONPARTICIPATING_FFI,
            self::DISREGARDED_ENTITY_FATCA_STATUS_US_BRANCH,
            self::DISREGARDED_ENTITY_FATCA_STATUS_PARTICIPATING_FFI,
            self::DISREGARDED_ENTITY_FATCA_STATUS_REPORTING_MODEL1_FFI,
            self::DISREGARDED_ENTITY_FATCA_STATUS_REPORTING_MODEL2_FFI,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisregardedStateAllowableValues()
    {
        return [
            self::DISREGARDED_STATE_AA,
            self::DISREGARDED_STATE_AE,
            self::DISREGARDED_STATE_AK,
            self::DISREGARDED_STATE_AL,
            self::DISREGARDED_STATE_AP,
            self::DISREGARDED_STATE_AR,
            self::DISREGARDED_STATE__AS,
            self::DISREGARDED_STATE_AZ,
            self::DISREGARDED_STATE_CA,
            self::DISREGARDED_STATE_CO,
            self::DISREGARDED_STATE_CT,
            self::DISREGARDED_STATE_DC,
            self::DISREGARDED_STATE_DE,
            self::DISREGARDED_STATE_FL,
            self::DISREGARDED_STATE_FM,
            self::DISREGARDED_STATE_GA,
            self::DISREGARDED_STATE_GU,
            self::DISREGARDED_STATE_HI,
            self::DISREGARDED_STATE_IA,
            self::DISREGARDED_STATE_ID,
            self::DISREGARDED_STATE_IL,
            self::DISREGARDED_STATE_IN,
            self::DISREGARDED_STATE_KS,
            self::DISREGARDED_STATE_KY,
            self::DISREGARDED_STATE_LA,
            self::DISREGARDED_STATE_MA,
            self::DISREGARDED_STATE_MD,
            self::DISREGARDED_STATE_ME,
            self::DISREGARDED_STATE_MH,
            self::DISREGARDED_STATE_MI,
            self::DISREGARDED_STATE_MN,
            self::DISREGARDED_STATE_MO,
            self::DISREGARDED_STATE_MP,
            self::DISREGARDED_STATE_MS,
            self::DISREGARDED_STATE_MT,
            self::DISREGARDED_STATE_NC,
            self::DISREGARDED_STATE_ND,
            self::DISREGARDED_STATE_NE,
            self::DISREGARDED_STATE_NH,
            self::DISREGARDED_STATE_NJ,
            self::DISREGARDED_STATE_NM,
            self::DISREGARDED_STATE_NV,
            self::DISREGARDED_STATE_NY,
            self::DISREGARDED_STATE_OH,
            self::DISREGARDED_STATE_OK,
            self::DISREGARDED_STATE__OR,
            self::DISREGARDED_STATE_PA,
            self::DISREGARDED_STATE_PR,
            self::DISREGARDED_STATE_PW,
            self::DISREGARDED_STATE_RI,
            self::DISREGARDED_STATE_SC,
            self::DISREGARDED_STATE_SD,
            self::DISREGARDED_STATE_TN,
            self::DISREGARDED_STATE_TX,
            self::DISREGARDED_STATE_UT,
            self::DISREGARDED_STATE_VA,
            self::DISREGARDED_STATE_VI,
            self::DISREGARDED_STATE_VT,
            self::DISREGARDED_STATE_WA,
            self::DISREGARDED_STATE_WI,
            self::DISREGARDED_STATE_WV,
            self::DISREGARDED_STATE_WY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIgaModelAllowableValues()
    {
        return [
            self::IGA_MODEL_MODEL1_IGA,
            self::IGA_MODEL_MODEL2_IGA,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTreatyCountryAllowableValues()
    {
        return [
            self::TREATY_COUNTRY_US,
            self::TREATY_COUNTRY_AF,
            self::TREATY_COUNTRY_AX,
            self::TREATY_COUNTRY_AL,
            self::TREATY_COUNTRY_AG,
            self::TREATY_COUNTRY_AQ,
            self::TREATY_COUNTRY_AN,
            self::TREATY_COUNTRY_AO,
            self::TREATY_COUNTRY_AV,
            self::TREATY_COUNTRY_AY,
            self::TREATY_COUNTRY_AC,
            self::TREATY_COUNTRY_AR,
            self::TREATY_COUNTRY_AM,
            self::TREATY_COUNTRY_AA,
            self::TREATY_COUNTRY_AT,
            self::TREATY_COUNTRY__AS,
            self::TREATY_COUNTRY_AU,
            self::TREATY_COUNTRY_AJ,
            self::TREATY_COUNTRY_BF,
            self::TREATY_COUNTRY_BA,
            self::TREATY_COUNTRY_FQ,
            self::TREATY_COUNTRY_BG,
            self::TREATY_COUNTRY_BB,
            self::TREATY_COUNTRY_BO,
            self::TREATY_COUNTRY_BE,
            self::TREATY_COUNTRY_BH,
            self::TREATY_COUNTRY_BN,
            self::TREATY_COUNTRY_BD,
            self::TREATY_COUNTRY_BT,
            self::TREATY_COUNTRY_BL,
            self::TREATY_COUNTRY_BK,
            self::TREATY_COUNTRY_BC,
            self::TREATY_COUNTRY_BV,
            self::TREATY_COUNTRY_BR,
            self::TREATY_COUNTRY_IO,
            self::TREATY_COUNTRY_VI,
            self::TREATY_COUNTRY_BX,
            self::TREATY_COUNTRY_BU,
            self::TREATY_COUNTRY_UV,
            self::TREATY_COUNTRY_BM,
            self::TREATY_COUNTRY_BY,
            self::TREATY_COUNTRY_CB,
            self::TREATY_COUNTRY_CM,
            self::TREATY_COUNTRY_CA,
            self::TREATY_COUNTRY_CV,
            self::TREATY_COUNTRY_CJ,
            self::TREATY_COUNTRY_CT,
            self::TREATY_COUNTRY_CD,
            self::TREATY_COUNTRY_CI,
            self::TREATY_COUNTRY_CH,
            self::TREATY_COUNTRY_KT,
            self::TREATY_COUNTRY_IP,
            self::TREATY_COUNTRY_CK,
            self::TREATY_COUNTRY_CO,
            self::TREATY_COUNTRY_CN,
            self::TREATY_COUNTRY_CF,
            self::TREATY_COUNTRY_CG,
            self::TREATY_COUNTRY_CW,
            self::TREATY_COUNTRY_CR,
            self::TREATY_COUNTRY_CS,
            self::TREATY_COUNTRY_IV,
            self::TREATY_COUNTRY_HR,
            self::TREATY_COUNTRY_CU,
            self::TREATY_COUNTRY_UC,
            self::TREATY_COUNTRY_CY,
            self::TREATY_COUNTRY_EZ,
            self::TREATY_COUNTRY_DA,
            self::TREATY_COUNTRY_DX,
            self::TREATY_COUNTRY_DJ,
            self::TREATY_COUNTRY__DO,
            self::TREATY_COUNTRY_DR,
            self::TREATY_COUNTRY_TT,
            self::TREATY_COUNTRY_EC,
            self::TREATY_COUNTRY_EG,
            self::TREATY_COUNTRY_ES,
            self::TREATY_COUNTRY_EK,
            self::TREATY_COUNTRY_ER,
            self::TREATY_COUNTRY_EN,
            self::TREATY_COUNTRY_ET,
            self::TREATY_COUNTRY_FK,
            self::TREATY_COUNTRY_FO,
            self::TREATY_COUNTRY_FM,
            self::TREATY_COUNTRY_FJ,
            self::TREATY_COUNTRY_FI,
            self::TREATY_COUNTRY_FR,
            self::TREATY_COUNTRY_FP,
            self::TREATY_COUNTRY_FS,
            self::TREATY_COUNTRY_GB,
            self::TREATY_COUNTRY_GA,
            self::TREATY_COUNTRY_GG,
            self::TREATY_COUNTRY_GM,
            self::TREATY_COUNTRY_GH,
            self::TREATY_COUNTRY_GI,
            self::TREATY_COUNTRY_GR,
            self::TREATY_COUNTRY_GL,
            self::TREATY_COUNTRY_GJ,
            self::TREATY_COUNTRY_GQ,
            self::TREATY_COUNTRY_GT,
            self::TREATY_COUNTRY_GK,
            self::TREATY_COUNTRY_GV,
            self::TREATY_COUNTRY_PU,
            self::TREATY_COUNTRY_GY,
            self::TREATY_COUNTRY_HA,
            self::TREATY_COUNTRY_HM,
            self::TREATY_COUNTRY_VT,
            self::TREATY_COUNTRY_HO,
            self::TREATY_COUNTRY_HK,
            self::TREATY_COUNTRY_HQ,
            self::TREATY_COUNTRY_HU,
            self::TREATY_COUNTRY_IC,
            self::TREATY_COUNTRY_IN,
            self::TREATY_COUNTRY_ID,
            self::TREATY_COUNTRY_IR,
            self::TREATY_COUNTRY_IZ,
            self::TREATY_COUNTRY_EI,
            self::TREATY_COUNTRY_IS,
            self::TREATY_COUNTRY_IT,
            self::TREATY_COUNTRY_JM,
            self::TREATY_COUNTRY_JN,
            self::TREATY_COUNTRY_JA,
            self::TREATY_COUNTRY_DQ,
            self::TREATY_COUNTRY_JE,
            self::TREATY_COUNTRY_JQ,
            self::TREATY_COUNTRY_JO,
            self::TREATY_COUNTRY_KZ,
            self::TREATY_COUNTRY_KE,
            self::TREATY_COUNTRY_KQ,
            self::TREATY_COUNTRY_KR,
            self::TREATY_COUNTRY_KN,
            self::TREATY_COUNTRY_KS,
            self::TREATY_COUNTRY_KV,
            self::TREATY_COUNTRY_KU,
            self::TREATY_COUNTRY_KG,
            self::TREATY_COUNTRY_LA,
            self::TREATY_COUNTRY_LG,
            self::TREATY_COUNTRY_LE,
            self::TREATY_COUNTRY_LT,
            self::TREATY_COUNTRY_LI,
            self::TREATY_COUNTRY_LY,
            self::TREATY_COUNTRY_LS,
            self::TREATY_COUNTRY_LH,
            self::TREATY_COUNTRY_LU,
            self::TREATY_COUNTRY_MC,
            self::TREATY_COUNTRY_MK,
            self::TREATY_COUNTRY_MA,
            self::TREATY_COUNTRY_MI,
            self::TREATY_COUNTRY_MY,
            self::TREATY_COUNTRY_MV,
            self::TREATY_COUNTRY_ML,
            self::TREATY_COUNTRY_MT,
            self::TREATY_COUNTRY_IM,
            self::TREATY_COUNTRY_RM,
            self::TREATY_COUNTRY_MR,
            self::TREATY_COUNTRY_MP,
            self::TREATY_COUNTRY_MX,
            self::TREATY_COUNTRY_MQ,
            self::TREATY_COUNTRY_MD,
            self::TREATY_COUNTRY_MN,
            self::TREATY_COUNTRY_MG,
            self::TREATY_COUNTRY_MJ,
            self::TREATY_COUNTRY_MH,
            self::TREATY_COUNTRY_MO,
            self::TREATY_COUNTRY_MZ,
            self::TREATY_COUNTRY_WA,
            self::TREATY_COUNTRY_NR,
            self::TREATY_COUNTRY_BQ,
            self::TREATY_COUNTRY_NP,
            self::TREATY_COUNTRY_NL,
            self::TREATY_COUNTRY_NC,
            self::TREATY_COUNTRY_NZ,
            self::TREATY_COUNTRY_NU,
            self::TREATY_COUNTRY_NG,
            self::TREATY_COUNTRY_NI,
            self::TREATY_COUNTRY_NE,
            self::TREATY_COUNTRY_NF,
            self::TREATY_COUNTRY_CQ,
            self::TREATY_COUNTRY_NO,
            self::TREATY_COUNTRY_MU,
            self::TREATY_COUNTRY_OC,
            self::TREATY_COUNTRY_PK,
            self::TREATY_COUNTRY_PS,
            self::TREATY_COUNTRY_LQ,
            self::TREATY_COUNTRY_PM,
            self::TREATY_COUNTRY_PP,
            self::TREATY_COUNTRY_PF,
            self::TREATY_COUNTRY_PA,
            self::TREATY_COUNTRY_PE,
            self::TREATY_COUNTRY_RP,
            self::TREATY_COUNTRY_PC,
            self::TREATY_COUNTRY_PL,
            self::TREATY_COUNTRY_PO,
            self::TREATY_COUNTRY_RQ,
            self::TREATY_COUNTRY_QA,
            self::TREATY_COUNTRY_RO,
            self::TREATY_COUNTRY_RS,
            self::TREATY_COUNTRY_RW,
            self::TREATY_COUNTRY_TB,
            self::TREATY_COUNTRY_RN,
            self::TREATY_COUNTRY_WS,
            self::TREATY_COUNTRY_SM,
            self::TREATY_COUNTRY_TP,
            self::TREATY_COUNTRY_SA,
            self::TREATY_COUNTRY_SG,
            self::TREATY_COUNTRY_RI,
            self::TREATY_COUNTRY_SE,
            self::TREATY_COUNTRY_SL,
            self::TREATY_COUNTRY_SN,
            self::TREATY_COUNTRY_NN,
            self::TREATY_COUNTRY_LO,
            self::TREATY_COUNTRY_SI,
            self::TREATY_COUNTRY_BP,
            self::TREATY_COUNTRY_SO,
            self::TREATY_COUNTRY_SF,
            self::TREATY_COUNTRY_SX,
            self::TREATY_COUNTRY_SP,
            self::TREATY_COUNTRY_PG,
            self::TREATY_COUNTRY_CE,
            self::TREATY_COUNTRY_SH,
            self::TREATY_COUNTRY_SC,
            self::TREATY_COUNTRY_ST,
            self::TREATY_COUNTRY_SB,
            self::TREATY_COUNTRY_VC,
            self::TREATY_COUNTRY_SU,
            self::TREATY_COUNTRY_NS,
            self::TREATY_COUNTRY_SV,
            self::TREATY_COUNTRY_WZ,
            self::TREATY_COUNTRY_SW,
            self::TREATY_COUNTRY_SZ,
            self::TREATY_COUNTRY_SY,
            self::TREATY_COUNTRY_TW,
            self::TREATY_COUNTRY_TI,
            self::TREATY_COUNTRY_TZ,
            self::TREATY_COUNTRY_TH,
            self::TREATY_COUNTRY_TO,
            self::TREATY_COUNTRY_TL,
            self::TREATY_COUNTRY_TN,
            self::TREATY_COUNTRY_TD,
            self::TREATY_COUNTRY_TS,
            self::TREATY_COUNTRY_TU,
            self::TREATY_COUNTRY_TX,
            self::TREATY_COUNTRY_TK,
            self::TREATY_COUNTRY_TV,
            self::TREATY_COUNTRY_UG,
            self::TREATY_COUNTRY_UP,
            self::TREATY_COUNTRY_AE,
            self::TREATY_COUNTRY_UK,
            self::TREATY_COUNTRY_UY,
            self::TREATY_COUNTRY_UZ,
            self::TREATY_COUNTRY_NH,
            self::TREATY_COUNTRY_VE,
            self::TREATY_COUNTRY_VM,
            self::TREATY_COUNTRY_VQ,
            self::TREATY_COUNTRY_WQ,
            self::TREATY_COUNTRY_WF,
            self::TREATY_COUNTRY_WI,
            self::TREATY_COUNTRY_YM,
            self::TREATY_COUNTRY_ZA,
            self::TREATY_COUNTRY_ZI,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBenefitLimitationAllowableValues()
    {
        return [
            self::BENEFIT_LIMITATION_GOVERNMENT,
            self::BENEFIT_LIMITATION_TAX_EXEMPT_PENSION_TRUST_OR_PENSION_FUND,
            self::BENEFIT_LIMITATION_OTHER_TAX_EXEMPT_ORGANIZATION,
            self::BENEFIT_LIMITATION_PUBLICLY_TRADED_CORPORATION,
            self::BENEFIT_LIMITATION_SUBSIDIARY_OF_PUBLICLY_TRADED_CORPORATION,
            self::BENEFIT_LIMITATION_COMPANY_THAT_MEETS_OWNERSHIP_AND_BASE_EROSION_TEST,
            self::BENEFIT_LIMITATION_COMPANY_THAT_MEETS_DERIVATIVE_BENEFITS_TEST,
            self::BENEFIT_LIMITATION_COMPANY_WITH_ITEM_OF_INCOME_THAT_MEETS_ACTIVE_TRADE_OR_BUSINESS_TEST,
            self::BENEFIT_LIMITATION_FAVORABLE_DISCRETIONARY_DETERMINATION_BY_US_COMPETENT_AUTHORITY_RECEIVED,
            self::BENEFIT_LIMITATION_OTHER,
            self::BENEFIT_LIMITATION_NO_LOB_ARTICLE_IN_TREATY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWithholdingRateAllowableValues()
    {
        return [
            self::WITHHOLDING_RATE__0,
            self::WITHHOLDING_RATE__0_0,
            self::WITHHOLDING_RATE__0_00,
            self::WITHHOLDING_RATE__5,
            self::WITHHOLDING_RATE__5_5,
            self::WITHHOLDING_RATE__10,
            self::WITHHOLDING_RATE__12_50,
            self::WITHHOLDING_RATE__15,
            self::WITHHOLDING_RATE__20,
            self::WITHHOLDING_RATE__25,
            self::WITHHOLDING_RATE__30,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaritalStatusAllowableValues()
    {
        return [
            self::MARITAL_STATUS_SINGLE,
            self::MARITAL_STATUS_MARRIED,
            self::MARITAL_STATUS_MARRIED_BUT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['business_name'] = $data['business_name'] ?? null;
        $this->container['business_classification'] = $data['business_classification'] ?? null;
        $this->container['business_other'] = $data['business_other'] ?? null;
        $this->container['foreign_partner_owner_or_beneficiary'] = $data['foreign_partner_owner_or_beneficiary'] ?? null;
        $this->container['exempt_payee_code'] = $data['exempt_payee_code'] ?? null;
        $this->container['exempt_fatca_code'] = $data['exempt_fatca_code'] ?? null;
        $this->container['foreign_country_indicator'] = $data['foreign_country_indicator'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['foreign_address'] = $data['foreign_address'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['tin_type'] = $data['tin_type'] ?? null;
        $this->container['tin'] = $data['tin'] ?? null;
        $this->container['backup_withholding'] = $data['backup_withholding'] ?? null;
        $this->container['is1099able'] = $data['is1099able'] ?? null;
        $this->container['e_delivery_consented_at'] = $data['e_delivery_consented_at'] ?? null;
        $this->container['signature'] = $data['signature'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['citizenship_country'] = $data['citizenship_country'] ?? null;
        $this->container['disregarded_entity'] = $data['disregarded_entity'] ?? null;
        $this->container['entity_type'] = $data['entity_type'] ?? null;
        $this->container['fatca_status'] = $data['fatca_status'] ?? null;
        $this->container['residence_address'] = $data['residence_address'] ?? null;
        $this->container['residence_city'] = $data['residence_city'] ?? null;
        $this->container['residence_state'] = $data['residence_state'] ?? null;
        $this->container['residence_zip'] = $data['residence_zip'] ?? null;
        $this->container['residence_country'] = $data['residence_country'] ?? null;
        $this->container['residence_is_mailing'] = $data['residence_is_mailing'] ?? null;
        $this->container['mailing_address'] = $data['mailing_address'] ?? null;
        $this->container['mailing_city'] = $data['mailing_city'] ?? null;
        $this->container['mailing_state'] = $data['mailing_state'] ?? null;
        $this->container['mailing_zip'] = $data['mailing_zip'] ?? null;
        $this->container['mailing_country'] = $data['mailing_country'] ?? null;
        $this->container['giin'] = $data['giin'] ?? null;
        $this->container['foreign_tin'] = $data['foreign_tin'] ?? null;
        $this->container['reference_number'] = $data['reference_number'] ?? null;
        $this->container['disregarded_entity_fatca_status'] = $data['disregarded_entity_fatca_status'] ?? null;
        $this->container['disregarded_address'] = $data['disregarded_address'] ?? null;
        $this->container['disregarded_city'] = $data['disregarded_city'] ?? null;
        $this->container['disregarded_state'] = $data['disregarded_state'] ?? null;
        $this->container['disregarded_zip'] = $data['disregarded_zip'] ?? null;
        $this->container['disregarded_country'] = $data['disregarded_country'] ?? null;
        $this->container['disregarded_entity_giin'] = $data['disregarded_entity_giin'] ?? null;
        $this->container['qualified_intermediary_certification'] = $data['qualified_intermediary_certification'] ?? null;
        $this->container['qi_primary_withholding_responsibility_certification'] = $data['qi_primary_withholding_responsibility_certification'] ?? null;
        $this->container['qi_withholding_responsibility_for_ptp_sales_certification'] = $data['qi_withholding_responsibility_for_ptp_sales_certification'] ?? null;
        $this->container['qi_nominee_withholding_responsibility_for_ptp_distributions_certification'] = $data['qi_nominee_withholding_responsibility_for_ptp_distributions_certification'] ?? null;
        $this->container['qi_securities_lender_substitute_dividend_withholding_certification'] = $data['qi_securities_lender_substitute_dividend_withholding_certification'] ?? null;
        $this->container['qi_withholding_and1099_reporting_responsibility_certification'] = $data['qi_withholding_and1099_reporting_responsibility_certification'] ?? null;
        $this->container['qi_form1099_or_fatca_reporting_responsibility_certification'] = $data['qi_form1099_or_fatca_reporting_responsibility_certification'] ?? null;
        $this->container['qi_opt_out_of_form1099_reporting_certification'] = $data['qi_opt_out_of_form1099_reporting_certification'] ?? null;
        $this->container['qi_withholding_rate_pool_certification'] = $data['qi_withholding_rate_pool_certification'] ?? null;
        $this->container['qi_intermediary_or_flow_through_entity_documentation_certification'] = $data['qi_intermediary_or_flow_through_entity_documentation_certification'] ?? null;
        $this->container['qualified_derivatives_dealer_certification'] = $data['qualified_derivatives_dealer_certification'] ?? null;
        $this->container['qdd_corporation'] = $data['qdd_corporation'] ?? null;
        $this->container['qdd_partnership'] = $data['qdd_partnership'] ?? null;
        $this->container['qdd_disregarded_entity'] = $data['qdd_disregarded_entity'] ?? null;
        $this->container['nonqualified_intermediary_certification'] = $data['nonqualified_intermediary_certification'] ?? null;
        $this->container['nqi_withholding_statement_transmission_certification'] = $data['nqi_withholding_statement_transmission_certification'] ?? null;
        $this->container['nqi_withholding_rate_pool_compliance_certification'] = $data['nqi_withholding_rate_pool_compliance_certification'] ?? null;
        $this->container['nqi_qualified_securities_lender_certification'] = $data['nqi_qualified_securities_lender_certification'] ?? null;
        $this->container['nqi_alternative_withholding_statement_verification_certification'] = $data['nqi_alternative_withholding_statement_verification_certification'] ?? null;
        $this->container['territory_financial_institution_certification'] = $data['territory_financial_institution_certification'] ?? null;
        $this->container['tfi_treated_as_us_person_certification'] = $data['tfi_treated_as_us_person_certification'] ?? null;
        $this->container['tfi_withholding_statement_transmission_certification'] = $data['tfi_withholding_statement_transmission_certification'] ?? null;
        $this->container['tfi_treated_as_us_person_for_ptp_sales_certification'] = $data['tfi_treated_as_us_person_for_ptp_sales_certification'] ?? null;
        $this->container['tfi_nominee_us_person_for_ptp_distributions_certification'] = $data['tfi_nominee_us_person_for_ptp_distributions_certification'] ?? null;
        $this->container['tfi_not_nominee_for_ptp_distributions_certification'] = $data['tfi_not_nominee_for_ptp_distributions_certification'] ?? null;
        $this->container['us_branch_non_effectively_connected_income_certification'] = $data['us_branch_non_effectively_connected_income_certification'] ?? null;
        $this->container['us_branch_agreement_to_be_treated_as_us_person_certification'] = $data['us_branch_agreement_to_be_treated_as_us_person_certification'] ?? null;
        $this->container['us_branch_withholding_statement_and_compliance_certification'] = $data['us_branch_withholding_statement_and_compliance_certification'] ?? null;
        $this->container['us_branch_acting_as_us_person_for_ptp_sales_certification'] = $data['us_branch_acting_as_us_person_for_ptp_sales_certification'] ?? null;
        $this->container['us_branch_nominee_for_ptp_distributions_certification'] = $data['us_branch_nominee_for_ptp_distributions_certification'] ?? null;
        $this->container['us_branch_not_nominee_for_ptp_distributions_certification'] = $data['us_branch_not_nominee_for_ptp_distributions_certification'] ?? null;
        $this->container['withholding_foreign_partnership_or_trust_certification'] = $data['withholding_foreign_partnership_or_trust_certification'] ?? null;
        $this->container['nonwithholding_foreign_entity_withholding_statement_certification'] = $data['nonwithholding_foreign_entity_withholding_statement_certification'] ?? null;
        $this->container['foreign_entity_partner_in_lower_tier_partnership_certification'] = $data['foreign_entity_partner_in_lower_tier_partnership_certification'] ?? null;
        $this->container['foreign_partnership_amount_realized_section1446_f_certification'] = $data['foreign_partnership_amount_realized_section1446_f_certification'] ?? null;
        $this->container['foreign_partnership_modified_amount_realized_certification'] = $data['foreign_partnership_modified_amount_realized_certification'] ?? null;
        $this->container['foreign_grantor_trust_amount_realized_allocation_certification'] = $data['foreign_grantor_trust_amount_realized_allocation_certification'] ?? null;
        $this->container['alternative_withholding_statement_reliance_certification'] = $data['alternative_withholding_statement_reliance_certification'] ?? null;
        $this->container['np_ffi_with_exempt_beneficial_owners_certification'] = $data['np_ffi_with_exempt_beneficial_owners_certification'] ?? null;
        $this->container['ffi_sponsoring_entity'] = $data['ffi_sponsoring_entity'] ?? null;
        $this->container['investment_entity_certification'] = $data['investment_entity_certification'] ?? null;
        $this->container['controlled_foreign_corporation_certification'] = $data['controlled_foreign_corporation_certification'] ?? null;
        $this->container['owner_documented_ffi_certification'] = $data['owner_documented_ffi_certification'] ?? null;
        $this->container['owner_documented_ffi_reporting_statement_certification'] = $data['owner_documented_ffi_reporting_statement_certification'] ?? null;
        $this->container['owner_documented_ffi_auditor_letter_certification'] = $data['owner_documented_ffi_auditor_letter_certification'] ?? null;
        $this->container['compliant_nonregistering_local_bank_certification'] = $data['compliant_nonregistering_local_bank_certification'] ?? null;
        $this->container['compliant_ffi_low_value_accounts_certification'] = $data['compliant_ffi_low_value_accounts_certification'] ?? null;
        $this->container['sponsored_closely_held_entity_sponsoring_entity'] = $data['sponsored_closely_held_entity_sponsoring_entity'] ?? null;
        $this->container['sponsored_closely_held_investment_vehicle_certification'] = $data['sponsored_closely_held_investment_vehicle_certification'] ?? null;
        $this->container['compliant_limited_life_debt_entity_certification'] = $data['compliant_limited_life_debt_entity_certification'] ?? null;
        $this->container['investment_entity_no_financial_accounts_certification'] = $data['investment_entity_no_financial_accounts_certification'] ?? null;
        $this->container['restricted_distributor_certification'] = $data['restricted_distributor_certification'] ?? null;
        $this->container['restricted_distributor_agreement_certification'] = $data['restricted_distributor_agreement_certification'] ?? null;
        $this->container['restricted_distributor_preexisting_sales_compliance_certification'] = $data['restricted_distributor_preexisting_sales_compliance_certification'] ?? null;
        $this->container['foreign_central_bank_of_issue_certification'] = $data['foreign_central_bank_of_issue_certification'] ?? null;
        $this->container['nonreporting_iga_ffi_certification'] = $data['nonreporting_iga_ffi_certification'] ?? null;
        $this->container['iga_country'] = $data['iga_country'] ?? null;
        $this->container['iga_model'] = $data['iga_model'] ?? null;
        $this->container['iga_legal_status_treatment'] = $data['iga_legal_status_treatment'] ?? null;
        $this->container['iga_ffi_trustee_or_sponsor'] = $data['iga_ffi_trustee_or_sponsor'] ?? null;
        $this->container['iga_ffi_trustee_is_foreign'] = $data['iga_ffi_trustee_is_foreign'] ?? null;
        $this->container['treaty_qualified_pension_fund_certification'] = $data['treaty_qualified_pension_fund_certification'] ?? null;
        $this->container['qualified_retirement_fund_certification'] = $data['qualified_retirement_fund_certification'] ?? null;
        $this->container['narrow_participation_retirement_fund_certification'] = $data['narrow_participation_retirement_fund_certification'] ?? null;
        $this->container['section401_a_equivalent_pension_plan_certification'] = $data['section401_a_equivalent_pension_plan_certification'] ?? null;
        $this->container['investment_entity_for_retirement_funds_certification'] = $data['investment_entity_for_retirement_funds_certification'] ?? null;
        $this->container['exempt_beneficial_owner_sponsored_retirement_fund_certification'] = $data['exempt_beneficial_owner_sponsored_retirement_fund_certification'] ?? null;
        $this->container['excepted_nonfinancial_group_entity_certification'] = $data['excepted_nonfinancial_group_entity_certification'] ?? null;
        $this->container['excepted_nonfinancial_start_up_certification'] = $data['excepted_nonfinancial_start_up_certification'] ?? null;
        $this->container['startup_formation_or_resolution_date'] = $data['startup_formation_or_resolution_date'] ?? null;
        $this->container['excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification'] = $data['excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification'] ?? null;
        $this->container['nonfinancial_entity_filing_date'] = $data['nonfinancial_entity_filing_date'] ?? null;
        $this->container['publicly_traded_nffe_certification'] = $data['publicly_traded_nffe_certification'] ?? null;
        $this->container['publicly_traded_nffe_securities_market'] = $data['publicly_traded_nffe_securities_market'] ?? null;
        $this->container['nffe_affiliate_of_publicly_traded_entity_certification'] = $data['nffe_affiliate_of_publicly_traded_entity_certification'] ?? null;
        $this->container['publicly_traded_entity'] = $data['publicly_traded_entity'] ?? null;
        $this->container['nffe_affiliate_of_publicly_traded_entity_securities_market'] = $data['nffe_affiliate_of_publicly_traded_entity_securities_market'] ?? null;
        $this->container['excepted_territory_nffe_certification'] = $data['excepted_territory_nffe_certification'] ?? null;
        $this->container['active_nffe_certification'] = $data['active_nffe_certification'] ?? null;
        $this->container['passive_nffe_certification'] = $data['passive_nffe_certification'] ?? null;
        $this->container['sponsored_direct_reporting_nffe_certification'] = $data['sponsored_direct_reporting_nffe_certification'] ?? null;
        $this->container['direct_reporting_nffe_sponsoring_entity'] = $data['direct_reporting_nffe_sponsoring_entity'] ?? null;
        $this->container['signer_name'] = $data['signer_name'] ?? null;
        $this->container['making_treaty_claim'] = $data['making_treaty_claim'] ?? null;
        $this->container['foreign_tin_not_required'] = $data['foreign_tin_not_required'] ?? null;
        $this->container['treaty_country_certification'] = $data['treaty_country_certification'] ?? null;
        $this->container['treaty_country'] = $data['treaty_country'] ?? null;
        $this->container['benefit_limitation_certification'] = $data['benefit_limitation_certification'] ?? null;
        $this->container['benefit_limitation'] = $data['benefit_limitation'] ?? null;
        $this->container['qualified_resident_status_certification'] = $data['qualified_resident_status_certification'] ?? null;
        $this->container['treaty_article'] = $data['treaty_article'] ?? null;
        $this->container['withholding_rate'] = $data['withholding_rate'] ?? null;
        $this->container['income_type'] = $data['income_type'] ?? null;
        $this->container['treaty_reasons'] = $data['treaty_reasons'] ?? null;
        $this->container['owner_documented_ffi_trust_beneficiaries_certification'] = $data['owner_documented_ffi_trust_beneficiaries_certification'] ?? null;
        $this->container['non_commercial_financial_activity_certification'] = $data['non_commercial_financial_activity_certification'] ?? null;
        $this->container['internation_organization_certification'] = $data['internation_organization_certification'] ?? null;
        $this->container['intergovernmental_organization_certification'] = $data['intergovernmental_organization_certification'] ?? null;
        $this->container['exempt_beneficial_owner_owned_investment_entity_certification'] = $data['exempt_beneficial_owner_owned_investment_entity_certification'] ?? null;
        $this->container['section501_c_organization_certification'] = $data['section501_c_organization_certification'] ?? null;
        $this->container['determination_letter_date'] = $data['determination_letter_date'] ?? null;
        $this->container['nonprofit_organization_certification'] = $data['nonprofit_organization_certification'] ?? null;
        $this->container['passive_nffe_no_substantial_us_owners_certification'] = $data['passive_nffe_no_substantial_us_owners_certification'] ?? null;
        $this->container['passive_nffe_substantial_us_owners_provided_certification'] = $data['passive_nffe_substantial_us_owners_provided_certification'] ?? null;
        $this->container['excepted_inter_affiliate_ffi_certification'] = $data['excepted_inter_affiliate_ffi_certification'] ?? null;
        $this->container['substantial_us_owners'] = $data['substantial_us_owners'] ?? null;
        $this->container['capacity_to_sign_certification'] = $data['capacity_to_sign_certification'] ?? null;
        $this->container['birthday'] = $data['birthday'] ?? null;
        $this->container['employee_first_name'] = $data['employee_first_name'] ?? null;
        $this->container['employee_middle_name'] = $data['employee_middle_name'] ?? null;
        $this->container['employee_last_name'] = $data['employee_last_name'] ?? null;
        $this->container['employee_name_suffix'] = $data['employee_name_suffix'] ?? null;
        $this->container['marital_status'] = $data['marital_status'] ?? null;
        $this->container['last_name_differs'] = $data['last_name_differs'] ?? null;
        $this->container['num_allowances'] = $data['num_allowances'] ?? null;
        $this->container['other_dependents'] = $data['other_dependents'] ?? null;
        $this->container['non_job_income'] = $data['non_job_income'] ?? null;
        $this->container['deductions'] = $data['deductions'] ?? null;
        $this->container['additional_withheld'] = $data['additional_withheld'] ?? null;
        $this->container['exempt_from_withholding'] = $data['exempt_from_withholding'] ?? null;
        $this->container['office_code'] = $data['office_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['business_classification'] === null) {
            $invalidProperties[] = "'business_classification' can't be null";
        }
        $allowedValues = $this->getBusinessClassificationAllowableValues();
        if (!is_null($this->container['business_classification']) && !in_array($this->container['business_classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'business_classification', must be one of '%s'",
                $this->container['business_classification'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['zip'] === null) {
            $invalidProperties[] = "'zip' can't be null";
        }
        if ($this->container['tin_type'] === null) {
            $invalidProperties[] = "'tin_type' can't be null";
        }
        if ($this->container['tin'] === null) {
            $invalidProperties[] = "'tin' can't be null";
        }
        if ($this->container['citizenship_country'] === null) {
            $invalidProperties[] = "'citizenship_country' can't be null";
        }
        $allowedValues = $this->getCitizenshipCountryAllowableValues();
        if (!is_null($this->container['citizenship_country']) && !in_array($this->container['citizenship_country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'citizenship_country', must be one of '%s'",
                $this->container['citizenship_country'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['entity_type'] === null) {
            $invalidProperties[] = "'entity_type' can't be null";
        }
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!is_null($this->container['entity_type']) && !in_array($this->container['entity_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'entity_type', must be one of '%s'",
                $this->container['entity_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['fatca_status'] === null) {
            $invalidProperties[] = "'fatca_status' can't be null";
        }
        $allowedValues = $this->getFatcaStatusAllowableValues();
        if (!is_null($this->container['fatca_status']) && !in_array($this->container['fatca_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fatca_status', must be one of '%s'",
                $this->container['fatca_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResidenceStateAllowableValues();
        if (!is_null($this->container['residence_state']) && !in_array($this->container['residence_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'residence_state', must be one of '%s'",
                $this->container['residence_state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['residence_country'] === null) {
            $invalidProperties[] = "'residence_country' can't be null";
        }
        $allowedValues = $this->getResidenceCountryAllowableValues();
        if (!is_null($this->container['residence_country']) && !in_array($this->container['residence_country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'residence_country', must be one of '%s'",
                $this->container['residence_country'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMailingStateAllowableValues();
        if (!is_null($this->container['mailing_state']) && !in_array($this->container['mailing_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mailing_state', must be one of '%s'",
                $this->container['mailing_state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['mailing_country'] === null) {
            $invalidProperties[] = "'mailing_country' can't be null";
        }
        $allowedValues = $this->getMailingCountryAllowableValues();
        if (!is_null($this->container['mailing_country']) && !in_array($this->container['mailing_country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mailing_country', must be one of '%s'",
                $this->container['mailing_country'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDisregardedEntityFatcaStatusAllowableValues();
        if (!is_null($this->container['disregarded_entity_fatca_status']) && !in_array($this->container['disregarded_entity_fatca_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'disregarded_entity_fatca_status', must be one of '%s'",
                $this->container['disregarded_entity_fatca_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDisregardedStateAllowableValues();
        if (!is_null($this->container['disregarded_state']) && !in_array($this->container['disregarded_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'disregarded_state', must be one of '%s'",
                $this->container['disregarded_state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIgaModelAllowableValues();
        if (!is_null($this->container['iga_model']) && !in_array($this->container['iga_model'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'iga_model', must be one of '%s'",
                $this->container['iga_model'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTreatyCountryAllowableValues();
        if (!is_null($this->container['treaty_country']) && !in_array($this->container['treaty_country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'treaty_country', must be one of '%s'",
                $this->container['treaty_country'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBenefitLimitationAllowableValues();
        if (!is_null($this->container['benefit_limitation']) && !in_array($this->container['benefit_limitation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'benefit_limitation', must be one of '%s'",
                $this->container['benefit_limitation'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWithholdingRateAllowableValues();
        if (!is_null($this->container['withholding_rate']) && !in_array($this->container['withholding_rate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'withholding_rate', must be one of '%s'",
                $this->container['withholding_rate'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['employee_first_name'] === null) {
            $invalidProperties[] = "'employee_first_name' can't be null";
        }
        if ($this->container['employee_last_name'] === null) {
            $invalidProperties[] = "'employee_last_name' can't be null";
        }
        $allowedValues = $this->getMaritalStatusAllowableValues();
        if (!is_null($this->container['marital_status']) && !in_array($this->container['marital_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'marital_status', must be one of '%s'",
                $this->container['marital_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The form type.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the individual or entity associated with the form.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets business_name
     *
     * @return string|null
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string|null $business_name The name of the business associated with the form.
     *
     * @return self
     */
    public function setBusinessName($business_name)
    {
        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets business_classification
     *
     * @return string
     */
    public function getBusinessClassification()
    {
        return $this->container['business_classification'];
    }

    /**
     * Sets business_classification
     *
     * @param string $business_classification The classification of the business.  Available values:  - Individual: Individual/sole proprietor  - C Corporation: C Corporation  - S Corporation: S Corporation  - Partnership: Partnership  - Trust/estate: Trust/estate  - LLC-C: Limited liability company (C Corporation)  - LLC-S: Limited liability company (S Corporation)  - LLC-P: Limited liability company (Partnership)  - Other: Other (requires BusinessOther field to be populated)
     *
     * @return self
     */
    public function setBusinessClassification($business_classification)
    {
        $allowedValues = $this->getBusinessClassificationAllowableValues();
        if (!in_array($business_classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'business_classification', must be one of '%s'",
                    $business_classification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['business_classification'] = $business_classification;

        return $this;
    }

    /**
     * Gets business_other
     *
     * @return string|null
     */
    public function getBusinessOther()
    {
        return $this->container['business_other'];
    }

    /**
     * Sets business_other
     *
     * @param string|null $business_other The classification description when \"businessClassification\" is \"Other\".
     *
     * @return self
     */
    public function setBusinessOther($business_other)
    {
        $this->container['business_other'] = $business_other;

        return $this;
    }

    /**
     * Gets foreign_partner_owner_or_beneficiary
     *
     * @return bool|null
     */
    public function getForeignPartnerOwnerOrBeneficiary()
    {
        return $this->container['foreign_partner_owner_or_beneficiary'];
    }

    /**
     * Sets foreign_partner_owner_or_beneficiary
     *
     * @param bool|null $foreign_partner_owner_or_beneficiary Indicates whether the individual is a foreign partner, owner, or beneficiary.
     *
     * @return self
     */
    public function setForeignPartnerOwnerOrBeneficiary($foreign_partner_owner_or_beneficiary)
    {
        $this->container['foreign_partner_owner_or_beneficiary'] = $foreign_partner_owner_or_beneficiary;

        return $this;
    }

    /**
     * Gets exempt_payee_code
     *
     * @return string|null
     */
    public function getExemptPayeeCode()
    {
        return $this->container['exempt_payee_code'];
    }

    /**
     * Sets exempt_payee_code
     *
     * @param string|null $exempt_payee_code The exempt payee code. Allowed values (1–13):  - 1 — Organization exempt under §501(a) or IRA; custodial account under §403(b)(7)  - 2 — U.S. government or its agencies/instrumentalities  - 3 — U.S. state, DC, U.S. territory/possession, or their political subdivisions/agencies/instrumentalities  - 4 — Foreign government or its political subdivisions/agencies/instrumentalities  - 5 — Corporation  - 6 — Dealer in securities or commodities required to register in the U.S., DC, or U.S. territory/possession  - 7 — Futures commission merchant registered with the CFTC  - 8 — Real estate investment trust (REIT)  - 9 — Entity registered at all times during the tax year under the Investment Company Act of 1940  - 10 — Common trust fund operated by a bank under §584(a)  - 11 — Financial institution (see §581)  - 12 — Broker (nominee/custodian)  - 13 — Trust exempt under §664 or described in §4947
     *
     * @return self
     */
    public function setExemptPayeeCode($exempt_payee_code)
    {
        $this->container['exempt_payee_code'] = $exempt_payee_code;

        return $this;
    }

    /**
     * Gets exempt_fatca_code
     *
     * @return string|null
     */
    public function getExemptFatcaCode()
    {
        return $this->container['exempt_fatca_code'];
    }

    /**
     * Sets exempt_fatca_code
     *
     * @param string|null $exempt_fatca_code The exemption from FATCA reporting code. Allowed values (A–M):  - A — Tax‑exempt organization under §501(a) or IRA (§7701(a)(37))  - B — U.S. government or any of its agencies/instrumentalities  - C — U.S. state, DC, territory/possession, or their political subdivisions/instrumentalities  - D — Corporation whose stock is regularly traded on an established securities market  - E — Corporation that is a member of the same expanded affiliated group as a D corporation  - F — Registered dealer in securities/commodities/derivatives  - G — REIT (Real Estate Investment Trust)  - H — Regulated investment company (§851) or entity registered all year under the Investment Company Act of 1940  - I — Common trust fund (§584(a))  - J — Bank (§581)  - K — Broker  - L — Charitable remainder trust (§664) or trust described in §4947(a)(1)  - M — Trust under §403(b) plan or §457(g) plan
     *
     * @return self
     */
    public function setExemptFatcaCode($exempt_fatca_code)
    {
        $this->container['exempt_fatca_code'] = $exempt_fatca_code;

        return $this;
    }

    /**
     * Gets foreign_country_indicator
     *
     * @return bool|null
     */
    public function getForeignCountryIndicator()
    {
        return $this->container['foreign_country_indicator'];
    }

    /**
     * Sets foreign_country_indicator
     *
     * @param bool|null $foreign_country_indicator Indicates whether the individual or entity is in a foreign country.
     *
     * @return self
     */
    public function setForeignCountryIndicator($foreign_country_indicator)
    {
        $this->container['foreign_country_indicator'] = $foreign_country_indicator;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address The address of the employee. Required unless exempt.
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets foreign_address
     *
     * @return string|null
     */
    public function getForeignAddress()
    {
        return $this->container['foreign_address'];
    }

    /**
     * Sets foreign_address
     *
     * @param string|null $foreign_address The foreign address of the individual or entity.
     *
     * @return self
     */
    public function setForeignAddress($foreign_address)
    {
        $this->container['foreign_address'] = $foreign_address;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city of residence of the employee. Required unless exempt.
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The state of residence of the employee. Required unless exempt.
     *
     * @return self
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip The ZIP code of residence of the employee. Required unless exempt.
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number The account number associated with the form.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets tin_type
     *
     * @return string
     */
    public function getTinType()
    {
        return $this->container['tin_type'];
    }

    /**
     * Sets tin_type
     *
     * @param string $tin_type Tax Identification Number (TIN) type.
     *
     * @return self
     */
    public function setTinType($tin_type)
    {
        $this->container['tin_type'] = $tin_type;

        return $this;
    }

    /**
     * Gets tin
     *
     * @return string
     */
    public function getTin()
    {
        return $this->container['tin'];
    }

    /**
     * Sets tin
     *
     * @param string $tin The taxpayer identification number (TIN).
     *
     * @return self
     */
    public function setTin($tin)
    {
        $this->container['tin'] = $tin;

        return $this;
    }

    /**
     * Gets backup_withholding
     *
     * @return bool|null
     */
    public function getBackupWithholding()
    {
        return $this->container['backup_withholding'];
    }

    /**
     * Sets backup_withholding
     *
     * @param bool|null $backup_withholding Indicates whether backup withholding applies.
     *
     * @return self
     */
    public function setBackupWithholding($backup_withholding)
    {
        $this->container['backup_withholding'] = $backup_withholding;

        return $this;
    }

    /**
     * Gets is1099able
     *
     * @return bool|null
     */
    public function getIs1099able()
    {
        return $this->container['is1099able'];
    }

    /**
     * Sets is1099able
     *
     * @param bool|null $is1099able Indicates whether the individual or entity should be issued a 1099 form.
     *
     * @return self
     */
    public function setIs1099able($is1099able)
    {
        $this->container['is1099able'] = $is1099able;

        return $this;
    }

    /**
     * Gets e_delivery_consented_at
     *
     * @return \DateTime|null
     */
    public function getEDeliveryConsentedAt()
    {
        return $this->container['e_delivery_consented_at'];
    }

    /**
     * Sets e_delivery_consented_at
     *
     * @param \DateTime|null $e_delivery_consented_at The date when e-delivery was consented.
     *
     * @return self
     */
    public function setEDeliveryConsentedAt($e_delivery_consented_at)
    {
        $this->container['e_delivery_consented_at'] = $e_delivery_consented_at;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature The signature of the form.
     *
     * @return self
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string|null $company_id The ID of the associated company. Required when creating a form.
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id A reference identifier for the form.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of the individual associated with the form.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets citizenship_country
     *
     * @return string
     */
    public function getCitizenshipCountry()
    {
        return $this->container['citizenship_country'];
    }

    /**
     * Sets citizenship_country
     *
     * @param string $citizenship_country The country of citizenship.. Allowed values: US, AF, AX, AL, AG, AQ, AN, AO, AV, AY (and 248 more)
     *
     * @return self
     */
    public function setCitizenshipCountry($citizenship_country)
    {
        $allowedValues = $this->getCitizenshipCountryAllowableValues();
        if (!in_array($citizenship_country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'citizenship_country', must be one of '%s'",
                    $citizenship_country,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['citizenship_country'] = $citizenship_country;

        return $this;
    }

    /**
     * Gets disregarded_entity
     *
     * @return string|null
     */
    public function getDisregardedEntity()
    {
        return $this->container['disregarded_entity'];
    }

    /**
     * Sets disregarded_entity
     *
     * @param string|null $disregarded_entity The name of the disregarded entity receiving the payment (if applicable).
     *
     * @return self
     */
    public function setDisregardedEntity($disregarded_entity)
    {
        $this->container['disregarded_entity'] = $disregarded_entity;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string $entity_type Represents the entity type for tax forms.  Each value corresponds to a specific entity classification.  - 1: Corporation  - 2: Disregarded entity  - 3: Partnership  - 4: Simple trust  - 5: Grantor trust  - 6: Complex trust  - 7: Estate  - 8: Foreign Government - Controlled Entity  - 9: Central Bank of Issue  - 10: Tax-exempt organization  - 11: Private foundation  - 12: International organization  - 13: Foreign Government - Controlled Integral Part
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!in_array($entity_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'entity_type', must be one of '%s'",
                    $entity_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets fatca_status
     *
     * @return string
     */
    public function getFatcaStatus()
    {
        return $this->container['fatca_status'];
    }

    /**
     * Sets fatca_status
     *
     * @param string $fatca_status Represents the FATCA status types for tax forms.  Used for W8-BEN-E forms and FATCA compliance validations.  Values correspond to numeric identifiers used in forms.  - 1: Nonparticipating FFI (including a limited FFI or an FFI related to a Reporting IGA FFI other than a deemed-compliant FFI, participating FFI, or exempt beneficial owner)  - 2: Participating FFI  - 3: Reporting Model 1 FFI  - 4: Reporting Model 2 FFI  - 5: Registered deemed-compliant FFI (other than a reporting Model 1 FFI, sponsored FFI, or nonreporting IGA FFI covered in Part XII)  - 6: Sponsored FFI that has not obtained a GIIN  - 7: Certified deemed-compliant nonregistering local bank  - 8: Certified deemed-compliant FFI with only low-value accounts  - 9: Certified deemed-compliant sponsored, closely held investment vehicle  - 10: Certified deemed-compliant limited life debt investment entity  - 11: Certified deemed-compliant investment advisors and investment managers  - 12: Owner-documented FFI  - 13: Restricted distributor  - 14: Nonreporting IGA FFI  - 15: Foreign government, government of a U.S. possession, or foreign central bank of issue  - 16: International organization  - 17: Exempt retirement plans  - 18: Entity wholly owned by exempt beneficial owners  - 19: Territory financial institution  - 20: Nonfinancial group entity  - 21: Excepted nonfinancial start-up company  - 22: Excepted nonfinancial entity in liquidation or bankruptcy  - 23: 501(c) organization  - 24: Nonprofit organization  - 25: Publicly traded NFFE or NFFE affiliate of a publicly traded corporation  - 26: Excepted territory NFFE  - 27: Active NFFE  - 28: Passive NFFE  - 29: Excepted inter-affiliate FFI  - 30: Direct reporting NFFE  - 31: Sponsored direct reporting NFFE  - 32: Account that is not a financial account
     *
     * @return self
     */
    public function setFatcaStatus($fatca_status)
    {
        $allowedValues = $this->getFatcaStatusAllowableValues();
        if (!in_array($fatca_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fatca_status', must be one of '%s'",
                    $fatca_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fatca_status'] = $fatca_status;

        return $this;
    }

    /**
     * Gets residence_address
     *
     * @return string|null
     */
    public function getResidenceAddress()
    {
        return $this->container['residence_address'];
    }

    /**
     * Sets residence_address
     *
     * @param string|null $residence_address The residential address of the individual or entity.
     *
     * @return self
     */
    public function setResidenceAddress($residence_address)
    {
        $this->container['residence_address'] = $residence_address;

        return $this;
    }

    /**
     * Gets residence_city
     *
     * @return string|null
     */
    public function getResidenceCity()
    {
        return $this->container['residence_city'];
    }

    /**
     * Sets residence_city
     *
     * @param string|null $residence_city The city of residence.
     *
     * @return self
     */
    public function setResidenceCity($residence_city)
    {
        $this->container['residence_city'] = $residence_city;

        return $this;
    }

    /**
     * Gets residence_state
     *
     * @return string|null
     */
    public function getResidenceState()
    {
        return $this->container['residence_state'];
    }

    /**
     * Sets residence_state
     *
     * @param string|null $residence_state The state of residence. Required for US and Canada.. Allowed values: AA, AE, AK, AL, AP, AR, AS, AZ, CA, CO (and 65 more)
     *
     * @return self
     */
    public function setResidenceState($residence_state)
    {
        $allowedValues = $this->getResidenceStateAllowableValues();
        if (!is_null($residence_state) && !in_array($residence_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'residence_state', must be one of '%s'",
                    $residence_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['residence_state'] = $residence_state;

        return $this;
    }

    /**
     * Gets residence_zip
     *
     * @return string|null
     */
    public function getResidenceZip()
    {
        return $this->container['residence_zip'];
    }

    /**
     * Sets residence_zip
     *
     * @param string|null $residence_zip The ZIP code of the residence.
     *
     * @return self
     */
    public function setResidenceZip($residence_zip)
    {
        $this->container['residence_zip'] = $residence_zip;

        return $this;
    }

    /**
     * Gets residence_country
     *
     * @return string
     */
    public function getResidenceCountry()
    {
        return $this->container['residence_country'];
    }

    /**
     * Sets residence_country
     *
     * @param string $residence_country The country of residence.. Allowed values: US, AF, AX, AL, AG, AQ, AN, AO, AV, AY (and 248 more)
     *
     * @return self
     */
    public function setResidenceCountry($residence_country)
    {
        $allowedValues = $this->getResidenceCountryAllowableValues();
        if (!in_array($residence_country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'residence_country', must be one of '%s'",
                    $residence_country,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['residence_country'] = $residence_country;

        return $this;
    }

    /**
     * Gets residence_is_mailing
     *
     * @return bool|null
     */
    public function getResidenceIsMailing()
    {
        return $this->container['residence_is_mailing'];
    }

    /**
     * Sets residence_is_mailing
     *
     * @param bool|null $residence_is_mailing Indicates whether the residence address is the mailing address.
     *
     * @return self
     */
    public function setResidenceIsMailing($residence_is_mailing)
    {
        $this->container['residence_is_mailing'] = $residence_is_mailing;

        return $this;
    }

    /**
     * Gets mailing_address
     *
     * @return string|null
     */
    public function getMailingAddress()
    {
        return $this->container['mailing_address'];
    }

    /**
     * Sets mailing_address
     *
     * @param string|null $mailing_address The mailing address.
     *
     * @return self
     */
    public function setMailingAddress($mailing_address)
    {
        $this->container['mailing_address'] = $mailing_address;

        return $this;
    }

    /**
     * Gets mailing_city
     *
     * @return string|null
     */
    public function getMailingCity()
    {
        return $this->container['mailing_city'];
    }

    /**
     * Sets mailing_city
     *
     * @param string|null $mailing_city The city of the mailing address.
     *
     * @return self
     */
    public function setMailingCity($mailing_city)
    {
        $this->container['mailing_city'] = $mailing_city;

        return $this;
    }

    /**
     * Gets mailing_state
     *
     * @return string|null
     */
    public function getMailingState()
    {
        return $this->container['mailing_state'];
    }

    /**
     * Sets mailing_state
     *
     * @param string|null $mailing_state The state of the mailing address. Required for US and Canada.. Allowed values: AA, AE, AK, AL, AP, AR, AS, AZ, CA, CO (and 65 more)
     *
     * @return self
     */
    public function setMailingState($mailing_state)
    {
        $allowedValues = $this->getMailingStateAllowableValues();
        if (!is_null($mailing_state) && !in_array($mailing_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mailing_state', must be one of '%s'",
                    $mailing_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mailing_state'] = $mailing_state;

        return $this;
    }

    /**
     * Gets mailing_zip
     *
     * @return string|null
     */
    public function getMailingZip()
    {
        return $this->container['mailing_zip'];
    }

    /**
     * Sets mailing_zip
     *
     * @param string|null $mailing_zip The ZIP code of the mailing address.
     *
     * @return self
     */
    public function setMailingZip($mailing_zip)
    {
        $this->container['mailing_zip'] = $mailing_zip;

        return $this;
    }

    /**
     * Gets mailing_country
     *
     * @return string
     */
    public function getMailingCountry()
    {
        return $this->container['mailing_country'];
    }

    /**
     * Sets mailing_country
     *
     * @param string $mailing_country The country of the mailing address.. Allowed values: US, AF, AX, AL, AG, AQ, AN, AO, AV, AY (and 248 more)
     *
     * @return self
     */
    public function setMailingCountry($mailing_country)
    {
        $allowedValues = $this->getMailingCountryAllowableValues();
        if (!in_array($mailing_country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mailing_country', must be one of '%s'",
                    $mailing_country,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mailing_country'] = $mailing_country;

        return $this;
    }

    /**
     * Gets giin
     *
     * @return string|null
     */
    public function getGiin()
    {
        return $this->container['giin'];
    }

    /**
     * Sets giin
     *
     * @param string|null $giin The global intermediary identification number (GIIN).
     *
     * @return self
     */
    public function setGiin($giin)
    {
        $this->container['giin'] = $giin;

        return $this;
    }

    /**
     * Gets foreign_tin
     *
     * @return string|null
     */
    public function getForeignTin()
    {
        return $this->container['foreign_tin'];
    }

    /**
     * Sets foreign_tin
     *
     * @param string|null $foreign_tin The foreign taxpayer identification number (TIN).
     *
     * @return self
     */
    public function setForeignTin($foreign_tin)
    {
        $this->container['foreign_tin'] = $foreign_tin;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number A reference number for the form.
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets disregarded_entity_fatca_status
     *
     * @return string|null
     */
    public function getDisregardedEntityFatcaStatus()
    {
        return $this->container['disregarded_entity_fatca_status'];
    }

    /**
     * Sets disregarded_entity_fatca_status
     *
     * @param string|null $disregarded_entity_fatca_status The FATCA status of disregarded entity or branch receiving payment.  Available values:  - 1: Branch treated as nonparticipating FFI  - 2: U.S. Branch  - 3: Participating FFI  - 4: Reporting Model 1 FFI  - 5: Reporting Model 2 FFI
     *
     * @return self
     */
    public function setDisregardedEntityFatcaStatus($disregarded_entity_fatca_status)
    {
        $allowedValues = $this->getDisregardedEntityFatcaStatusAllowableValues();
        if (!is_null($disregarded_entity_fatca_status) && !in_array($disregarded_entity_fatca_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'disregarded_entity_fatca_status', must be one of '%s'",
                    $disregarded_entity_fatca_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['disregarded_entity_fatca_status'] = $disregarded_entity_fatca_status;

        return $this;
    }

    /**
     * Gets disregarded_address
     *
     * @return string|null
     */
    public function getDisregardedAddress()
    {
        return $this->container['disregarded_address'];
    }

    /**
     * Sets disregarded_address
     *
     * @param string|null $disregarded_address The address for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedAddress($disregarded_address)
    {
        $this->container['disregarded_address'] = $disregarded_address;

        return $this;
    }

    /**
     * Gets disregarded_city
     *
     * @return string|null
     */
    public function getDisregardedCity()
    {
        return $this->container['disregarded_city'];
    }

    /**
     * Sets disregarded_city
     *
     * @param string|null $disregarded_city The city for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedCity($disregarded_city)
    {
        $this->container['disregarded_city'] = $disregarded_city;

        return $this;
    }

    /**
     * Gets disregarded_state
     *
     * @return string|null
     */
    public function getDisregardedState()
    {
        return $this->container['disregarded_state'];
    }

    /**
     * Sets disregarded_state
     *
     * @param string|null $disregarded_state The state for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedState($disregarded_state)
    {
        $allowedValues = $this->getDisregardedStateAllowableValues();
        if (!is_null($disregarded_state) && !in_array($disregarded_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'disregarded_state', must be one of '%s'",
                    $disregarded_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['disregarded_state'] = $disregarded_state;

        return $this;
    }

    /**
     * Gets disregarded_zip
     *
     * @return string|null
     */
    public function getDisregardedZip()
    {
        return $this->container['disregarded_zip'];
    }

    /**
     * Sets disregarded_zip
     *
     * @param string|null $disregarded_zip The ZIP code for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedZip($disregarded_zip)
    {
        $this->container['disregarded_zip'] = $disregarded_zip;

        return $this;
    }

    /**
     * Gets disregarded_country
     *
     * @return string|null
     */
    public function getDisregardedCountry()
    {
        return $this->container['disregarded_country'];
    }

    /**
     * Sets disregarded_country
     *
     * @param string|null $disregarded_country The country for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedCountry($disregarded_country)
    {
        $this->container['disregarded_country'] = $disregarded_country;

        return $this;
    }

    /**
     * Gets disregarded_entity_giin
     *
     * @return string|null
     */
    public function getDisregardedEntityGiin()
    {
        return $this->container['disregarded_entity_giin'];
    }

    /**
     * Sets disregarded_entity_giin
     *
     * @param string|null $disregarded_entity_giin The GIIN for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedEntityGiin($disregarded_entity_giin)
    {
        $this->container['disregarded_entity_giin'] = $disregarded_entity_giin;

        return $this;
    }

    /**
     * Gets qualified_intermediary_certification
     *
     * @return bool|null
     */
    public function getQualifiedIntermediaryCertification()
    {
        return $this->container['qualified_intermediary_certification'];
    }

    /**
     * Sets qualified_intermediary_certification
     *
     * @param bool|null $qualified_intermediary_certification Certifies that the entity is a Qualified Intermediary (QI) acting in accordance with its QI Agreement,  providing required withholding statements and documentation for relevant tax withholding purposes.
     *
     * @return self
     */
    public function setQualifiedIntermediaryCertification($qualified_intermediary_certification)
    {
        $this->container['qualified_intermediary_certification'] = $qualified_intermediary_certification;

        return $this;
    }

    /**
     * Gets qi_primary_withholding_responsibility_certification
     *
     * @return bool|null
     */
    public function getQiPrimaryWithholdingResponsibilityCertification()
    {
        return $this->container['qi_primary_withholding_responsibility_certification'];
    }

    /**
     * Sets qi_primary_withholding_responsibility_certification
     *
     * @param bool|null $qi_primary_withholding_responsibility_certification Certifies that the Qualified Intermediary assumes primary withholding responsibility  under chapters 3 and 4 for the specified accounts.
     *
     * @return self
     */
    public function setQiPrimaryWithholdingResponsibilityCertification($qi_primary_withholding_responsibility_certification)
    {
        $this->container['qi_primary_withholding_responsibility_certification'] = $qi_primary_withholding_responsibility_certification;

        return $this;
    }

    /**
     * Gets qi_withholding_responsibility_for_ptp_sales_certification
     *
     * @return bool|null
     */
    public function getQiWithholdingResponsibilityForPtpSalesCertification()
    {
        return $this->container['qi_withholding_responsibility_for_ptp_sales_certification'];
    }

    /**
     * Sets qi_withholding_responsibility_for_ptp_sales_certification
     *
     * @param bool|null $qi_withholding_responsibility_for_ptp_sales_certification Certifies that the Qualified Intermediary assumes primary withholding and reporting responsibility under section 1446(f)  for amounts realized from sales of interests in publicly traded partnerships.
     *
     * @return self
     */
    public function setQiWithholdingResponsibilityForPtpSalesCertification($qi_withholding_responsibility_for_ptp_sales_certification)
    {
        $this->container['qi_withholding_responsibility_for_ptp_sales_certification'] = $qi_withholding_responsibility_for_ptp_sales_certification;

        return $this;
    }

    /**
     * Gets qi_nominee_withholding_responsibility_for_ptp_distributions_certification
     *
     * @return bool|null
     */
    public function getQiNomineeWithholdingResponsibilityForPtpDistributionsCertification()
    {
        return $this->container['qi_nominee_withholding_responsibility_for_ptp_distributions_certification'];
    }

    /**
     * Sets qi_nominee_withholding_responsibility_for_ptp_distributions_certification
     *
     * @param bool|null $qi_nominee_withholding_responsibility_for_ptp_distributions_certification Certifies that the Qualified Intermediary assumes primary withholding responsibility as a nominee  under Regulations section 1.1446-4(b)(3) for publicly traded partnership distributions.
     *
     * @return self
     */
    public function setQiNomineeWithholdingResponsibilityForPtpDistributionsCertification($qi_nominee_withholding_responsibility_for_ptp_distributions_certification)
    {
        $this->container['qi_nominee_withholding_responsibility_for_ptp_distributions_certification'] = $qi_nominee_withholding_responsibility_for_ptp_distributions_certification;

        return $this;
    }

    /**
     * Gets qi_securities_lender_substitute_dividend_withholding_certification
     *
     * @return bool|null
     */
    public function getQiSecuritiesLenderSubstituteDividendWithholdingCertification()
    {
        return $this->container['qi_securities_lender_substitute_dividend_withholding_certification'];
    }

    /**
     * Sets qi_securities_lender_substitute_dividend_withholding_certification
     *
     * @param bool|null $qi_securities_lender_substitute_dividend_withholding_certification Certifies that the Qualified Intermediary is acting as a qualified securities lender and assumes primary withholding  and reporting responsibilities for U.S. source substitute dividend payments.
     *
     * @return self
     */
    public function setQiSecuritiesLenderSubstituteDividendWithholdingCertification($qi_securities_lender_substitute_dividend_withholding_certification)
    {
        $this->container['qi_securities_lender_substitute_dividend_withholding_certification'] = $qi_securities_lender_substitute_dividend_withholding_certification;

        return $this;
    }

    /**
     * Gets qi_withholding_and1099_reporting_responsibility_certification
     *
     * @return bool|null
     */
    public function getQiWithholdingAnd1099ReportingResponsibilityCertification()
    {
        return $this->container['qi_withholding_and1099_reporting_responsibility_certification'];
    }

    /**
     * Sets qi_withholding_and1099_reporting_responsibility_certification
     *
     * @param bool|null $qi_withholding_and1099_reporting_responsibility_certification Certifies that the Qualified Intermediary assumes primary withholding under chapters 3 and 4, and primary Form 1099 reporting  and backup withholding responsibility for U.S. source interest and substitute interest payments.
     *
     * @return self
     */
    public function setQiWithholdingAnd1099ReportingResponsibilityCertification($qi_withholding_and1099_reporting_responsibility_certification)
    {
        $this->container['qi_withholding_and1099_reporting_responsibility_certification'] = $qi_withholding_and1099_reporting_responsibility_certification;

        return $this;
    }

    /**
     * Gets qi_form1099_or_fatca_reporting_responsibility_certification
     *
     * @return bool|null
     */
    public function getQiForm1099OrFatcaReportingResponsibilityCertification()
    {
        return $this->container['qi_form1099_or_fatca_reporting_responsibility_certification'];
    }

    /**
     * Sets qi_form1099_or_fatca_reporting_responsibility_certification
     *
     * @param bool|null $qi_form1099_or_fatca_reporting_responsibility_certification Certifies that the Qualified Intermediary assumes Form 1099 reporting and backup withholding responsibility,  or FATCA reporting responsibility as a participating or registered deemed-compliant FFI,  for accounts held by specified U.S. persons.
     *
     * @return self
     */
    public function setQiForm1099OrFatcaReportingResponsibilityCertification($qi_form1099_or_fatca_reporting_responsibility_certification)
    {
        $this->container['qi_form1099_or_fatca_reporting_responsibility_certification'] = $qi_form1099_or_fatca_reporting_responsibility_certification;

        return $this;
    }

    /**
     * Gets qi_opt_out_of_form1099_reporting_certification
     *
     * @return bool|null
     */
    public function getQiOptOutOfForm1099ReportingCertification()
    {
        return $this->container['qi_opt_out_of_form1099_reporting_certification'];
    }

    /**
     * Sets qi_opt_out_of_form1099_reporting_certification
     *
     * @param bool|null $qi_opt_out_of_form1099_reporting_certification Certifies that the Qualified Intermediary does not assume primary Form 1099 reporting  and backup withholding responsibility for the accounts associated with this form.
     *
     * @return self
     */
    public function setQiOptOutOfForm1099ReportingCertification($qi_opt_out_of_form1099_reporting_certification)
    {
        $this->container['qi_opt_out_of_form1099_reporting_certification'] = $qi_opt_out_of_form1099_reporting_certification;

        return $this;
    }

    /**
     * Gets qi_withholding_rate_pool_certification
     *
     * @return bool|null
     */
    public function getQiWithholdingRatePoolCertification()
    {
        return $this->container['qi_withholding_rate_pool_certification'];
    }

    /**
     * Sets qi_withholding_rate_pool_certification
     *
     * @param bool|null $qi_withholding_rate_pool_certification Certifies that the Qualified Intermediary meets the requirements for allocating payments  to a chapter 4 withholding rate pool of U.S. payees under Regulations section 1.6049-4(c)(4)(iii).
     *
     * @return self
     */
    public function setQiWithholdingRatePoolCertification($qi_withholding_rate_pool_certification)
    {
        $this->container['qi_withholding_rate_pool_certification'] = $qi_withholding_rate_pool_certification;

        return $this;
    }

    /**
     * Gets qi_intermediary_or_flow_through_entity_documentation_certification
     *
     * @return bool|null
     */
    public function getQiIntermediaryOrFlowThroughEntityDocumentationCertification()
    {
        return $this->container['qi_intermediary_or_flow_through_entity_documentation_certification'];
    }

    /**
     * Sets qi_intermediary_or_flow_through_entity_documentation_certification
     *
     * @param bool|null $qi_intermediary_or_flow_through_entity_documentation_certification Certifies that the Qualified Intermediary has obtained or will obtain documentation confirming the status of any intermediary  or flow-through entity as a participating FFI, registered deemed-compliant FFI,  or QI for U.S. payees in a chapter 4 withholding rate pool.
     *
     * @return self
     */
    public function setQiIntermediaryOrFlowThroughEntityDocumentationCertification($qi_intermediary_or_flow_through_entity_documentation_certification)
    {
        $this->container['qi_intermediary_or_flow_through_entity_documentation_certification'] = $qi_intermediary_or_flow_through_entity_documentation_certification;

        return $this;
    }

    /**
     * Gets qualified_derivatives_dealer_certification
     *
     * @return bool|null
     */
    public function getQualifiedDerivativesDealerCertification()
    {
        return $this->container['qualified_derivatives_dealer_certification'];
    }

    /**
     * Sets qualified_derivatives_dealer_certification
     *
     * @param bool|null $qualified_derivatives_dealer_certification Certifies that the Qualified Derivatives Dealer (QDD) is approved by the IRS and assumes primary withholding  and reporting responsibilities for payments related to potential section 871(m) transactions.
     *
     * @return self
     */
    public function setQualifiedDerivativesDealerCertification($qualified_derivatives_dealer_certification)
    {
        $this->container['qualified_derivatives_dealer_certification'] = $qualified_derivatives_dealer_certification;

        return $this;
    }

    /**
     * Gets qdd_corporation
     *
     * @return bool|null
     */
    public function getQddCorporation()
    {
        return $this->container['qdd_corporation'];
    }

    /**
     * Sets qdd_corporation
     *
     * @param bool|null $qdd_corporation Indicates QDD classification is Corporation.
     *
     * @return self
     */
    public function setQddCorporation($qdd_corporation)
    {
        $this->container['qdd_corporation'] = $qdd_corporation;

        return $this;
    }

    /**
     * Gets qdd_partnership
     *
     * @return bool|null
     */
    public function getQddPartnership()
    {
        return $this->container['qdd_partnership'];
    }

    /**
     * Sets qdd_partnership
     *
     * @param bool|null $qdd_partnership Indicates QDD classification is Partnership.
     *
     * @return self
     */
    public function setQddPartnership($qdd_partnership)
    {
        $this->container['qdd_partnership'] = $qdd_partnership;

        return $this;
    }

    /**
     * Gets qdd_disregarded_entity
     *
     * @return bool|null
     */
    public function getQddDisregardedEntity()
    {
        return $this->container['qdd_disregarded_entity'];
    }

    /**
     * Sets qdd_disregarded_entity
     *
     * @param bool|null $qdd_disregarded_entity Indicates QDD classification is Disregarded Entity.
     *
     * @return self
     */
    public function setQddDisregardedEntity($qdd_disregarded_entity)
    {
        $this->container['qdd_disregarded_entity'] = $qdd_disregarded_entity;

        return $this;
    }

    /**
     * Gets nonqualified_intermediary_certification
     *
     * @return bool|null
     */
    public function getNonqualifiedIntermediaryCertification()
    {
        return $this->container['nonqualified_intermediary_certification'];
    }

    /**
     * Sets nonqualified_intermediary_certification
     *
     * @param bool|null $nonqualified_intermediary_certification Certifies that the entity is not acting as a Qualified Intermediary  and is not acting for its own account for the accounts covered by this form.
     *
     * @return self
     */
    public function setNonqualifiedIntermediaryCertification($nonqualified_intermediary_certification)
    {
        $this->container['nonqualified_intermediary_certification'] = $nonqualified_intermediary_certification;

        return $this;
    }

    /**
     * Gets nqi_withholding_statement_transmission_certification
     *
     * @return bool|null
     */
    public function getNqiWithholdingStatementTransmissionCertification()
    {
        return $this->container['nqi_withholding_statement_transmission_certification'];
    }

    /**
     * Sets nqi_withholding_statement_transmission_certification
     *
     * @param bool|null $nqi_withholding_statement_transmission_certification Certifies that the nonqualified intermediary is submitting this form to transmit withholding certificates  and/or other required documentation along with a withholding statement.
     *
     * @return self
     */
    public function setNqiWithholdingStatementTransmissionCertification($nqi_withholding_statement_transmission_certification)
    {
        $this->container['nqi_withholding_statement_transmission_certification'] = $nqi_withholding_statement_transmission_certification;

        return $this;
    }

    /**
     * Gets nqi_withholding_rate_pool_compliance_certification
     *
     * @return bool|null
     */
    public function getNqiWithholdingRatePoolComplianceCertification()
    {
        return $this->container['nqi_withholding_rate_pool_compliance_certification'];
    }

    /**
     * Sets nqi_withholding_rate_pool_compliance_certification
     *
     * @param bool|null $nqi_withholding_rate_pool_compliance_certification Certifies that the nonqualified intermediary meets the requirements of Regulations section 1.6049-4(c)(4)(iii)  for U.S. payees included in a withholding rate pool, excluding publicly traded partnership distributions.
     *
     * @return self
     */
    public function setNqiWithholdingRatePoolComplianceCertification($nqi_withholding_rate_pool_compliance_certification)
    {
        $this->container['nqi_withholding_rate_pool_compliance_certification'] = $nqi_withholding_rate_pool_compliance_certification;

        return $this;
    }

    /**
     * Gets nqi_qualified_securities_lender_certification
     *
     * @return bool|null
     */
    public function getNqiQualifiedSecuritiesLenderCertification()
    {
        return $this->container['nqi_qualified_securities_lender_certification'];
    }

    /**
     * Sets nqi_qualified_securities_lender_certification
     *
     * @param bool|null $nqi_qualified_securities_lender_certification Certifies that the nonqualified intermediary is acting as a qualified securities lender (not as a QI)  and assumes primary withholding and reporting responsibilities for U.S. source substitute dividend payments.
     *
     * @return self
     */
    public function setNqiQualifiedSecuritiesLenderCertification($nqi_qualified_securities_lender_certification)
    {
        $this->container['nqi_qualified_securities_lender_certification'] = $nqi_qualified_securities_lender_certification;

        return $this;
    }

    /**
     * Gets nqi_alternative_withholding_statement_verification_certification
     *
     * @return bool|null
     */
    public function getNqiAlternativeWithholdingStatementVerificationCertification()
    {
        return $this->container['nqi_alternative_withholding_statement_verification_certification'];
    }

    /**
     * Sets nqi_alternative_withholding_statement_verification_certification
     *
     * @param bool|null $nqi_alternative_withholding_statement_verification_certification Certifies that the nonqualified intermediary has verified, or will verify,  all information on alternative withholding statements for consistency with account data to determine the correct withholding rate,  as required under sections 1441 or 1471.
     *
     * @return self
     */
    public function setNqiAlternativeWithholdingStatementVerificationCertification($nqi_alternative_withholding_statement_verification_certification)
    {
        $this->container['nqi_alternative_withholding_statement_verification_certification'] = $nqi_alternative_withholding_statement_verification_certification;

        return $this;
    }

    /**
     * Gets territory_financial_institution_certification
     *
     * @return bool|null
     */
    public function getTerritoryFinancialInstitutionCertification()
    {
        return $this->container['territory_financial_institution_certification'];
    }

    /**
     * Sets territory_financial_institution_certification
     *
     * @param bool|null $territory_financial_institution_certification Certifies that the entity is a financial institution (other than an investment entity) that is incorporated  or organized under the laws of a possession of the United States.
     *
     * @return self
     */
    public function setTerritoryFinancialInstitutionCertification($territory_financial_institution_certification)
    {
        $this->container['territory_financial_institution_certification'] = $territory_financial_institution_certification;

        return $this;
    }

    /**
     * Gets tfi_treated_as_us_person_certification
     *
     * @return bool|null
     */
    public function getTfiTreatedAsUsPersonCertification()
    {
        return $this->container['tfi_treated_as_us_person_certification'];
    }

    /**
     * Sets tfi_treated_as_us_person_certification
     *
     * @param bool|null $tfi_treated_as_us_person_certification Certifies that the territory financial institution agrees to be treated as a U.S. person  for chapters 3 and 4 purposes concerning reportable amounts and withholdable payments.
     *
     * @return self
     */
    public function setTfiTreatedAsUsPersonCertification($tfi_treated_as_us_person_certification)
    {
        $this->container['tfi_treated_as_us_person_certification'] = $tfi_treated_as_us_person_certification;

        return $this;
    }

    /**
     * Gets tfi_withholding_statement_transmission_certification
     *
     * @return bool|null
     */
    public function getTfiWithholdingStatementTransmissionCertification()
    {
        return $this->container['tfi_withholding_statement_transmission_certification'];
    }

    /**
     * Sets tfi_withholding_statement_transmission_certification
     *
     * @param bool|null $tfi_withholding_statement_transmission_certification Certifies that the territory financial institution is transmitting withholding certificates or other required documentation  and has provided or will provide a withholding statement for reportable or withholdable payments.
     *
     * @return self
     */
    public function setTfiWithholdingStatementTransmissionCertification($tfi_withholding_statement_transmission_certification)
    {
        $this->container['tfi_withholding_statement_transmission_certification'] = $tfi_withholding_statement_transmission_certification;

        return $this;
    }

    /**
     * Gets tfi_treated_as_us_person_for_ptp_sales_certification
     *
     * @return bool|null
     */
    public function getTfiTreatedAsUsPersonForPtpSalesCertification()
    {
        return $this->container['tfi_treated_as_us_person_for_ptp_sales_certification'];
    }

    /**
     * Sets tfi_treated_as_us_person_for_ptp_sales_certification
     *
     * @param bool|null $tfi_treated_as_us_person_for_ptp_sales_certification Certifies that the territory financial institution agrees to be treated as a U.S. person  under Regulations section 1.1446(f)-4(a)(2)(i)(B) for amounts realized from sales of publicly traded partnership interests.
     *
     * @return self
     */
    public function setTfiTreatedAsUsPersonForPtpSalesCertification($tfi_treated_as_us_person_for_ptp_sales_certification)
    {
        $this->container['tfi_treated_as_us_person_for_ptp_sales_certification'] = $tfi_treated_as_us_person_for_ptp_sales_certification;

        return $this;
    }

    /**
     * Gets tfi_nominee_us_person_for_ptp_distributions_certification
     *
     * @return bool|null
     */
    public function getTfiNomineeUsPersonForPtpDistributionsCertification()
    {
        return $this->container['tfi_nominee_us_person_for_ptp_distributions_certification'];
    }

    /**
     * Sets tfi_nominee_us_person_for_ptp_distributions_certification
     *
     * @param bool|null $tfi_nominee_us_person_for_ptp_distributions_certification Certifies that the territory financial institution agrees to be treated as a U.S. person  and as a nominee for purposes of publicly traded partnership distributions under the applicable regulations.
     *
     * @return self
     */
    public function setTfiNomineeUsPersonForPtpDistributionsCertification($tfi_nominee_us_person_for_ptp_distributions_certification)
    {
        $this->container['tfi_nominee_us_person_for_ptp_distributions_certification'] = $tfi_nominee_us_person_for_ptp_distributions_certification;

        return $this;
    }

    /**
     * Gets tfi_not_nominee_for_ptp_distributions_certification
     *
     * @return bool|null
     */
    public function getTfiNotNomineeForPtpDistributionsCertification()
    {
        return $this->container['tfi_not_nominee_for_ptp_distributions_certification'];
    }

    /**
     * Sets tfi_not_nominee_for_ptp_distributions_certification
     *
     * @param bool|null $tfi_not_nominee_for_ptp_distributions_certification Certifies that the territory financial institution is not acting as a nominee for publicly traded partnership distributions  and is providing withholding statements for those distributions.
     *
     * @return self
     */
    public function setTfiNotNomineeForPtpDistributionsCertification($tfi_not_nominee_for_ptp_distributions_certification)
    {
        $this->container['tfi_not_nominee_for_ptp_distributions_certification'] = $tfi_not_nominee_for_ptp_distributions_certification;

        return $this;
    }

    /**
     * Gets us_branch_non_effectively_connected_income_certification
     *
     * @return bool|null
     */
    public function getUsBranchNonEffectivelyConnectedIncomeCertification()
    {
        return $this->container['us_branch_non_effectively_connected_income_certification'];
    }

    /**
     * Sets us_branch_non_effectively_connected_income_certification
     *
     * @param bool|null $us_branch_non_effectively_connected_income_certification Certifies that the U.S. branch is receiving reportable or withholdable payments  that are not effectively connected income, PTP distributions, or proceeds from PTP sales.
     *
     * @return self
     */
    public function setUsBranchNonEffectivelyConnectedIncomeCertification($us_branch_non_effectively_connected_income_certification)
    {
        $this->container['us_branch_non_effectively_connected_income_certification'] = $us_branch_non_effectively_connected_income_certification;

        return $this;
    }

    /**
     * Gets us_branch_agreement_to_be_treated_as_us_person_certification
     *
     * @return bool|null
     */
    public function getUsBranchAgreementToBeTreatedAsUsPersonCertification()
    {
        return $this->container['us_branch_agreement_to_be_treated_as_us_person_certification'];
    }

    /**
     * Sets us_branch_agreement_to_be_treated_as_us_person_certification
     *
     * @param bool|null $us_branch_agreement_to_be_treated_as_us_person_certification Certifies that the U.S. branch of a foreign bank or insurance company agrees to be treated as a U.S. person  for reportable amounts or withholdable payments under the applicable regulations.
     *
     * @return self
     */
    public function setUsBranchAgreementToBeTreatedAsUsPersonCertification($us_branch_agreement_to_be_treated_as_us_person_certification)
    {
        $this->container['us_branch_agreement_to_be_treated_as_us_person_certification'] = $us_branch_agreement_to_be_treated_as_us_person_certification;

        return $this;
    }

    /**
     * Gets us_branch_withholding_statement_and_compliance_certification
     *
     * @return bool|null
     */
    public function getUsBranchWithholdingStatementAndComplianceCertification()
    {
        return $this->container['us_branch_withholding_statement_and_compliance_certification'];
    }

    /**
     * Sets us_branch_withholding_statement_and_compliance_certification
     *
     * @param bool|null $us_branch_withholding_statement_and_compliance_certification Certifies that the U.S. branch is transmitting required documentation  and withholding statements for reportable or withholdable payments and is applying the appropriate FATCA regulations.
     *
     * @return self
     */
    public function setUsBranchWithholdingStatementAndComplianceCertification($us_branch_withholding_statement_and_compliance_certification)
    {
        $this->container['us_branch_withholding_statement_and_compliance_certification'] = $us_branch_withholding_statement_and_compliance_certification;

        return $this;
    }

    /**
     * Gets us_branch_acting_as_us_person_for_ptp_sales_certification
     *
     * @return bool|null
     */
    public function getUsBranchActingAsUsPersonForPtpSalesCertification()
    {
        return $this->container['us_branch_acting_as_us_person_for_ptp_sales_certification'];
    }

    /**
     * Sets us_branch_acting_as_us_person_for_ptp_sales_certification
     *
     * @param bool|null $us_branch_acting_as_us_person_for_ptp_sales_certification Certifies that the U.S. branch is acting as a U.S. person  for purposes of amounts realized from sales of publicly traded partnership interests under the applicable regulations.
     *
     * @return self
     */
    public function setUsBranchActingAsUsPersonForPtpSalesCertification($us_branch_acting_as_us_person_for_ptp_sales_certification)
    {
        $this->container['us_branch_acting_as_us_person_for_ptp_sales_certification'] = $us_branch_acting_as_us_person_for_ptp_sales_certification;

        return $this;
    }

    /**
     * Gets us_branch_nominee_for_ptp_distributions_certification
     *
     * @return bool|null
     */
    public function getUsBranchNomineeForPtpDistributionsCertification()
    {
        return $this->container['us_branch_nominee_for_ptp_distributions_certification'];
    }

    /**
     * Sets us_branch_nominee_for_ptp_distributions_certification
     *
     * @param bool|null $us_branch_nominee_for_ptp_distributions_certification Certifies that the U.S. branch is treated as a U.S. person  and as a nominee for publicly traded partnership distributions under the applicable regulations.
     *
     * @return self
     */
    public function setUsBranchNomineeForPtpDistributionsCertification($us_branch_nominee_for_ptp_distributions_certification)
    {
        $this->container['us_branch_nominee_for_ptp_distributions_certification'] = $us_branch_nominee_for_ptp_distributions_certification;

        return $this;
    }

    /**
     * Gets us_branch_not_nominee_for_ptp_distributions_certification
     *
     * @return bool|null
     */
    public function getUsBranchNotNomineeForPtpDistributionsCertification()
    {
        return $this->container['us_branch_not_nominee_for_ptp_distributions_certification'];
    }

    /**
     * Sets us_branch_not_nominee_for_ptp_distributions_certification
     *
     * @param bool|null $us_branch_not_nominee_for_ptp_distributions_certification Certifies that the U.S. branch is not acting as a nominee for publicly traded partnership distributions  and is providing the required withholding statements.
     *
     * @return self
     */
    public function setUsBranchNotNomineeForPtpDistributionsCertification($us_branch_not_nominee_for_ptp_distributions_certification)
    {
        $this->container['us_branch_not_nominee_for_ptp_distributions_certification'] = $us_branch_not_nominee_for_ptp_distributions_certification;

        return $this;
    }

    /**
     * Gets withholding_foreign_partnership_or_trust_certification
     *
     * @return bool|null
     */
    public function getWithholdingForeignPartnershipOrTrustCertification()
    {
        return $this->container['withholding_foreign_partnership_or_trust_certification'];
    }

    /**
     * Sets withholding_foreign_partnership_or_trust_certification
     *
     * @param bool|null $withholding_foreign_partnership_or_trust_certification Certifies that the entity is a withholding foreign partnership (WP) or a withholding foreign trust (WT)  that is compliant with the terms of its WP or WT agreement.
     *
     * @return self
     */
    public function setWithholdingForeignPartnershipOrTrustCertification($withholding_foreign_partnership_or_trust_certification)
    {
        $this->container['withholding_foreign_partnership_or_trust_certification'] = $withholding_foreign_partnership_or_trust_certification;

        return $this;
    }

    /**
     * Gets nonwithholding_foreign_entity_withholding_statement_certification
     *
     * @return bool|null
     */
    public function getNonwithholdingForeignEntityWithholdingStatementCertification()
    {
        return $this->container['nonwithholding_foreign_entity_withholding_statement_certification'];
    }

    /**
     * Sets nonwithholding_foreign_entity_withholding_statement_certification
     *
     * @param bool|null $nonwithholding_foreign_entity_withholding_statement_certification Certifies that the entity is a nonwithholding foreign partnership or trust,  providing the form for non-effectively connected payments and transmitting required withholding documentation for chapters 3 and 4.
     *
     * @return self
     */
    public function setNonwithholdingForeignEntityWithholdingStatementCertification($nonwithholding_foreign_entity_withholding_statement_certification)
    {
        $this->container['nonwithholding_foreign_entity_withholding_statement_certification'] = $nonwithholding_foreign_entity_withholding_statement_certification;

        return $this;
    }

    /**
     * Gets foreign_entity_partner_in_lower_tier_partnership_certification
     *
     * @return bool|null
     */
    public function getForeignEntityPartnerInLowerTierPartnershipCertification()
    {
        return $this->container['foreign_entity_partner_in_lower_tier_partnership_certification'];
    }

    /**
     * Sets foreign_entity_partner_in_lower_tier_partnership_certification
     *
     * @param bool|null $foreign_entity_partner_in_lower_tier_partnership_certification Certifies that the entity is a foreign partnership or grantor trust acting as a partner in a lower-tier partnership  and is submitting the form for purposes of section 1446(a).
     *
     * @return self
     */
    public function setForeignEntityPartnerInLowerTierPartnershipCertification($foreign_entity_partner_in_lower_tier_partnership_certification)
    {
        $this->container['foreign_entity_partner_in_lower_tier_partnership_certification'] = $foreign_entity_partner_in_lower_tier_partnership_certification;

        return $this;
    }

    /**
     * Gets foreign_partnership_amount_realized_section1446_f_certification
     *
     * @return bool|null
     */
    public function getForeignPartnershipAmountRealizedSection1446FCertification()
    {
        return $this->container['foreign_partnership_amount_realized_section1446_f_certification'];
    }

    /**
     * Sets foreign_partnership_amount_realized_section1446_f_certification
     *
     * @param bool|null $foreign_partnership_amount_realized_section1446_f_certification Certifies that the entity is a foreign partnership receiving an amount realized  from the transfer of a partnership interest for purposes of section 1446(f).
     *
     * @return self
     */
    public function setForeignPartnershipAmountRealizedSection1446FCertification($foreign_partnership_amount_realized_section1446_f_certification)
    {
        $this->container['foreign_partnership_amount_realized_section1446_f_certification'] = $foreign_partnership_amount_realized_section1446_f_certification;

        return $this;
    }

    /**
     * Gets foreign_partnership_modified_amount_realized_certification
     *
     * @return bool|null
     */
    public function getForeignPartnershipModifiedAmountRealizedCertification()
    {
        return $this->container['foreign_partnership_modified_amount_realized_certification'];
    }

    /**
     * Sets foreign_partnership_modified_amount_realized_certification
     *
     * @param bool|null $foreign_partnership_modified_amount_realized_certification Certifies that the foreign partnership is providing a withholding statement for a modified amount realized  from the transfer of a partnership interest, when applicable.
     *
     * @return self
     */
    public function setForeignPartnershipModifiedAmountRealizedCertification($foreign_partnership_modified_amount_realized_certification)
    {
        $this->container['foreign_partnership_modified_amount_realized_certification'] = $foreign_partnership_modified_amount_realized_certification;

        return $this;
    }

    /**
     * Gets foreign_grantor_trust_amount_realized_allocation_certification
     *
     * @return bool|null
     */
    public function getForeignGrantorTrustAmountRealizedAllocationCertification()
    {
        return $this->container['foreign_grantor_trust_amount_realized_allocation_certification'];
    }

    /**
     * Sets foreign_grantor_trust_amount_realized_allocation_certification
     *
     * @param bool|null $foreign_grantor_trust_amount_realized_allocation_certification Certifies that the foreign grantor trust is submitting the form on behalf of each grantor or owner  and providing a withholding statement to allocate the amount realized in accordance with the regulations.
     *
     * @return self
     */
    public function setForeignGrantorTrustAmountRealizedAllocationCertification($foreign_grantor_trust_amount_realized_allocation_certification)
    {
        $this->container['foreign_grantor_trust_amount_realized_allocation_certification'] = $foreign_grantor_trust_amount_realized_allocation_certification;

        return $this;
    }

    /**
     * Gets alternative_withholding_statement_reliance_certification
     *
     * @return bool|null
     */
    public function getAlternativeWithholdingStatementRelianceCertification()
    {
        return $this->container['alternative_withholding_statement_reliance_certification'];
    }

    /**
     * Sets alternative_withholding_statement_reliance_certification
     *
     * @param bool|null $alternative_withholding_statement_reliance_certification Certifies that the entity may rely on the information in all associated withholding certificates  under the applicable standards of knowledge in sections 1441 or 1471 when providing an alternative withholding statement.
     *
     * @return self
     */
    public function setAlternativeWithholdingStatementRelianceCertification($alternative_withholding_statement_reliance_certification)
    {
        $this->container['alternative_withholding_statement_reliance_certification'] = $alternative_withholding_statement_reliance_certification;

        return $this;
    }

    /**
     * Gets np_ffi_with_exempt_beneficial_owners_certification
     *
     * @return bool|null
     */
    public function getNpFfiWithExemptBeneficialOwnersCertification()
    {
        return $this->container['np_ffi_with_exempt_beneficial_owners_certification'];
    }

    /**
     * Sets np_ffi_with_exempt_beneficial_owners_certification
     *
     * @param bool|null $np_ffi_with_exempt_beneficial_owners_certification Certifies that the nonparticipating FFI is transmitting withholding documentation  and providing a statement allocating payment portions to exempt beneficial owners.
     *
     * @return self
     */
    public function setNpFfiWithExemptBeneficialOwnersCertification($np_ffi_with_exempt_beneficial_owners_certification)
    {
        $this->container['np_ffi_with_exempt_beneficial_owners_certification'] = $np_ffi_with_exempt_beneficial_owners_certification;

        return $this;
    }

    /**
     * Gets ffi_sponsoring_entity
     *
     * @return string|null
     */
    public function getFfiSponsoringEntity()
    {
        return $this->container['ffi_sponsoring_entity'];
    }

    /**
     * Sets ffi_sponsoring_entity
     *
     * @param string|null $ffi_sponsoring_entity The name of the entity that sponsors the foreign financial institution (FFI).
     *
     * @return self
     */
    public function setFfiSponsoringEntity($ffi_sponsoring_entity)
    {
        $this->container['ffi_sponsoring_entity'] = $ffi_sponsoring_entity;

        return $this;
    }

    /**
     * Gets investment_entity_certification
     *
     * @return bool|null
     */
    public function getInvestmentEntityCertification()
    {
        return $this->container['investment_entity_certification'];
    }

    /**
     * Sets investment_entity_certification
     *
     * @param bool|null $investment_entity_certification Certifies that the entity is an investment entity, not a QI, WP, or WT, and has an agreement with a sponsoring entity.
     *
     * @return self
     */
    public function setInvestmentEntityCertification($investment_entity_certification)
    {
        $this->container['investment_entity_certification'] = $investment_entity_certification;

        return $this;
    }

    /**
     * Gets controlled_foreign_corporation_certification
     *
     * @return bool|null
     */
    public function getControlledForeignCorporationCertification()
    {
        return $this->container['controlled_foreign_corporation_certification'];
    }

    /**
     * Sets controlled_foreign_corporation_certification
     *
     * @param bool|null $controlled_foreign_corporation_certification Certifies that the entity is a controlled foreign corporation sponsored by a U.S. financial institution, not a QI, WP, or WT,  and shares a common electronic account system for full transparency.
     *
     * @return self
     */
    public function setControlledForeignCorporationCertification($controlled_foreign_corporation_certification)
    {
        $this->container['controlled_foreign_corporation_certification'] = $controlled_foreign_corporation_certification;

        return $this;
    }

    /**
     * Gets owner_documented_ffi_certification
     *
     * @return bool|null
     */
    public function getOwnerDocumentedFfiCertification()
    {
        return $this->container['owner_documented_ffi_certification'];
    }

    /**
     * Sets owner_documented_ffi_certification
     *
     * @param bool|null $owner_documented_ffi_certification Certifies that the FFI meets all requirements to qualify as an owner-documented FFI, including restrictions on activities,  ownership, and account relationships.
     *
     * @return self
     */
    public function setOwnerDocumentedFfiCertification($owner_documented_ffi_certification)
    {
        $this->container['owner_documented_ffi_certification'] = $owner_documented_ffi_certification;

        return $this;
    }

    /**
     * Gets owner_documented_ffi_reporting_statement_certification
     *
     * @return bool|null
     */
    public function getOwnerDocumentedFfiReportingStatementCertification()
    {
        return $this->container['owner_documented_ffi_reporting_statement_certification'];
    }

    /**
     * Sets owner_documented_ffi_reporting_statement_certification
     *
     * @param bool|null $owner_documented_ffi_reporting_statement_certification Certifies that the FFI will provide a complete owner reporting statement  and required documentation for each relevant owner or debt holder.
     *
     * @return self
     */
    public function setOwnerDocumentedFfiReportingStatementCertification($owner_documented_ffi_reporting_statement_certification)
    {
        $this->container['owner_documented_ffi_reporting_statement_certification'] = $owner_documented_ffi_reporting_statement_certification;

        return $this;
    }

    /**
     * Gets owner_documented_ffi_auditor_letter_certification
     *
     * @return bool|null
     */
    public function getOwnerDocumentedFfiAuditorLetterCertification()
    {
        return $this->container['owner_documented_ffi_auditor_letter_certification'];
    }

    /**
     * Sets owner_documented_ffi_auditor_letter_certification
     *
     * @param bool|null $owner_documented_ffi_auditor_letter_certification Certifies that the FFI will provide an auditor’s letter and required owner reporting documentation  to confirm its status as an owner-documented FFI.
     *
     * @return self
     */
    public function setOwnerDocumentedFfiAuditorLetterCertification($owner_documented_ffi_auditor_letter_certification)
    {
        $this->container['owner_documented_ffi_auditor_letter_certification'] = $owner_documented_ffi_auditor_letter_certification;

        return $this;
    }

    /**
     * Gets compliant_nonregistering_local_bank_certification
     *
     * @return bool|null
     */
    public function getCompliantNonregisteringLocalBankCertification()
    {
        return $this->container['compliant_nonregistering_local_bank_certification'];
    }

    /**
     * Sets compliant_nonregistering_local_bank_certification
     *
     * @param bool|null $compliant_nonregistering_local_bank_certification Certifies that the FFI operates solely as a limited bank or credit union within its country, meets asset thresholds,  and has no foreign operations or affiliations outside its country of organization.
     *
     * @return self
     */
    public function setCompliantNonregisteringLocalBankCertification($compliant_nonregistering_local_bank_certification)
    {
        $this->container['compliant_nonregistering_local_bank_certification'] = $compliant_nonregistering_local_bank_certification;

        return $this;
    }

    /**
     * Gets compliant_ffi_low_value_accounts_certification
     *
     * @return bool|null
     */
    public function getCompliantFfiLowValueAccountsCertification()
    {
        return $this->container['compliant_ffi_low_value_accounts_certification'];
    }

    /**
     * Sets compliant_ffi_low_value_accounts_certification
     *
     * @param bool|null $compliant_ffi_low_value_accounts_certification Certifies that the FFI is not primarily engaged in investment activities, maintains only low-value accounts,  and has limited total assets within its group.
     *
     * @return self
     */
    public function setCompliantFfiLowValueAccountsCertification($compliant_ffi_low_value_accounts_certification)
    {
        $this->container['compliant_ffi_low_value_accounts_certification'] = $compliant_ffi_low_value_accounts_certification;

        return $this;
    }

    /**
     * Gets sponsored_closely_held_entity_sponsoring_entity
     *
     * @return string|null
     */
    public function getSponsoredCloselyHeldEntitySponsoringEntity()
    {
        return $this->container['sponsored_closely_held_entity_sponsoring_entity'];
    }

    /**
     * Sets sponsored_closely_held_entity_sponsoring_entity
     *
     * @param string|null $sponsored_closely_held_entity_sponsoring_entity The name of sponsoring entity for a certified deemed-compliant, closely held investment vehicle.
     *
     * @return self
     */
    public function setSponsoredCloselyHeldEntitySponsoringEntity($sponsored_closely_held_entity_sponsoring_entity)
    {
        $this->container['sponsored_closely_held_entity_sponsoring_entity'] = $sponsored_closely_held_entity_sponsoring_entity;

        return $this;
    }

    /**
     * Gets sponsored_closely_held_investment_vehicle_certification
     *
     * @return bool|null
     */
    public function getSponsoredCloselyHeldInvestmentVehicleCertification()
    {
        return $this->container['sponsored_closely_held_investment_vehicle_certification'];
    }

    /**
     * Sets sponsored_closely_held_investment_vehicle_certification
     *
     * @param bool|null $sponsored_closely_held_investment_vehicle_certification Certifies that the entity is a sponsored investment entity with 20 or fewer individual owners,  and that all compliance obligations are fulfilled by the sponsoring entity.
     *
     * @return self
     */
    public function setSponsoredCloselyHeldInvestmentVehicleCertification($sponsored_closely_held_investment_vehicle_certification)
    {
        $this->container['sponsored_closely_held_investment_vehicle_certification'] = $sponsored_closely_held_investment_vehicle_certification;

        return $this;
    }

    /**
     * Gets compliant_limited_life_debt_entity_certification
     *
     * @return bool|null
     */
    public function getCompliantLimitedLifeDebtEntityCertification()
    {
        return $this->container['compliant_limited_life_debt_entity_certification'];
    }

    /**
     * Sets compliant_limited_life_debt_entity_certification
     *
     * @param bool|null $compliant_limited_life_debt_entity_certification Certifies that the entity qualifies as a limited life debt investment entity based on its formation date, issuance terms,  and compliance with regulatory requirements.
     *
     * @return self
     */
    public function setCompliantLimitedLifeDebtEntityCertification($compliant_limited_life_debt_entity_certification)
    {
        $this->container['compliant_limited_life_debt_entity_certification'] = $compliant_limited_life_debt_entity_certification;

        return $this;
    }

    /**
     * Gets investment_entity_no_financial_accounts_certification
     *
     * @return bool|null
     */
    public function getInvestmentEntityNoFinancialAccountsCertification()
    {
        return $this->container['investment_entity_no_financial_accounts_certification'];
    }

    /**
     * Sets investment_entity_no_financial_accounts_certification
     *
     * @param bool|null $investment_entity_no_financial_accounts_certification Certifies that the entity is a financial institution solely because it is an investment entity under regulations  and the entity does not maintain financial accounts.
     *
     * @return self
     */
    public function setInvestmentEntityNoFinancialAccountsCertification($investment_entity_no_financial_accounts_certification)
    {
        $this->container['investment_entity_no_financial_accounts_certification'] = $investment_entity_no_financial_accounts_certification;

        return $this;
    }

    /**
     * Gets restricted_distributor_certification
     *
     * @return bool|null
     */
    public function getRestrictedDistributorCertification()
    {
        return $this->container['restricted_distributor_certification'];
    }

    /**
     * Sets restricted_distributor_certification
     *
     * @param bool|null $restricted_distributor_certification Certifies that the entity qualifies as a restricted distributor based on its operations, customer base, regulatory compliance,  and financial and geographic limitations.
     *
     * @return self
     */
    public function setRestrictedDistributorCertification($restricted_distributor_certification)
    {
        $this->container['restricted_distributor_certification'] = $restricted_distributor_certification;

        return $this;
    }

    /**
     * Gets restricted_distributor_agreement_certification
     *
     * @return bool|null
     */
    public function getRestrictedDistributorAgreementCertification()
    {
        return $this->container['restricted_distributor_agreement_certification'];
    }

    /**
     * Sets restricted_distributor_agreement_certification
     *
     * @param bool|null $restricted_distributor_agreement_certification Certifies that the entity is, and has been, bound by distribution agreements prohibiting sales of fund interests to  specified U.S. persons and certain non-U.S. entities.
     *
     * @return self
     */
    public function setRestrictedDistributorAgreementCertification($restricted_distributor_agreement_certification)
    {
        $this->container['restricted_distributor_agreement_certification'] = $restricted_distributor_agreement_certification;

        return $this;
    }

    /**
     * Gets restricted_distributor_preexisting_sales_compliance_certification
     *
     * @return bool|null
     */
    public function getRestrictedDistributorPreexistingSalesComplianceCertification()
    {
        return $this->container['restricted_distributor_preexisting_sales_compliance_certification'];
    }

    /**
     * Sets restricted_distributor_preexisting_sales_compliance_certification
     *
     * @param bool|null $restricted_distributor_preexisting_sales_compliance_certification Certifies that the entity complies with distribution restrictions for U.S.-linked investors  and has addressed any preexisting sales in accordance with FATCA regulations.
     *
     * @return self
     */
    public function setRestrictedDistributorPreexistingSalesComplianceCertification($restricted_distributor_preexisting_sales_compliance_certification)
    {
        $this->container['restricted_distributor_preexisting_sales_compliance_certification'] = $restricted_distributor_preexisting_sales_compliance_certification;

        return $this;
    }

    /**
     * Gets foreign_central_bank_of_issue_certification
     *
     * @return bool|null
     */
    public function getForeignCentralBankOfIssueCertification()
    {
        return $this->container['foreign_central_bank_of_issue_certification'];
    }

    /**
     * Sets foreign_central_bank_of_issue_certification
     *
     * @param bool|null $foreign_central_bank_of_issue_certification Certifies that the entity is treated as the beneficial owner of the payment solely  for purposes of chapter 4 under Regulations section 1.1471-6(d)(4).
     *
     * @return self
     */
    public function setForeignCentralBankOfIssueCertification($foreign_central_bank_of_issue_certification)
    {
        $this->container['foreign_central_bank_of_issue_certification'] = $foreign_central_bank_of_issue_certification;

        return $this;
    }

    /**
     * Gets nonreporting_iga_ffi_certification
     *
     * @return bool|null
     */
    public function getNonreportingIgaFfiCertification()
    {
        return $this->container['nonreporting_iga_ffi_certification'];
    }

    /**
     * Sets nonreporting_iga_ffi_certification
     *
     * @param bool|null $nonreporting_iga_ffi_certification Certifies that the entity meets the requirements to be considered a nonreporting financial institution to an applicable IGA.
     *
     * @return self
     */
    public function setNonreportingIgaFfiCertification($nonreporting_iga_ffi_certification)
    {
        $this->container['nonreporting_iga_ffi_certification'] = $nonreporting_iga_ffi_certification;

        return $this;
    }

    /**
     * Gets iga_country
     *
     * @return string|null
     */
    public function getIgaCountry()
    {
        return $this->container['iga_country'];
    }

    /**
     * Sets iga_country
     *
     * @param string|null $iga_country The country for the applicable IGA with the United States.
     *
     * @return self
     */
    public function setIgaCountry($iga_country)
    {
        $this->container['iga_country'] = $iga_country;

        return $this;
    }

    /**
     * Gets iga_model
     *
     * @return string|null
     */
    public function getIgaModel()
    {
        return $this->container['iga_model'];
    }

    /**
     * Sets iga_model
     *
     * @param string|null $iga_model The applicable IGA model.  Available values:  - 1: Model 1 IGA  - 2: Model 2 IGA
     *
     * @return self
     */
    public function setIgaModel($iga_model)
    {
        $allowedValues = $this->getIgaModelAllowableValues();
        if (!is_null($iga_model) && !in_array($iga_model, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'iga_model', must be one of '%s'",
                    $iga_model,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['iga_model'] = $iga_model;

        return $this;
    }

    /**
     * Gets iga_legal_status_treatment
     *
     * @return string|null
     */
    public function getIgaLegalStatusTreatment()
    {
        return $this->container['iga_legal_status_treatment'];
    }

    /**
     * Sets iga_legal_status_treatment
     *
     * @param string|null $iga_legal_status_treatment Specifies how the applicable IGA is treated under the IGA provisions or Treasury regulations.
     *
     * @return self
     */
    public function setIgaLegalStatusTreatment($iga_legal_status_treatment)
    {
        $this->container['iga_legal_status_treatment'] = $iga_legal_status_treatment;

        return $this;
    }

    /**
     * Gets iga_ffi_trustee_or_sponsor
     *
     * @return string|null
     */
    public function getIgaFfiTrusteeOrSponsor()
    {
        return $this->container['iga_ffi_trustee_or_sponsor'];
    }

    /**
     * Sets iga_ffi_trustee_or_sponsor
     *
     * @param string|null $iga_ffi_trustee_or_sponsor The trustee or sponsor name for the nonreporting IGA FFI.
     *
     * @return self
     */
    public function setIgaFfiTrusteeOrSponsor($iga_ffi_trustee_or_sponsor)
    {
        $this->container['iga_ffi_trustee_or_sponsor'] = $iga_ffi_trustee_or_sponsor;

        return $this;
    }

    /**
     * Gets iga_ffi_trustee_is_foreign
     *
     * @return bool|null
     */
    public function getIgaFfiTrusteeIsForeign()
    {
        return $this->container['iga_ffi_trustee_is_foreign'];
    }

    /**
     * Sets iga_ffi_trustee_is_foreign
     *
     * @param bool|null $iga_ffi_trustee_is_foreign Indicates whether the trustee for the nonreporting IGA FFI is foreign.
     *
     * @return self
     */
    public function setIgaFfiTrusteeIsForeign($iga_ffi_trustee_is_foreign)
    {
        $this->container['iga_ffi_trustee_is_foreign'] = $iga_ffi_trustee_is_foreign;

        return $this;
    }

    /**
     * Gets treaty_qualified_pension_fund_certification
     *
     * @return bool|null
     */
    public function getTreatyQualifiedPensionFundCertification()
    {
        return $this->container['treaty_qualified_pension_fund_certification'];
    }

    /**
     * Sets treaty_qualified_pension_fund_certification
     *
     * @param bool|null $treaty_qualified_pension_fund_certification Certifies that the entity is a pension or retirement fund established in a treaty country  and is entitled to treaty benefits on U.S. source income.
     *
     * @return self
     */
    public function setTreatyQualifiedPensionFundCertification($treaty_qualified_pension_fund_certification)
    {
        $this->container['treaty_qualified_pension_fund_certification'] = $treaty_qualified_pension_fund_certification;

        return $this;
    }

    /**
     * Gets qualified_retirement_fund_certification
     *
     * @return bool|null
     */
    public function getQualifiedRetirementFundCertification()
    {
        return $this->container['qualified_retirement_fund_certification'];
    }

    /**
     * Sets qualified_retirement_fund_certification
     *
     * @param bool|null $qualified_retirement_fund_certification Certifies that the entity is a government-regulated retirement fund meeting specific requirements for contributions, tax exemption,  beneficiary limits, and distribution restrictions.
     *
     * @return self
     */
    public function setQualifiedRetirementFundCertification($qualified_retirement_fund_certification)
    {
        $this->container['qualified_retirement_fund_certification'] = $qualified_retirement_fund_certification;

        return $this;
    }

    /**
     * Gets narrow_participation_retirement_fund_certification
     *
     * @return bool|null
     */
    public function getNarrowParticipationRetirementFundCertification()
    {
        return $this->container['narrow_participation_retirement_fund_certification'];
    }

    /**
     * Sets narrow_participation_retirement_fund_certification
     *
     * @param bool|null $narrow_participation_retirement_fund_certification Certifies that the entity is a government-regulated retirement fund with fewer than 50 participants, limited foreign ownership,  and employer sponsorship that is not from investment entities or passive NFFEs.
     *
     * @return self
     */
    public function setNarrowParticipationRetirementFundCertification($narrow_participation_retirement_fund_certification)
    {
        $this->container['narrow_participation_retirement_fund_certification'] = $narrow_participation_retirement_fund_certification;

        return $this;
    }

    /**
     * Gets section401_a_equivalent_pension_plan_certification
     *
     * @return bool|null
     */
    public function getSection401AEquivalentPensionPlanCertification()
    {
        return $this->container['section401_a_equivalent_pension_plan_certification'];
    }

    /**
     * Sets section401_a_equivalent_pension_plan_certification
     *
     * @param bool|null $section401_a_equivalent_pension_plan_certification Certifies that the entity is formed under a pension plan meeting section 401(a) requirements, except for being U.S.-trust funded.
     *
     * @return self
     */
    public function setSection401AEquivalentPensionPlanCertification($section401_a_equivalent_pension_plan_certification)
    {
        $this->container['section401_a_equivalent_pension_plan_certification'] = $section401_a_equivalent_pension_plan_certification;

        return $this;
    }

    /**
     * Gets investment_entity_for_retirement_funds_certification
     *
     * @return bool|null
     */
    public function getInvestmentEntityForRetirementFundsCertification()
    {
        return $this->container['investment_entity_for_retirement_funds_certification'];
    }

    /**
     * Sets investment_entity_for_retirement_funds_certification
     *
     * @param bool|null $investment_entity_for_retirement_funds_certification Certifies that the entity is established solely to earn income for the benefit of qualifying retirement funds  or accounts under applicable FATCA regulations or IGAs.
     *
     * @return self
     */
    public function setInvestmentEntityForRetirementFundsCertification($investment_entity_for_retirement_funds_certification)
    {
        $this->container['investment_entity_for_retirement_funds_certification'] = $investment_entity_for_retirement_funds_certification;

        return $this;
    }

    /**
     * Gets exempt_beneficial_owner_sponsored_retirement_fund_certification
     *
     * @return bool|null
     */
    public function getExemptBeneficialOwnerSponsoredRetirementFundCertification()
    {
        return $this->container['exempt_beneficial_owner_sponsored_retirement_fund_certification'];
    }

    /**
     * Sets exempt_beneficial_owner_sponsored_retirement_fund_certification
     *
     * @param bool|null $exempt_beneficial_owner_sponsored_retirement_fund_certification Certifies that the entity is established and sponsored by a qualifying exempt beneficial owner to provide retirement, disability,  or death benefits to individuals based on services performed for the sponsor.
     *
     * @return self
     */
    public function setExemptBeneficialOwnerSponsoredRetirementFundCertification($exempt_beneficial_owner_sponsored_retirement_fund_certification)
    {
        $this->container['exempt_beneficial_owner_sponsored_retirement_fund_certification'] = $exempt_beneficial_owner_sponsored_retirement_fund_certification;

        return $this;
    }

    /**
     * Gets excepted_nonfinancial_group_entity_certification
     *
     * @return bool|null
     */
    public function getExceptedNonfinancialGroupEntityCertification()
    {
        return $this->container['excepted_nonfinancial_group_entity_certification'];
    }

    /**
     * Sets excepted_nonfinancial_group_entity_certification
     *
     * @param bool|null $excepted_nonfinancial_group_entity_certification Certifies that the entity is a holding company, treasury center, or captive finance company operating within a nonfinancial group  and not functioning as an investment or financial institution.
     *
     * @return self
     */
    public function setExceptedNonfinancialGroupEntityCertification($excepted_nonfinancial_group_entity_certification)
    {
        $this->container['excepted_nonfinancial_group_entity_certification'] = $excepted_nonfinancial_group_entity_certification;

        return $this;
    }

    /**
     * Gets excepted_nonfinancial_start_up_certification
     *
     * @return bool|null
     */
    public function getExceptedNonfinancialStartUpCertification()
    {
        return $this->container['excepted_nonfinancial_start_up_certification'];
    }

    /**
     * Sets excepted_nonfinancial_start_up_certification
     *
     * @param bool|null $excepted_nonfinancial_start_up_certification Certifies that the entity is a recently formed startup NFFE investing in a non-financial business  and is not operating as or presenting itself as an investment fund.
     *
     * @return self
     */
    public function setExceptedNonfinancialStartUpCertification($excepted_nonfinancial_start_up_certification)
    {
        $this->container['excepted_nonfinancial_start_up_certification'] = $excepted_nonfinancial_start_up_certification;

        return $this;
    }

    /**
     * Gets startup_formation_or_resolution_date
     *
     * @return \DateTime|null
     */
    public function getStartupFormationOrResolutionDate()
    {
        return $this->container['startup_formation_or_resolution_date'];
    }

    /**
     * Sets startup_formation_or_resolution_date
     *
     * @param \DateTime|null $startup_formation_or_resolution_date The date the start-up company was formed on (or, in case of new line of business, the date of board resolution approving the  new line of business).
     *
     * @return self
     */
    public function setStartupFormationOrResolutionDate($startup_formation_or_resolution_date)
    {
        $this->container['startup_formation_or_resolution_date'] = $startup_formation_or_resolution_date;

        return $this;
    }

    /**
     * Gets excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification
     *
     * @return bool|null
     */
    public function getExceptedNonfinancialEntityInLiquidationOrBankruptcyCertification()
    {
        return $this->container['excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification'];
    }

    /**
     * Sets excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification
     *
     * @param bool|null $excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification Certifies that the entity is in liquidation, reorganization, or bankruptcy and intends to operate as a nonfinancial entity,  with supporting documentation available if the process exceeds three years.
     *
     * @return self
     */
    public function setExceptedNonfinancialEntityInLiquidationOrBankruptcyCertification($excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification)
    {
        $this->container['excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification'] = $excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification;

        return $this;
    }

    /**
     * Gets nonfinancial_entity_filing_date
     *
     * @return \DateTime|null
     */
    public function getNonfinancialEntityFilingDate()
    {
        return $this->container['nonfinancial_entity_filing_date'];
    }

    /**
     * Sets nonfinancial_entity_filing_date
     *
     * @param \DateTime|null $nonfinancial_entity_filing_date The filed date for a plan of reorganization, liquidation or bankruptcy.
     *
     * @return self
     */
    public function setNonfinancialEntityFilingDate($nonfinancial_entity_filing_date)
    {
        $this->container['nonfinancial_entity_filing_date'] = $nonfinancial_entity_filing_date;

        return $this;
    }

    /**
     * Gets publicly_traded_nffe_certification
     *
     * @return bool|null
     */
    public function getPubliclyTradedNffeCertification()
    {
        return $this->container['publicly_traded_nffe_certification'];
    }

    /**
     * Sets publicly_traded_nffe_certification
     *
     * @param bool|null $publicly_traded_nffe_certification Certifies that the entity is a foreign corporation that is not a financial institution  and whose stock is regularly traded on an established securities market.
     *
     * @return self
     */
    public function setPubliclyTradedNffeCertification($publicly_traded_nffe_certification)
    {
        $this->container['publicly_traded_nffe_certification'] = $publicly_traded_nffe_certification;

        return $this;
    }

    /**
     * Gets publicly_traded_nffe_securities_market
     *
     * @return string|null
     */
    public function getPubliclyTradedNffeSecuritiesMarket()
    {
        return $this->container['publicly_traded_nffe_securities_market'];
    }

    /**
     * Sets publicly_traded_nffe_securities_market
     *
     * @param string|null $publicly_traded_nffe_securities_market The name of the securities market where the corporation's stock is regularly traded.
     *
     * @return self
     */
    public function setPubliclyTradedNffeSecuritiesMarket($publicly_traded_nffe_securities_market)
    {
        $this->container['publicly_traded_nffe_securities_market'] = $publicly_traded_nffe_securities_market;

        return $this;
    }

    /**
     * Gets nffe_affiliate_of_publicly_traded_entity_certification
     *
     * @return bool|null
     */
    public function getNffeAffiliateOfPubliclyTradedEntityCertification()
    {
        return $this->container['nffe_affiliate_of_publicly_traded_entity_certification'];
    }

    /**
     * Sets nffe_affiliate_of_publicly_traded_entity_certification
     *
     * @param bool|null $nffe_affiliate_of_publicly_traded_entity_certification Certifies that the entity is a foreign corporation that is not a financial institution  and is affiliated with a publicly traded entity within the same expanded affiliated group.
     *
     * @return self
     */
    public function setNffeAffiliateOfPubliclyTradedEntityCertification($nffe_affiliate_of_publicly_traded_entity_certification)
    {
        $this->container['nffe_affiliate_of_publicly_traded_entity_certification'] = $nffe_affiliate_of_publicly_traded_entity_certification;

        return $this;
    }

    /**
     * Gets publicly_traded_entity
     *
     * @return string|null
     */
    public function getPubliclyTradedEntity()
    {
        return $this->container['publicly_traded_entity'];
    }

    /**
     * Sets publicly_traded_entity
     *
     * @param string|null $publicly_traded_entity The name of the affiliated entity whose stock is regularly traded on an established securities market.
     *
     * @return self
     */
    public function setPubliclyTradedEntity($publicly_traded_entity)
    {
        $this->container['publicly_traded_entity'] = $publicly_traded_entity;

        return $this;
    }

    /**
     * Gets nffe_affiliate_of_publicly_traded_entity_securities_market
     *
     * @return string|null
     */
    public function getNffeAffiliateOfPubliclyTradedEntitySecuritiesMarket()
    {
        return $this->container['nffe_affiliate_of_publicly_traded_entity_securities_market'];
    }

    /**
     * Sets nffe_affiliate_of_publicly_traded_entity_securities_market
     *
     * @param string|null $nffe_affiliate_of_publicly_traded_entity_securities_market The name of the established securities market where the affiliated entity's stock is traded.
     *
     * @return self
     */
    public function setNffeAffiliateOfPubliclyTradedEntitySecuritiesMarket($nffe_affiliate_of_publicly_traded_entity_securities_market)
    {
        $this->container['nffe_affiliate_of_publicly_traded_entity_securities_market'] = $nffe_affiliate_of_publicly_traded_entity_securities_market;

        return $this;
    }

    /**
     * Gets excepted_territory_nffe_certification
     *
     * @return bool|null
     */
    public function getExceptedTerritoryNffeCertification()
    {
        return $this->container['excepted_territory_nffe_certification'];
    }

    /**
     * Sets excepted_territory_nffe_certification
     *
     * @param bool|null $excepted_territory_nffe_certification Certifies that the entity is organized in a U.S. possession, is not engaged in financial activities,  and is entirely owned by bona fide residents of that possession.
     *
     * @return self
     */
    public function setExceptedTerritoryNffeCertification($excepted_territory_nffe_certification)
    {
        $this->container['excepted_territory_nffe_certification'] = $excepted_territory_nffe_certification;

        return $this;
    }

    /**
     * Gets active_nffe_certification
     *
     * @return bool|null
     */
    public function getActiveNffeCertification()
    {
        return $this->container['active_nffe_certification'];
    }

    /**
     * Sets active_nffe_certification
     *
     * @param bool|null $active_nffe_certification Certifies that the entity is a foreign non-financial institution with less than 50% passive income  and less than 50% of its assets producing or held to produce passive income.
     *
     * @return self
     */
    public function setActiveNffeCertification($active_nffe_certification)
    {
        $this->container['active_nffe_certification'] = $active_nffe_certification;

        return $this;
    }

    /**
     * Gets passive_nffe_certification
     *
     * @return bool|null
     */
    public function getPassiveNffeCertification()
    {
        return $this->container['passive_nffe_certification'];
    }

    /**
     * Sets passive_nffe_certification
     *
     * @param bool|null $passive_nffe_certification Certifies that the entity is a foreign non-financial entity that does not qualify for any other NFFE category  and is not a financial institution.
     *
     * @return self
     */
    public function setPassiveNffeCertification($passive_nffe_certification)
    {
        $this->container['passive_nffe_certification'] = $passive_nffe_certification;

        return $this;
    }

    /**
     * Gets sponsored_direct_reporting_nffe_certification
     *
     * @return bool|null
     */
    public function getSponsoredDirectReportingNffeCertification()
    {
        return $this->container['sponsored_direct_reporting_nffe_certification'];
    }

    /**
     * Sets sponsored_direct_reporting_nffe_certification
     *
     * @param bool|null $sponsored_direct_reporting_nffe_certification Certifies that the entity is a sponsored direct reporting NFFE.
     *
     * @return self
     */
    public function setSponsoredDirectReportingNffeCertification($sponsored_direct_reporting_nffe_certification)
    {
        $this->container['sponsored_direct_reporting_nffe_certification'] = $sponsored_direct_reporting_nffe_certification;

        return $this;
    }

    /**
     * Gets direct_reporting_nffe_sponsoring_entity
     *
     * @return string|null
     */
    public function getDirectReportingNffeSponsoringEntity()
    {
        return $this->container['direct_reporting_nffe_sponsoring_entity'];
    }

    /**
     * Sets direct_reporting_nffe_sponsoring_entity
     *
     * @param string|null $direct_reporting_nffe_sponsoring_entity The name of the entity that sponsors the direct reporting NFFE.
     *
     * @return self
     */
    public function setDirectReportingNffeSponsoringEntity($direct_reporting_nffe_sponsoring_entity)
    {
        $this->container['direct_reporting_nffe_sponsoring_entity'] = $direct_reporting_nffe_sponsoring_entity;

        return $this;
    }

    /**
     * Gets signer_name
     *
     * @return string|null
     */
    public function getSignerName()
    {
        return $this->container['signer_name'];
    }

    /**
     * Sets signer_name
     *
     * @param string|null $signer_name The name of the signer of the form.
     *
     * @return self
     */
    public function setSignerName($signer_name)
    {
        $this->container['signer_name'] = $signer_name;

        return $this;
    }

    /**
     * Gets making_treaty_claim
     *
     * @return bool|null
     */
    public function getMakingTreatyClaim()
    {
        return $this->container['making_treaty_claim'];
    }

    /**
     * Sets making_treaty_claim
     *
     * @param bool|null $making_treaty_claim Indicates whether the entity is making a treaty claim.
     *
     * @return self
     */
    public function setMakingTreatyClaim($making_treaty_claim)
    {
        $this->container['making_treaty_claim'] = $making_treaty_claim;

        return $this;
    }

    /**
     * Gets foreign_tin_not_required
     *
     * @return bool|null
     */
    public function getForeignTinNotRequired()
    {
        return $this->container['foreign_tin_not_required'];
    }

    /**
     * Sets foreign_tin_not_required
     *
     * @param bool|null $foreign_tin_not_required Indicates whether a foreign TIN is not legally required.
     *
     * @return self
     */
    public function setForeignTinNotRequired($foreign_tin_not_required)
    {
        $this->container['foreign_tin_not_required'] = $foreign_tin_not_required;

        return $this;
    }

    /**
     * Gets treaty_country_certification
     *
     * @return bool|null
     */
    public function getTreatyCountryCertification()
    {
        return $this->container['treaty_country_certification'];
    }

    /**
     * Sets treaty_country_certification
     *
     * @param bool|null $treaty_country_certification Certifies the beneficial owner's country under the U.S. tax treaty.
     *
     * @return self
     */
    public function setTreatyCountryCertification($treaty_country_certification)
    {
        $this->container['treaty_country_certification'] = $treaty_country_certification;

        return $this;
    }

    /**
     * Gets treaty_country
     *
     * @return string|null
     */
    public function getTreatyCountry()
    {
        return $this->container['treaty_country'];
    }

    /**
     * Sets treaty_country
     *
     * @param string|null $treaty_country The country for which the treaty applies.. Allowed values: US, AF, AX, AL, AG, AQ, AN, AO, AV, AY (and 248 more)
     *
     * @return self
     */
    public function setTreatyCountry($treaty_country)
    {
        $allowedValues = $this->getTreatyCountryAllowableValues();
        if (!is_null($treaty_country) && !in_array($treaty_country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'treaty_country', must be one of '%s'",
                    $treaty_country,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['treaty_country'] = $treaty_country;

        return $this;
    }

    /**
     * Gets benefit_limitation_certification
     *
     * @return bool|null
     */
    public function getBenefitLimitationCertification()
    {
        return $this->container['benefit_limitation_certification'];
    }

    /**
     * Sets benefit_limitation_certification
     *
     * @param bool|null $benefit_limitation_certification Certifies that the beneficial owner is eligible for treaty benefits and meets any limitation on benefits requirements.
     *
     * @return self
     */
    public function setBenefitLimitationCertification($benefit_limitation_certification)
    {
        $this->container['benefit_limitation_certification'] = $benefit_limitation_certification;

        return $this;
    }

    /**
     * Gets benefit_limitation
     *
     * @return string|null
     */
    public function getBenefitLimitation()
    {
        return $this->container['benefit_limitation'];
    }

    /**
     * Sets benefit_limitation
     *
     * @param string|null $benefit_limitation The benefit limitation for tax treaty claims.  Available values:  - 1: Government  - 2: Tax exempt pension trust or pension fund  - 3: Other tax exempt organization  - 4: Publicly traded corporation  - 5: Subsidiary of a publicly traded corporation  - 6: Company that meets the ownership and base erosion test  - 7: Company that meets the derivative benefits test  - 8: Company with an item of income that meets active trade or business test  - 9: Favorable discretionary determination by the U.S. competent authority received  - 10: Other  - 11: No LOB article in treaty
     *
     * @return self
     */
    public function setBenefitLimitation($benefit_limitation)
    {
        $allowedValues = $this->getBenefitLimitationAllowableValues();
        if (!is_null($benefit_limitation) && !in_array($benefit_limitation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'benefit_limitation', must be one of '%s'",
                    $benefit_limitation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['benefit_limitation'] = $benefit_limitation;

        return $this;
    }

    /**
     * Gets qualified_resident_status_certification
     *
     * @return bool|null
     */
    public function getQualifiedResidentStatusCertification()
    {
        return $this->container['qualified_resident_status_certification'];
    }

    /**
     * Sets qualified_resident_status_certification
     *
     * @param bool|null $qualified_resident_status_certification Certifies that the beneficial owner claims treaty benefits and meets the qualified resident status for specific U.S. source income.
     *
     * @return self
     */
    public function setQualifiedResidentStatusCertification($qualified_resident_status_certification)
    {
        $this->container['qualified_resident_status_certification'] = $qualified_resident_status_certification;

        return $this;
    }

    /**
     * Gets treaty_article
     *
     * @return string|null
     */
    public function getTreatyArticle()
    {
        return $this->container['treaty_article'];
    }

    /**
     * Sets treaty_article
     *
     * @param string|null $treaty_article The specific article of the treaty being claimed.
     *
     * @return self
     */
    public function setTreatyArticle($treaty_article)
    {
        $this->container['treaty_article'] = $treaty_article;

        return $this;
    }

    /**
     * Gets withholding_rate
     *
     * @return string|null
     */
    public function getWithholdingRate()
    {
        return $this->container['withholding_rate'];
    }

    /**
     * Sets withholding_rate
     *
     * @param string|null $withholding_rate The withholding rate applied as per the treaty. Must be a percentage with up to two decimals (e.g., 12.50, 0).. Allowed values: 0, 0.0, 0.00, 5, 5.5, 10, 12.50, 15, 20, 25 (and 1 more)
     *
     * @return self
     */
    public function setWithholdingRate($withholding_rate)
    {
        $allowedValues = $this->getWithholdingRateAllowableValues();
        if (!is_null($withholding_rate) && !in_array($withholding_rate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'withholding_rate', must be one of '%s'",
                    $withholding_rate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['withholding_rate'] = $withholding_rate;

        return $this;
    }

    /**
     * Gets income_type
     *
     * @return string|null
     */
    public function getIncomeType()
    {
        return $this->container['income_type'];
    }

    /**
     * Sets income_type
     *
     * @param string|null $income_type The type of income covered by the treaty.
     *
     * @return self
     */
    public function setIncomeType($income_type)
    {
        $this->container['income_type'] = $income_type;

        return $this;
    }

    /**
     * Gets treaty_reasons
     *
     * @return string|null
     */
    public function getTreatyReasons()
    {
        return $this->container['treaty_reasons'];
    }

    /**
     * Sets treaty_reasons
     *
     * @param string|null $treaty_reasons The reasons for claiming treaty benefits.
     *
     * @return self
     */
    public function setTreatyReasons($treaty_reasons)
    {
        $this->container['treaty_reasons'] = $treaty_reasons;

        return $this;
    }

    /**
     * Gets owner_documented_ffi_trust_beneficiaries_certification
     *
     * @return bool|null
     */
    public function getOwnerDocumentedFfiTrustBeneficiariesCertification()
    {
        return $this->container['owner_documented_ffi_trust_beneficiaries_certification'];
    }

    /**
     * Sets owner_documented_ffi_trust_beneficiaries_certification
     *
     * @param bool|null $owner_documented_ffi_trust_beneficiaries_certification Certifies that the trust has no contingent or unidentified beneficiaries or designated classes of beneficiaries.
     *
     * @return self
     */
    public function setOwnerDocumentedFfiTrustBeneficiariesCertification($owner_documented_ffi_trust_beneficiaries_certification)
    {
        $this->container['owner_documented_ffi_trust_beneficiaries_certification'] = $owner_documented_ffi_trust_beneficiaries_certification;

        return $this;
    }

    /**
     * Gets non_commercial_financial_activity_certification
     *
     * @return bool|null
     */
    public function getNonCommercialFinancialActivityCertification()
    {
        return $this->container['non_commercial_financial_activity_certification'];
    }

    /**
     * Sets non_commercial_financial_activity_certification
     *
     * @param bool|null $non_commercial_financial_activity_certification Certifies that the entity is the beneficial owner and is not engaged in commercial financial activities related  to the specified payments, accounts or obligations for which this form is submitted.
     *
     * @return self
     */
    public function setNonCommercialFinancialActivityCertification($non_commercial_financial_activity_certification)
    {
        $this->container['non_commercial_financial_activity_certification'] = $non_commercial_financial_activity_certification;

        return $this;
    }

    /**
     * Gets internation_organization_certification
     *
     * @return bool|null
     */
    public function getInternationOrganizationCertification()
    {
        return $this->container['internation_organization_certification'];
    }

    /**
     * Sets internation_organization_certification
     *
     * @param bool|null $internation_organization_certification Certifies that the entity is an international organization described in section 7701(a)(18).
     *
     * @return self
     */
    public function setInternationOrganizationCertification($internation_organization_certification)
    {
        $this->container['internation_organization_certification'] = $internation_organization_certification;

        return $this;
    }

    /**
     * Gets intergovernmental_organization_certification
     *
     * @return bool|null
     */
    public function getIntergovernmentalOrganizationCertification()
    {
        return $this->container['intergovernmental_organization_certification'];
    }

    /**
     * Sets intergovernmental_organization_certification
     *
     * @param bool|null $intergovernmental_organization_certification Certifies that the entity is an intergovernmental or supranational organization primarily comprised of foreign governments,  is the beneficial owner, and is not engaged in commercial financial activities.
     *
     * @return self
     */
    public function setIntergovernmentalOrganizationCertification($intergovernmental_organization_certification)
    {
        $this->container['intergovernmental_organization_certification'] = $intergovernmental_organization_certification;

        return $this;
    }

    /**
     * Gets exempt_beneficial_owner_owned_investment_entity_certification
     *
     * @return bool|null
     */
    public function getExemptBeneficialOwnerOwnedInvestmentEntityCertification()
    {
        return $this->container['exempt_beneficial_owner_owned_investment_entity_certification'];
    }

    /**
     * Sets exempt_beneficial_owner_owned_investment_entity_certification
     *
     * @param bool|null $exempt_beneficial_owner_owned_investment_entity_certification Certifies that the entity is an investment entity wholly owned by exempt beneficial owners and has provided complete ownership  and documentation details as required under FATCA regulations.
     *
     * @return self
     */
    public function setExemptBeneficialOwnerOwnedInvestmentEntityCertification($exempt_beneficial_owner_owned_investment_entity_certification)
    {
        $this->container['exempt_beneficial_owner_owned_investment_entity_certification'] = $exempt_beneficial_owner_owned_investment_entity_certification;

        return $this;
    }

    /**
     * Gets section501_c_organization_certification
     *
     * @return bool|null
     */
    public function getSection501COrganizationCertification()
    {
        return $this->container['section501_c_organization_certification'];
    }

    /**
     * Sets section501_c_organization_certification
     *
     * @param bool|null $section501_c_organization_certification Certifies that the entity is a section 501(c) organization based on a valid IRS determination letter  or a legal opinion from U.S. counsel.
     *
     * @return self
     */
    public function setSection501COrganizationCertification($section501_c_organization_certification)
    {
        $this->container['section501_c_organization_certification'] = $section501_c_organization_certification;

        return $this;
    }

    /**
     * Gets determination_letter_date
     *
     * @return \DateTime|null
     */
    public function getDeterminationLetterDate()
    {
        return $this->container['determination_letter_date'];
    }

    /**
     * Sets determination_letter_date
     *
     * @param \DateTime|null $determination_letter_date The date of the IRS determination letter confirming the entity’s section 501(c) status.
     *
     * @return self
     */
    public function setDeterminationLetterDate($determination_letter_date)
    {
        $this->container['determination_letter_date'] = $determination_letter_date;

        return $this;
    }

    /**
     * Gets nonprofit_organization_certification
     *
     * @return bool|null
     */
    public function getNonprofitOrganizationCertification()
    {
        return $this->container['nonprofit_organization_certification'];
    }

    /**
     * Sets nonprofit_organization_certification
     *
     * @param bool|null $nonprofit_organization_certification Certifies that the entity is a nonprofit organization established for charitable or similar purposes, exempt from income tax,  and restricted in the use and distribution of its assets under applicable law.
     *
     * @return self
     */
    public function setNonprofitOrganizationCertification($nonprofit_organization_certification)
    {
        $this->container['nonprofit_organization_certification'] = $nonprofit_organization_certification;

        return $this;
    }

    /**
     * Gets passive_nffe_no_substantial_us_owners_certification
     *
     * @return bool|null
     */
    public function getPassiveNffeNoSubstantialUsOwnersCertification()
    {
        return $this->container['passive_nffe_no_substantial_us_owners_certification'];
    }

    /**
     * Sets passive_nffe_no_substantial_us_owners_certification
     *
     * @param bool|null $passive_nffe_no_substantial_us_owners_certification Certifies that the passive NFFE has no substantial U.S. owners or controlling U.S. persons.
     *
     * @return self
     */
    public function setPassiveNffeNoSubstantialUsOwnersCertification($passive_nffe_no_substantial_us_owners_certification)
    {
        $this->container['passive_nffe_no_substantial_us_owners_certification'] = $passive_nffe_no_substantial_us_owners_certification;

        return $this;
    }

    /**
     * Gets passive_nffe_substantial_us_owners_provided_certification
     *
     * @return bool|null
     */
    public function getPassiveNffeSubstantialUsOwnersProvidedCertification()
    {
        return $this->container['passive_nffe_substantial_us_owners_provided_certification'];
    }

    /**
     * Sets passive_nffe_substantial_us_owners_provided_certification
     *
     * @param bool|null $passive_nffe_substantial_us_owners_provided_certification Certifies that the passive NFFE has provided the name, address, and TIN of each substantial U.S. owner or controlling U.S. person.
     *
     * @return self
     */
    public function setPassiveNffeSubstantialUsOwnersProvidedCertification($passive_nffe_substantial_us_owners_provided_certification)
    {
        $this->container['passive_nffe_substantial_us_owners_provided_certification'] = $passive_nffe_substantial_us_owners_provided_certification;

        return $this;
    }

    /**
     * Gets excepted_inter_affiliate_ffi_certification
     *
     * @return bool|null
     */
    public function getExceptedInterAffiliateFfiCertification()
    {
        return $this->container['excepted_inter_affiliate_ffi_certification'];
    }

    /**
     * Sets excepted_inter_affiliate_ffi_certification
     *
     * @param bool|null $excepted_inter_affiliate_ffi_certification Certifies that the entity is an inter-affiliate FFI meeting all conditions for exemption,  including limited account activity and payment interactions within its expanded affiliated group.
     *
     * @return self
     */
    public function setExceptedInterAffiliateFfiCertification($excepted_inter_affiliate_ffi_certification)
    {
        $this->container['excepted_inter_affiliate_ffi_certification'] = $excepted_inter_affiliate_ffi_certification;

        return $this;
    }

    /**
     * Gets substantial_us_owners
     *
     * @return \Avalara\SDK\Model\A1099\V2\SubstantialUsOwnerRequest[]|null
     */
    public function getSubstantialUsOwners()
    {
        return $this->container['substantial_us_owners'];
    }

    /**
     * Sets substantial_us_owners
     *
     * @param \Avalara\SDK\Model\A1099\V2\SubstantialUsOwnerRequest[]|null $substantial_us_owners The list of substantial U.S. owners of passive NFFE.
     *
     * @return self
     */
    public function setSubstantialUsOwners($substantial_us_owners)
    {
        $this->container['substantial_us_owners'] = $substantial_us_owners;

        return $this;
    }

    /**
     * Gets capacity_to_sign_certification
     *
     * @return bool|null
     */
    public function getCapacityToSignCertification()
    {
        return $this->container['capacity_to_sign_certification'];
    }

    /**
     * Sets capacity_to_sign_certification
     *
     * @param bool|null $capacity_to_sign_certification Certifies signer has the capacity to sign for the beneficial owner.
     *
     * @return self
     */
    public function setCapacityToSignCertification($capacity_to_sign_certification)
    {
        $this->container['capacity_to_sign_certification'] = $capacity_to_sign_certification;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return \DateTime|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param \DateTime|null $birthday The birthday of the individual associated with the form.
     *
     * @return self
     */
    public function setBirthday($birthday)
    {
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets employee_first_name
     *
     * @return string
     */
    public function getEmployeeFirstName()
    {
        return $this->container['employee_first_name'];
    }

    /**
     * Sets employee_first_name
     *
     * @param string $employee_first_name The first name of the employee.
     *
     * @return self
     */
    public function setEmployeeFirstName($employee_first_name)
    {
        $this->container['employee_first_name'] = $employee_first_name;

        return $this;
    }

    /**
     * Gets employee_middle_name
     *
     * @return string|null
     */
    public function getEmployeeMiddleName()
    {
        return $this->container['employee_middle_name'];
    }

    /**
     * Sets employee_middle_name
     *
     * @param string|null $employee_middle_name The middle name of the employee.
     *
     * @return self
     */
    public function setEmployeeMiddleName($employee_middle_name)
    {
        $this->container['employee_middle_name'] = $employee_middle_name;

        return $this;
    }

    /**
     * Gets employee_last_name
     *
     * @return string
     */
    public function getEmployeeLastName()
    {
        return $this->container['employee_last_name'];
    }

    /**
     * Sets employee_last_name
     *
     * @param string $employee_last_name The last name of the employee.
     *
     * @return self
     */
    public function setEmployeeLastName($employee_last_name)
    {
        $this->container['employee_last_name'] = $employee_last_name;

        return $this;
    }

    /**
     * Gets employee_name_suffix
     *
     * @return string|null
     */
    public function getEmployeeNameSuffix()
    {
        return $this->container['employee_name_suffix'];
    }

    /**
     * Sets employee_name_suffix
     *
     * @param string|null $employee_name_suffix The name suffix of the employee.
     *
     * @return self
     */
    public function setEmployeeNameSuffix($employee_name_suffix)
    {
        $this->container['employee_name_suffix'] = $employee_name_suffix;

        return $this;
    }

    /**
     * Gets marital_status
     *
     * @return string|null
     */
    public function getMaritalStatus()
    {
        return $this->container['marital_status'];
    }

    /**
     * Sets marital_status
     *
     * @param string|null $marital_status The marital status of the employee. Required unless exempt.  Available values:  - Single: Single or Married filing separately  - Married: Married filing jointly or qualifying surviving spouse  - MarriedBut: Head of household. Check only if you're unmarried and pay more than half the costs of keeping up a home for yourself and a qualifying individual.
     *
     * @return self
     */
    public function setMaritalStatus($marital_status)
    {
        $allowedValues = $this->getMaritalStatusAllowableValues();
        if (!is_null($marital_status) && !in_array($marital_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'marital_status', must be one of '%s'",
                    $marital_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['marital_status'] = $marital_status;

        return $this;
    }

    /**
     * Gets last_name_differs
     *
     * @return bool|null
     */
    public function getLastNameDiffers()
    {
        return $this->container['last_name_differs'];
    }

    /**
     * Sets last_name_differs
     *
     * @param bool|null $last_name_differs Indicates whether the last name differs from prior records.
     *
     * @return self
     */
    public function setLastNameDiffers($last_name_differs)
    {
        $this->container['last_name_differs'] = $last_name_differs;

        return $this;
    }

    /**
     * Gets num_allowances
     *
     * @return int|null
     */
    public function getNumAllowances()
    {
        return $this->container['num_allowances'];
    }

    /**
     * Sets num_allowances
     *
     * @param int|null $num_allowances The number of allowances claimed by the employee.
     *
     * @return self
     */
    public function setNumAllowances($num_allowances)
    {
        $this->container['num_allowances'] = $num_allowances;

        return $this;
    }

    /**
     * Gets other_dependents
     *
     * @return int|null
     */
    public function getOtherDependents()
    {
        return $this->container['other_dependents'];
    }

    /**
     * Sets other_dependents
     *
     * @param int|null $other_dependents The number of dependents other than allowances.
     *
     * @return self
     */
    public function setOtherDependents($other_dependents)
    {
        $this->container['other_dependents'] = $other_dependents;

        return $this;
    }

    /**
     * Gets non_job_income
     *
     * @return float|null
     */
    public function getNonJobIncome()
    {
        return $this->container['non_job_income'];
    }

    /**
     * Sets non_job_income
     *
     * @param float|null $non_job_income The amount of non-job income.
     *
     * @return self
     */
    public function setNonJobIncome($non_job_income)
    {
        $this->container['non_job_income'] = $non_job_income;

        return $this;
    }

    /**
     * Gets deductions
     *
     * @return float|null
     */
    public function getDeductions()
    {
        return $this->container['deductions'];
    }

    /**
     * Sets deductions
     *
     * @param float|null $deductions The amount of deductions claimed.
     *
     * @return self
     */
    public function setDeductions($deductions)
    {
        $this->container['deductions'] = $deductions;

        return $this;
    }

    /**
     * Gets additional_withheld
     *
     * @return float|null
     */
    public function getAdditionalWithheld()
    {
        return $this->container['additional_withheld'];
    }

    /**
     * Sets additional_withheld
     *
     * @param float|null $additional_withheld The additional amount withheld.
     *
     * @return self
     */
    public function setAdditionalWithheld($additional_withheld)
    {
        $this->container['additional_withheld'] = $additional_withheld;

        return $this;
    }

    /**
     * Gets exempt_from_withholding
     *
     * @return bool|null
     */
    public function getExemptFromWithholding()
    {
        return $this->container['exempt_from_withholding'];
    }

    /**
     * Sets exempt_from_withholding
     *
     * @param bool|null $exempt_from_withholding Indicates whether the employee is exempt from withholding.
     *
     * @return self
     */
    public function setExemptFromWithholding($exempt_from_withholding)
    {
        $this->container['exempt_from_withholding'] = $exempt_from_withholding;

        return $this;
    }

    /**
     * Gets office_code
     *
     * @return string|null
     */
    public function getOfficeCode()
    {
        return $this->container['office_code'];
    }

    /**
     * Sets office_code
     *
     * @param string|null $office_code The office code associated with the form.
     *
     * @return self
     */
    public function setOfficeCode($office_code)
    {
        $this->container['office_code'] = $office_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


