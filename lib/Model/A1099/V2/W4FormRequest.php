<?php
/**
 * W4FormRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * W4FormRequest Class Doc Comment
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class W4FormRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'W4FormRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'employee_first_name' => 'string',
        'employee_middle_name' => 'string',
        'employee_last_name' => 'string',
        'employee_name_suffix' => 'string',
        'tin_type' => 'string',
        'tin' => 'string',
        'address' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'marital_status' => 'string',
        'last_name_differs' => 'bool',
        'num_allowances' => 'int',
        'other_dependents' => 'int',
        'non_job_income' => 'float',
        'deductions' => 'float',
        'additional_withheld' => 'float',
        'exempt_from_withholding' => 'bool',
        'office_code' => 'string',
        'e_delivery_consented_at' => '\DateTime',
        'signature' => 'string',
        'company_id' => 'string',
        'reference_id' => 'string',
        'email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'employee_first_name' => null,
        'employee_middle_name' => null,
        'employee_last_name' => null,
        'employee_name_suffix' => null,
        'tin_type' => null,
        'tin' => null,
        'address' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'marital_status' => null,
        'last_name_differs' => null,
        'num_allowances' => 'int32',
        'other_dependents' => 'int32',
        'non_job_income' => 'float',
        'deductions' => 'float',
        'additional_withheld' => 'float',
        'exempt_from_withholding' => null,
        'office_code' => null,
        'e_delivery_consented_at' => 'date-time',
        'signature' => null,
        'company_id' => null,
        'reference_id' => null,
        'email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'employee_first_name' => 'employeeFirstName',
        'employee_middle_name' => 'employeeMiddleName',
        'employee_last_name' => 'employeeLastName',
        'employee_name_suffix' => 'employeeNameSuffix',
        'tin_type' => 'tinType',
        'tin' => 'tin',
        'address' => 'address',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'marital_status' => 'maritalStatus',
        'last_name_differs' => 'lastNameDiffers',
        'num_allowances' => 'numAllowances',
        'other_dependents' => 'otherDependents',
        'non_job_income' => 'nonJobIncome',
        'deductions' => 'deductions',
        'additional_withheld' => 'additionalWithheld',
        'exempt_from_withholding' => 'exemptFromWithholding',
        'office_code' => 'officeCode',
        'e_delivery_consented_at' => 'eDeliveryConsentedAt',
        'signature' => 'signature',
        'company_id' => 'companyId',
        'reference_id' => 'referenceId',
        'email' => 'email'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'employee_first_name' => 'setEmployeeFirstName',
        'employee_middle_name' => 'setEmployeeMiddleName',
        'employee_last_name' => 'setEmployeeLastName',
        'employee_name_suffix' => 'setEmployeeNameSuffix',
        'tin_type' => 'setTinType',
        'tin' => 'setTin',
        'address' => 'setAddress',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'marital_status' => 'setMaritalStatus',
        'last_name_differs' => 'setLastNameDiffers',
        'num_allowances' => 'setNumAllowances',
        'other_dependents' => 'setOtherDependents',
        'non_job_income' => 'setNonJobIncome',
        'deductions' => 'setDeductions',
        'additional_withheld' => 'setAdditionalWithheld',
        'exempt_from_withholding' => 'setExemptFromWithholding',
        'office_code' => 'setOfficeCode',
        'e_delivery_consented_at' => 'setEDeliveryConsentedAt',
        'signature' => 'setSignature',
        'company_id' => 'setCompanyId',
        'reference_id' => 'setReferenceId',
        'email' => 'setEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'employee_first_name' => 'getEmployeeFirstName',
        'employee_middle_name' => 'getEmployeeMiddleName',
        'employee_last_name' => 'getEmployeeLastName',
        'employee_name_suffix' => 'getEmployeeNameSuffix',
        'tin_type' => 'getTinType',
        'tin' => 'getTin',
        'address' => 'getAddress',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'marital_status' => 'getMaritalStatus',
        'last_name_differs' => 'getLastNameDiffers',
        'num_allowances' => 'getNumAllowances',
        'other_dependents' => 'getOtherDependents',
        'non_job_income' => 'getNonJobIncome',
        'deductions' => 'getDeductions',
        'additional_withheld' => 'getAdditionalWithheld',
        'exempt_from_withholding' => 'getExemptFromWithholding',
        'office_code' => 'getOfficeCode',
        'e_delivery_consented_at' => 'getEDeliveryConsentedAt',
        'signature' => 'getSignature',
        'company_id' => 'getCompanyId',
        'reference_id' => 'getReferenceId',
        'email' => 'getEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_W4 = 'W4';
    const TYPE_W8_BEN = 'W8Ben';
    const TYPE_W8_BEN_E = 'W8BenE';
    const TYPE_W8_IMY = 'W8Imy';
    const TYPE_W9 = 'W9';
    const STATE_AA = 'AA';
    const STATE_AE = 'AE';
    const STATE_AK = 'AK';
    const STATE_AL = 'AL';
    const STATE_AP = 'AP';
    const STATE_AR = 'AR';
    const STATE__AS = 'AS';
    const STATE_AZ = 'AZ';
    const STATE_CA = 'CA';
    const STATE_CO = 'CO';
    const STATE_CT = 'CT';
    const STATE_DC = 'DC';
    const STATE_DE = 'DE';
    const STATE_FL = 'FL';
    const STATE_FM = 'FM';
    const STATE_GA = 'GA';
    const STATE_GU = 'GU';
    const STATE_HI = 'HI';
    const STATE_IA = 'IA';
    const STATE_ID = 'ID';
    const STATE_IL = 'IL';
    const STATE_IN = 'IN';
    const STATE_KS = 'KS';
    const STATE_KY = 'KY';
    const STATE_LA = 'LA';
    const STATE_MA = 'MA';
    const STATE_MD = 'MD';
    const STATE_ME = 'ME';
    const STATE_MH = 'MH';
    const STATE_MI = 'MI';
    const STATE_MN = 'MN';
    const STATE_MO = 'MO';
    const STATE_MP = 'MP';
    const STATE_MS = 'MS';
    const STATE_MT = 'MT';
    const STATE_NC = 'NC';
    const STATE_ND = 'ND';
    const STATE_NE = 'NE';
    const STATE_NH = 'NH';
    const STATE_NJ = 'NJ';
    const STATE_NM = 'NM';
    const STATE_NV = 'NV';
    const STATE_NY = 'NY';
    const STATE_OH = 'OH';
    const STATE_OK = 'OK';
    const STATE__OR = 'OR';
    const STATE_PA = 'PA';
    const STATE_PR = 'PR';
    const STATE_PW = 'PW';
    const STATE_RI = 'RI';
    const STATE_SC = 'SC';
    const STATE_SD = 'SD';
    const STATE_TN = 'TN';
    const STATE_TX = 'TX';
    const STATE_UT = 'UT';
    const STATE_VA = 'VA';
    const STATE_VI = 'VI';
    const STATE_VT = 'VT';
    const STATE_WA = 'WA';
    const STATE_WI = 'WI';
    const STATE_WV = 'WV';
    const STATE_WY = 'WY';
    const MARITAL_STATUS_SINGLE = 'Single';
    const MARITAL_STATUS_MARRIED = 'Married';
    const MARITAL_STATUS_MARRIED_BUT = 'MarriedBut';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_W4,
            self::TYPE_W8_BEN,
            self::TYPE_W8_BEN_E,
            self::TYPE_W8_IMY,
            self::TYPE_W9,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_AA,
            self::STATE_AE,
            self::STATE_AK,
            self::STATE_AL,
            self::STATE_AP,
            self::STATE_AR,
            self::STATE__AS,
            self::STATE_AZ,
            self::STATE_CA,
            self::STATE_CO,
            self::STATE_CT,
            self::STATE_DC,
            self::STATE_DE,
            self::STATE_FL,
            self::STATE_FM,
            self::STATE_GA,
            self::STATE_GU,
            self::STATE_HI,
            self::STATE_IA,
            self::STATE_ID,
            self::STATE_IL,
            self::STATE_IN,
            self::STATE_KS,
            self::STATE_KY,
            self::STATE_LA,
            self::STATE_MA,
            self::STATE_MD,
            self::STATE_ME,
            self::STATE_MH,
            self::STATE_MI,
            self::STATE_MN,
            self::STATE_MO,
            self::STATE_MP,
            self::STATE_MS,
            self::STATE_MT,
            self::STATE_NC,
            self::STATE_ND,
            self::STATE_NE,
            self::STATE_NH,
            self::STATE_NJ,
            self::STATE_NM,
            self::STATE_NV,
            self::STATE_NY,
            self::STATE_OH,
            self::STATE_OK,
            self::STATE__OR,
            self::STATE_PA,
            self::STATE_PR,
            self::STATE_PW,
            self::STATE_RI,
            self::STATE_SC,
            self::STATE_SD,
            self::STATE_TN,
            self::STATE_TX,
            self::STATE_UT,
            self::STATE_VA,
            self::STATE_VI,
            self::STATE_VT,
            self::STATE_WA,
            self::STATE_WI,
            self::STATE_WV,
            self::STATE_WY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaritalStatusAllowableValues()
    {
        return [
            self::MARITAL_STATUS_SINGLE,
            self::MARITAL_STATUS_MARRIED,
            self::MARITAL_STATUS_MARRIED_BUT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['employee_first_name'] = $data['employee_first_name'] ?? null;
        $this->container['employee_middle_name'] = $data['employee_middle_name'] ?? null;
        $this->container['employee_last_name'] = $data['employee_last_name'] ?? null;
        $this->container['employee_name_suffix'] = $data['employee_name_suffix'] ?? null;
        $this->container['tin_type'] = $data['tin_type'] ?? null;
        $this->container['tin'] = $data['tin'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['marital_status'] = $data['marital_status'] ?? null;
        $this->container['last_name_differs'] = $data['last_name_differs'] ?? null;
        $this->container['num_allowances'] = $data['num_allowances'] ?? null;
        $this->container['other_dependents'] = $data['other_dependents'] ?? null;
        $this->container['non_job_income'] = $data['non_job_income'] ?? null;
        $this->container['deductions'] = $data['deductions'] ?? null;
        $this->container['additional_withheld'] = $data['additional_withheld'] ?? null;
        $this->container['exempt_from_withholding'] = $data['exempt_from_withholding'] ?? null;
        $this->container['office_code'] = $data['office_code'] ?? null;
        $this->container['e_delivery_consented_at'] = $data['e_delivery_consented_at'] ?? null;
        $this->container['signature'] = $data['signature'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['employee_first_name'] === null) {
            $invalidProperties[] = "'employee_first_name' can't be null";
        }
        if ($this->container['employee_last_name'] === null) {
            $invalidProperties[] = "'employee_last_name' can't be null";
        }
        if ($this->container['tin_type'] === null) {
            $invalidProperties[] = "'tin_type' can't be null";
        }
        if ($this->container['tin'] === null) {
            $invalidProperties[] = "'tin' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMaritalStatusAllowableValues();
        if (!is_null($this->container['marital_status']) && !in_array($this->container['marital_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'marital_status', must be one of '%s'",
                $this->container['marital_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The form type (always \"w4\" for this model).
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets employee_first_name
     *
     * @return string
     */
    public function getEmployeeFirstName()
    {
        return $this->container['employee_first_name'];
    }

    /**
     * Sets employee_first_name
     *
     * @param string $employee_first_name The first name of the employee.
     *
     * @return self
     */
    public function setEmployeeFirstName($employee_first_name)
    {
        $this->container['employee_first_name'] = $employee_first_name;

        return $this;
    }

    /**
     * Gets employee_middle_name
     *
     * @return string|null
     */
    public function getEmployeeMiddleName()
    {
        return $this->container['employee_middle_name'];
    }

    /**
     * Sets employee_middle_name
     *
     * @param string|null $employee_middle_name The middle name of the employee.
     *
     * @return self
     */
    public function setEmployeeMiddleName($employee_middle_name)
    {
        $this->container['employee_middle_name'] = $employee_middle_name;

        return $this;
    }

    /**
     * Gets employee_last_name
     *
     * @return string
     */
    public function getEmployeeLastName()
    {
        return $this->container['employee_last_name'];
    }

    /**
     * Sets employee_last_name
     *
     * @param string $employee_last_name The last name of the employee.
     *
     * @return self
     */
    public function setEmployeeLastName($employee_last_name)
    {
        $this->container['employee_last_name'] = $employee_last_name;

        return $this;
    }

    /**
     * Gets employee_name_suffix
     *
     * @return string|null
     */
    public function getEmployeeNameSuffix()
    {
        return $this->container['employee_name_suffix'];
    }

    /**
     * Sets employee_name_suffix
     *
     * @param string|null $employee_name_suffix The name suffix of the employee.
     *
     * @return self
     */
    public function setEmployeeNameSuffix($employee_name_suffix)
    {
        $this->container['employee_name_suffix'] = $employee_name_suffix;

        return $this;
    }

    /**
     * Gets tin_type
     *
     * @return string
     */
    public function getTinType()
    {
        return $this->container['tin_type'];
    }

    /**
     * Sets tin_type
     *
     * @param string $tin_type Tax Identification Number (TIN) type.
     *
     * @return self
     */
    public function setTinType($tin_type)
    {
        $this->container['tin_type'] = $tin_type;

        return $this;
    }

    /**
     * Gets tin
     *
     * @return string
     */
    public function getTin()
    {
        return $this->container['tin'];
    }

    /**
     * Sets tin
     *
     * @param string $tin The taxpayer identification number (TIN).
     *
     * @return self
     */
    public function setTin($tin)
    {
        $this->container['tin'] = $tin;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address The address of the employee. Required unless exempt.
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city The city of residence of the employee. Required unless exempt.
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The state of residence of the employee. Required unless exempt.
     *
     * @return self
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip The ZIP code of residence of the employee. Required unless exempt.
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets marital_status
     *
     * @return string|null
     */
    public function getMaritalStatus()
    {
        return $this->container['marital_status'];
    }

    /**
     * Sets marital_status
     *
     * @param string|null $marital_status The marital status of the employee. Required unless exempt.  Available values:  - Single: Single or Married filing separately  - Married: Married filing jointly or qualifying surviving spouse  - MarriedBut: Head of household. Check only if you're unmarried and pay more than half the costs of keeping up a home for yourself and a qualifying individual.
     *
     * @return self
     */
    public function setMaritalStatus($marital_status)
    {
        $allowedValues = $this->getMaritalStatusAllowableValues();
        if (!is_null($marital_status) && !in_array($marital_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'marital_status', must be one of '%s'",
                    $marital_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['marital_status'] = $marital_status;

        return $this;
    }

    /**
     * Gets last_name_differs
     *
     * @return bool|null
     */
    public function getLastNameDiffers()
    {
        return $this->container['last_name_differs'];
    }

    /**
     * Sets last_name_differs
     *
     * @param bool|null $last_name_differs Indicates whether the last name differs from prior records.
     *
     * @return self
     */
    public function setLastNameDiffers($last_name_differs)
    {
        $this->container['last_name_differs'] = $last_name_differs;

        return $this;
    }

    /**
     * Gets num_allowances
     *
     * @return int|null
     */
    public function getNumAllowances()
    {
        return $this->container['num_allowances'];
    }

    /**
     * Sets num_allowances
     *
     * @param int|null $num_allowances The number of allowances claimed by the employee.
     *
     * @return self
     */
    public function setNumAllowances($num_allowances)
    {
        $this->container['num_allowances'] = $num_allowances;

        return $this;
    }

    /**
     * Gets other_dependents
     *
     * @return int|null
     */
    public function getOtherDependents()
    {
        return $this->container['other_dependents'];
    }

    /**
     * Sets other_dependents
     *
     * @param int|null $other_dependents The number of dependents other than allowances.
     *
     * @return self
     */
    public function setOtherDependents($other_dependents)
    {
        $this->container['other_dependents'] = $other_dependents;

        return $this;
    }

    /**
     * Gets non_job_income
     *
     * @return float|null
     */
    public function getNonJobIncome()
    {
        return $this->container['non_job_income'];
    }

    /**
     * Sets non_job_income
     *
     * @param float|null $non_job_income The amount of non-job income.
     *
     * @return self
     */
    public function setNonJobIncome($non_job_income)
    {
        $this->container['non_job_income'] = $non_job_income;

        return $this;
    }

    /**
     * Gets deductions
     *
     * @return float|null
     */
    public function getDeductions()
    {
        return $this->container['deductions'];
    }

    /**
     * Sets deductions
     *
     * @param float|null $deductions The amount of deductions claimed.
     *
     * @return self
     */
    public function setDeductions($deductions)
    {
        $this->container['deductions'] = $deductions;

        return $this;
    }

    /**
     * Gets additional_withheld
     *
     * @return float|null
     */
    public function getAdditionalWithheld()
    {
        return $this->container['additional_withheld'];
    }

    /**
     * Sets additional_withheld
     *
     * @param float|null $additional_withheld The additional amount withheld.
     *
     * @return self
     */
    public function setAdditionalWithheld($additional_withheld)
    {
        $this->container['additional_withheld'] = $additional_withheld;

        return $this;
    }

    /**
     * Gets exempt_from_withholding
     *
     * @return bool|null
     */
    public function getExemptFromWithholding()
    {
        return $this->container['exempt_from_withholding'];
    }

    /**
     * Sets exempt_from_withholding
     *
     * @param bool|null $exempt_from_withholding Indicates whether the employee is exempt from withholding.
     *
     * @return self
     */
    public function setExemptFromWithholding($exempt_from_withholding)
    {
        $this->container['exempt_from_withholding'] = $exempt_from_withholding;

        return $this;
    }

    /**
     * Gets office_code
     *
     * @return string|null
     */
    public function getOfficeCode()
    {
        return $this->container['office_code'];
    }

    /**
     * Sets office_code
     *
     * @param string|null $office_code The office code associated with the form.
     *
     * @return self
     */
    public function setOfficeCode($office_code)
    {
        $this->container['office_code'] = $office_code;

        return $this;
    }

    /**
     * Gets e_delivery_consented_at
     *
     * @return \DateTime|null
     */
    public function getEDeliveryConsentedAt()
    {
        return $this->container['e_delivery_consented_at'];
    }

    /**
     * Sets e_delivery_consented_at
     *
     * @param \DateTime|null $e_delivery_consented_at The date when e-delivery was consented.
     *
     * @return self
     */
    public function setEDeliveryConsentedAt($e_delivery_consented_at)
    {
        $this->container['e_delivery_consented_at'] = $e_delivery_consented_at;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature The signature of the form.
     *
     * @return self
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string|null $company_id The ID of the associated company. Required when creating a form.
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id A reference identifier for the form.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of the individual associated with the form.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


