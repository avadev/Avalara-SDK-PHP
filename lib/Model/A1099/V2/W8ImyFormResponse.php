<?php
/**
 * W8ImyFormResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Use **username/password** or generate a **license key** from: *Avalara Portal → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * W8ImyFormResponse Class Doc Comment
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class W8ImyFormResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'W8ImyFormResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'citizenship_country' => 'string',
        'disregarded_entity' => 'string',
        'entity_type' => 'string',
        'fatca_status' => 'string',
        'residence_address' => 'string',
        'residence_city' => 'string',
        'residence_state' => 'string',
        'residence_zip' => 'string',
        'residence_country' => 'string',
        'residence_is_mailing' => 'bool',
        'mailing_address' => 'string',
        'mailing_city' => 'string',
        'mailing_state' => 'string',
        'mailing_zip' => 'string',
        'mailing_country' => 'string',
        'tin_type' => 'string',
        'tin' => 'string',
        'giin' => 'string',
        'foreign_tin' => 'string',
        'reference_number' => 'string',
        'disregarded_entity_fatca_status' => 'string',
        'disregarded_address' => 'string',
        'disregarded_city' => 'string',
        'disregarded_state' => 'string',
        'disregarded_zip' => 'string',
        'disregarded_country' => 'string',
        'disregarded_entity_giin' => 'string',
        'qualified_intermediary_certification' => 'bool',
        'qi_primary_withholding_responsibility_certification' => 'bool',
        'qi_withholding_responsibility_for_ptp_sales_certification' => 'bool',
        'qi_nominee_withholding_responsibility_for_ptp_distributions_certification' => 'bool',
        'qi_securities_lender_substitute_dividend_withholding_certification' => 'bool',
        'qi_withholding_and1099_reporting_responsibility_certification' => 'bool',
        'qi_form1099_or_fatca_reporting_responsibility_certification' => 'bool',
        'qi_opt_out_of_form1099_reporting_certification' => 'bool',
        'qi_withholding_rate_pool_certification' => 'bool',
        'qi_intermediary_or_flow_through_entity_documentation_certification' => 'bool',
        'qualified_derivatives_dealer_certification' => 'bool',
        'qdd_corporation' => 'bool',
        'qdd_partnership' => 'bool',
        'qdd_disregarded_entity' => 'bool',
        'nonqualified_intermediary_certification' => 'bool',
        'nqi_withholding_statement_transmission_certification' => 'bool',
        'nqi_withholding_rate_pool_compliance_certification' => 'bool',
        'nqi_qualified_securities_lender_certification' => 'bool',
        'nqi_alternative_withholding_statement_verification_certification' => 'bool',
        'territory_financial_institution_certification' => 'bool',
        'tfi_treated_as_us_person_certification' => 'bool',
        'tfi_withholding_statement_transmission_certification' => 'bool',
        'tfi_treated_as_us_person_for_ptp_sales_certification' => 'bool',
        'tfi_nominee_us_person_for_ptp_distributions_certification' => 'bool',
        'tfi_not_nominee_for_ptp_distributions_certification' => 'bool',
        'us_branch_non_effectively_connected_income_certification' => 'bool',
        'us_branch_agreement_to_be_treated_as_us_person_certification' => 'bool',
        'us_branch_withholding_statement_and_compliance_certification' => 'bool',
        'us_branch_acting_as_us_person_for_ptp_sales_certification' => 'bool',
        'us_branch_nominee_for_ptp_distributions_certification' => 'bool',
        'us_branch_not_nominee_for_ptp_distributions_certification' => 'bool',
        'withholding_foreign_partnership_or_trust_certification' => 'bool',
        'nonwithholding_foreign_entity_withholding_statement_certification' => 'bool',
        'foreign_entity_partner_in_lower_tier_partnership_certification' => 'bool',
        'foreign_partnership_amount_realized_section1446_f_certification' => 'bool',
        'foreign_partnership_modified_amount_realized_certification' => 'bool',
        'foreign_grantor_trust_amount_realized_allocation_certification' => 'bool',
        'alternative_withholding_statement_reliance_certification' => 'bool',
        'np_ffi_with_exempt_beneficial_owners_certification' => 'bool',
        'ffi_sponsoring_entity' => 'string',
        'investment_entity_certification' => 'bool',
        'controlled_foreign_corporation_certification' => 'bool',
        'owner_documented_ffi_certification' => 'bool',
        'owner_documented_ffi_reporting_statement_certification' => 'bool',
        'owner_documented_ffi_auditor_letter_certification' => 'bool',
        'compliant_nonregistering_local_bank_certification' => 'bool',
        'compliant_ffi_low_value_accounts_certification' => 'bool',
        'sponsored_closely_held_entity_sponsoring_entity' => 'string',
        'sponsored_closely_held_investment_vehicle_certification' => 'bool',
        'compliant_limited_life_debt_entity_certification' => 'bool',
        'investment_entity_no_financial_accounts_certification' => 'bool',
        'restricted_distributor_certification' => 'bool',
        'restricted_distributor_agreement_certification' => 'bool',
        'restricted_distributor_preexisting_sales_compliance_certification' => 'bool',
        'foreign_central_bank_of_issue_certification' => 'bool',
        'nonreporting_iga_ffi_certification' => 'bool',
        'iga_country' => 'string',
        'iga_model' => 'string',
        'iga_legal_status_treatment' => 'string',
        'iga_ffi_trustee_or_sponsor' => 'string',
        'iga_ffi_trustee_is_foreign' => 'bool',
        'treaty_qualified_pension_fund_certification' => 'bool',
        'qualified_retirement_fund_certification' => 'bool',
        'narrow_participation_retirement_fund_certification' => 'bool',
        'section401_a_equivalent_pension_plan_certification' => 'bool',
        'investment_entity_for_retirement_funds_certification' => 'bool',
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => 'bool',
        'excepted_nonfinancial_group_entity_certification' => 'bool',
        'excepted_nonfinancial_start_up_certification' => 'bool',
        'startup_formation_or_resolution_date' => '\DateTime',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => 'bool',
        'nonfinancial_entity_filing_date' => '\DateTime',
        'publicly_traded_nffe_certification' => 'bool',
        'publicly_traded_nffe_securities_market' => 'string',
        'nffe_affiliate_of_publicly_traded_entity_certification' => 'bool',
        'publicly_traded_entity' => 'string',
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => 'string',
        'excepted_territory_nffe_certification' => 'bool',
        'active_nffe_certification' => 'bool',
        'passive_nffe_certification' => 'bool',
        'sponsored_direct_reporting_nffe_certification' => 'bool',
        'direct_reporting_nffe_sponsoring_entity' => 'string',
        'signer_name' => 'string',
        'id' => 'string',
        'type' => 'string',
        'entry_status' => 'string',
        'entry_status_date' => '\DateTime',
        'reference_id' => 'string',
        'company_id' => 'string',
        'display_name' => 'string',
        'email' => 'string',
        'archived' => 'bool',
        'signature' => 'string',
        'signed_date' => '\DateTime',
        'e_delivery_consented_at' => '\DateTime',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'citizenship_country' => null,
        'disregarded_entity' => null,
        'entity_type' => null,
        'fatca_status' => null,
        'residence_address' => null,
        'residence_city' => null,
        'residence_state' => null,
        'residence_zip' => null,
        'residence_country' => null,
        'residence_is_mailing' => null,
        'mailing_address' => null,
        'mailing_city' => null,
        'mailing_state' => null,
        'mailing_zip' => null,
        'mailing_country' => null,
        'tin_type' => null,
        'tin' => null,
        'giin' => null,
        'foreign_tin' => null,
        'reference_number' => null,
        'disregarded_entity_fatca_status' => null,
        'disregarded_address' => null,
        'disregarded_city' => null,
        'disregarded_state' => null,
        'disregarded_zip' => null,
        'disregarded_country' => null,
        'disregarded_entity_giin' => null,
        'qualified_intermediary_certification' => null,
        'qi_primary_withholding_responsibility_certification' => null,
        'qi_withholding_responsibility_for_ptp_sales_certification' => null,
        'qi_nominee_withholding_responsibility_for_ptp_distributions_certification' => null,
        'qi_securities_lender_substitute_dividend_withholding_certification' => null,
        'qi_withholding_and1099_reporting_responsibility_certification' => null,
        'qi_form1099_or_fatca_reporting_responsibility_certification' => null,
        'qi_opt_out_of_form1099_reporting_certification' => null,
        'qi_withholding_rate_pool_certification' => null,
        'qi_intermediary_or_flow_through_entity_documentation_certification' => null,
        'qualified_derivatives_dealer_certification' => null,
        'qdd_corporation' => null,
        'qdd_partnership' => null,
        'qdd_disregarded_entity' => null,
        'nonqualified_intermediary_certification' => null,
        'nqi_withholding_statement_transmission_certification' => null,
        'nqi_withholding_rate_pool_compliance_certification' => null,
        'nqi_qualified_securities_lender_certification' => null,
        'nqi_alternative_withholding_statement_verification_certification' => null,
        'territory_financial_institution_certification' => null,
        'tfi_treated_as_us_person_certification' => null,
        'tfi_withholding_statement_transmission_certification' => null,
        'tfi_treated_as_us_person_for_ptp_sales_certification' => null,
        'tfi_nominee_us_person_for_ptp_distributions_certification' => null,
        'tfi_not_nominee_for_ptp_distributions_certification' => null,
        'us_branch_non_effectively_connected_income_certification' => null,
        'us_branch_agreement_to_be_treated_as_us_person_certification' => null,
        'us_branch_withholding_statement_and_compliance_certification' => null,
        'us_branch_acting_as_us_person_for_ptp_sales_certification' => null,
        'us_branch_nominee_for_ptp_distributions_certification' => null,
        'us_branch_not_nominee_for_ptp_distributions_certification' => null,
        'withholding_foreign_partnership_or_trust_certification' => null,
        'nonwithholding_foreign_entity_withholding_statement_certification' => null,
        'foreign_entity_partner_in_lower_tier_partnership_certification' => null,
        'foreign_partnership_amount_realized_section1446_f_certification' => null,
        'foreign_partnership_modified_amount_realized_certification' => null,
        'foreign_grantor_trust_amount_realized_allocation_certification' => null,
        'alternative_withholding_statement_reliance_certification' => null,
        'np_ffi_with_exempt_beneficial_owners_certification' => null,
        'ffi_sponsoring_entity' => null,
        'investment_entity_certification' => null,
        'controlled_foreign_corporation_certification' => null,
        'owner_documented_ffi_certification' => null,
        'owner_documented_ffi_reporting_statement_certification' => null,
        'owner_documented_ffi_auditor_letter_certification' => null,
        'compliant_nonregistering_local_bank_certification' => null,
        'compliant_ffi_low_value_accounts_certification' => null,
        'sponsored_closely_held_entity_sponsoring_entity' => null,
        'sponsored_closely_held_investment_vehicle_certification' => null,
        'compliant_limited_life_debt_entity_certification' => null,
        'investment_entity_no_financial_accounts_certification' => null,
        'restricted_distributor_certification' => null,
        'restricted_distributor_agreement_certification' => null,
        'restricted_distributor_preexisting_sales_compliance_certification' => null,
        'foreign_central_bank_of_issue_certification' => null,
        'nonreporting_iga_ffi_certification' => null,
        'iga_country' => null,
        'iga_model' => null,
        'iga_legal_status_treatment' => null,
        'iga_ffi_trustee_or_sponsor' => null,
        'iga_ffi_trustee_is_foreign' => null,
        'treaty_qualified_pension_fund_certification' => null,
        'qualified_retirement_fund_certification' => null,
        'narrow_participation_retirement_fund_certification' => null,
        'section401_a_equivalent_pension_plan_certification' => null,
        'investment_entity_for_retirement_funds_certification' => null,
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => null,
        'excepted_nonfinancial_group_entity_certification' => null,
        'excepted_nonfinancial_start_up_certification' => null,
        'startup_formation_or_resolution_date' => 'date-time',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => null,
        'nonfinancial_entity_filing_date' => 'date-time',
        'publicly_traded_nffe_certification' => null,
        'publicly_traded_nffe_securities_market' => null,
        'nffe_affiliate_of_publicly_traded_entity_certification' => null,
        'publicly_traded_entity' => null,
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => null,
        'excepted_territory_nffe_certification' => null,
        'active_nffe_certification' => null,
        'passive_nffe_certification' => null,
        'sponsored_direct_reporting_nffe_certification' => null,
        'direct_reporting_nffe_sponsoring_entity' => null,
        'signer_name' => null,
        'id' => null,
        'type' => null,
        'entry_status' => null,
        'entry_status_date' => 'date-time',
        'reference_id' => null,
        'company_id' => null,
        'display_name' => null,
        'email' => null,
        'archived' => null,
        'signature' => null,
        'signed_date' => 'date-time',
        'e_delivery_consented_at' => 'date-time',
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'citizenship_country' => 'citizenshipCountry',
        'disregarded_entity' => 'disregardedEntity',
        'entity_type' => 'entityType',
        'fatca_status' => 'fatcaStatus',
        'residence_address' => 'residenceAddress',
        'residence_city' => 'residenceCity',
        'residence_state' => 'residenceState',
        'residence_zip' => 'residenceZip',
        'residence_country' => 'residenceCountry',
        'residence_is_mailing' => 'residenceIsMailing',
        'mailing_address' => 'mailingAddress',
        'mailing_city' => 'mailingCity',
        'mailing_state' => 'mailingState',
        'mailing_zip' => 'mailingZip',
        'mailing_country' => 'mailingCountry',
        'tin_type' => 'tinType',
        'tin' => 'tin',
        'giin' => 'giin',
        'foreign_tin' => 'foreignTin',
        'reference_number' => 'referenceNumber',
        'disregarded_entity_fatca_status' => 'disregardedEntityFatcaStatus',
        'disregarded_address' => 'disregardedAddress',
        'disregarded_city' => 'disregardedCity',
        'disregarded_state' => 'disregardedState',
        'disregarded_zip' => 'disregardedZip',
        'disregarded_country' => 'disregardedCountry',
        'disregarded_entity_giin' => 'disregardedEntityGiin',
        'qualified_intermediary_certification' => 'qualifiedIntermediaryCertification',
        'qi_primary_withholding_responsibility_certification' => 'qiPrimaryWithholdingResponsibilityCertification',
        'qi_withholding_responsibility_for_ptp_sales_certification' => 'qiWithholdingResponsibilityForPtpSalesCertification',
        'qi_nominee_withholding_responsibility_for_ptp_distributions_certification' => 'qiNomineeWithholdingResponsibilityForPtpDistributionsCertification',
        'qi_securities_lender_substitute_dividend_withholding_certification' => 'qiSecuritiesLenderSubstituteDividendWithholdingCertification',
        'qi_withholding_and1099_reporting_responsibility_certification' => 'qiWithholdingAnd1099ReportingResponsibilityCertification',
        'qi_form1099_or_fatca_reporting_responsibility_certification' => 'qiForm1099OrFatcaReportingResponsibilityCertification',
        'qi_opt_out_of_form1099_reporting_certification' => 'qiOptOutOfForm1099ReportingCertification',
        'qi_withholding_rate_pool_certification' => 'qiWithholdingRatePoolCertification',
        'qi_intermediary_or_flow_through_entity_documentation_certification' => 'qiIntermediaryOrFlowThroughEntityDocumentationCertification',
        'qualified_derivatives_dealer_certification' => 'qualifiedDerivativesDealerCertification',
        'qdd_corporation' => 'qddCorporation',
        'qdd_partnership' => 'qddPartnership',
        'qdd_disregarded_entity' => 'qddDisregardedEntity',
        'nonqualified_intermediary_certification' => 'nonqualifiedIntermediaryCertification',
        'nqi_withholding_statement_transmission_certification' => 'nqiWithholdingStatementTransmissionCertification',
        'nqi_withholding_rate_pool_compliance_certification' => 'nqiWithholdingRatePoolComplianceCertification',
        'nqi_qualified_securities_lender_certification' => 'nqiQualifiedSecuritiesLenderCertification',
        'nqi_alternative_withholding_statement_verification_certification' => 'nqiAlternativeWithholdingStatementVerificationCertification',
        'territory_financial_institution_certification' => 'territoryFinancialInstitutionCertification',
        'tfi_treated_as_us_person_certification' => 'tfiTreatedAsUsPersonCertification',
        'tfi_withholding_statement_transmission_certification' => 'tfiWithholdingStatementTransmissionCertification',
        'tfi_treated_as_us_person_for_ptp_sales_certification' => 'tfiTreatedAsUsPersonForPtpSalesCertification',
        'tfi_nominee_us_person_for_ptp_distributions_certification' => 'tfiNomineeUsPersonForPtpDistributionsCertification',
        'tfi_not_nominee_for_ptp_distributions_certification' => 'tfiNotNomineeForPtpDistributionsCertification',
        'us_branch_non_effectively_connected_income_certification' => 'usBranchNonEffectivelyConnectedIncomeCertification',
        'us_branch_agreement_to_be_treated_as_us_person_certification' => 'usBranchAgreementToBeTreatedAsUsPersonCertification',
        'us_branch_withholding_statement_and_compliance_certification' => 'usBranchWithholdingStatementAndComplianceCertification',
        'us_branch_acting_as_us_person_for_ptp_sales_certification' => 'usBranchActingAsUsPersonForPtpSalesCertification',
        'us_branch_nominee_for_ptp_distributions_certification' => 'usBranchNomineeForPtpDistributionsCertification',
        'us_branch_not_nominee_for_ptp_distributions_certification' => 'usBranchNotNomineeForPtpDistributionsCertification',
        'withholding_foreign_partnership_or_trust_certification' => 'withholdingForeignPartnershipOrTrustCertification',
        'nonwithholding_foreign_entity_withholding_statement_certification' => 'nonwithholdingForeignEntityWithholdingStatementCertification',
        'foreign_entity_partner_in_lower_tier_partnership_certification' => 'foreignEntityPartnerInLowerTierPartnershipCertification',
        'foreign_partnership_amount_realized_section1446_f_certification' => 'foreignPartnershipAmountRealizedSection1446FCertification',
        'foreign_partnership_modified_amount_realized_certification' => 'foreignPartnershipModifiedAmountRealizedCertification',
        'foreign_grantor_trust_amount_realized_allocation_certification' => 'foreignGrantorTrustAmountRealizedAllocationCertification',
        'alternative_withholding_statement_reliance_certification' => 'alternativeWithholdingStatementRelianceCertification',
        'np_ffi_with_exempt_beneficial_owners_certification' => 'npFfiWithExemptBeneficialOwnersCertification',
        'ffi_sponsoring_entity' => 'ffiSponsoringEntity',
        'investment_entity_certification' => 'investmentEntityCertification',
        'controlled_foreign_corporation_certification' => 'controlledForeignCorporationCertification',
        'owner_documented_ffi_certification' => 'ownerDocumentedFfiCertification',
        'owner_documented_ffi_reporting_statement_certification' => 'ownerDocumentedFfiReportingStatementCertification',
        'owner_documented_ffi_auditor_letter_certification' => 'ownerDocumentedFfiAuditorLetterCertification',
        'compliant_nonregistering_local_bank_certification' => 'compliantNonregisteringLocalBankCertification',
        'compliant_ffi_low_value_accounts_certification' => 'compliantFfiLowValueAccountsCertification',
        'sponsored_closely_held_entity_sponsoring_entity' => 'sponsoredCloselyHeldEntitySponsoringEntity',
        'sponsored_closely_held_investment_vehicle_certification' => 'sponsoredCloselyHeldInvestmentVehicleCertification',
        'compliant_limited_life_debt_entity_certification' => 'compliantLimitedLifeDebtEntityCertification',
        'investment_entity_no_financial_accounts_certification' => 'investmentEntityNoFinancialAccountsCertification',
        'restricted_distributor_certification' => 'restrictedDistributorCertification',
        'restricted_distributor_agreement_certification' => 'restrictedDistributorAgreementCertification',
        'restricted_distributor_preexisting_sales_compliance_certification' => 'restrictedDistributorPreexistingSalesComplianceCertification',
        'foreign_central_bank_of_issue_certification' => 'foreignCentralBankOfIssueCertification',
        'nonreporting_iga_ffi_certification' => 'nonreportingIgaFfiCertification',
        'iga_country' => 'igaCountry',
        'iga_model' => 'igaModel',
        'iga_legal_status_treatment' => 'igaLegalStatusTreatment',
        'iga_ffi_trustee_or_sponsor' => 'igaFfiTrusteeOrSponsor',
        'iga_ffi_trustee_is_foreign' => 'igaFfiTrusteeIsForeign',
        'treaty_qualified_pension_fund_certification' => 'treatyQualifiedPensionFundCertification',
        'qualified_retirement_fund_certification' => 'qualifiedRetirementFundCertification',
        'narrow_participation_retirement_fund_certification' => 'narrowParticipationRetirementFundCertification',
        'section401_a_equivalent_pension_plan_certification' => 'section401AEquivalentPensionPlanCertification',
        'investment_entity_for_retirement_funds_certification' => 'investmentEntityForRetirementFundsCertification',
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => 'exemptBeneficialOwnerSponsoredRetirementFundCertification',
        'excepted_nonfinancial_group_entity_certification' => 'exceptedNonfinancialGroupEntityCertification',
        'excepted_nonfinancial_start_up_certification' => 'exceptedNonfinancialStartUpCertification',
        'startup_formation_or_resolution_date' => 'startupFormationOrResolutionDate',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => 'exceptedNonfinancialEntityInLiquidationOrBankruptcyCertification',
        'nonfinancial_entity_filing_date' => 'nonfinancialEntityFilingDate',
        'publicly_traded_nffe_certification' => 'publiclyTradedNffeCertification',
        'publicly_traded_nffe_securities_market' => 'publiclyTradedNffeSecuritiesMarket',
        'nffe_affiliate_of_publicly_traded_entity_certification' => 'nffeAffiliateOfPubliclyTradedEntityCertification',
        'publicly_traded_entity' => 'publiclyTradedEntity',
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => 'nffeAffiliateOfPubliclyTradedEntitySecuritiesMarket',
        'excepted_territory_nffe_certification' => 'exceptedTerritoryNffeCertification',
        'active_nffe_certification' => 'activeNffeCertification',
        'passive_nffe_certification' => 'passiveNffeCertification',
        'sponsored_direct_reporting_nffe_certification' => 'sponsoredDirectReportingNffeCertification',
        'direct_reporting_nffe_sponsoring_entity' => 'directReportingNffeSponsoringEntity',
        'signer_name' => 'signerName',
        'id' => 'id',
        'type' => 'type',
        'entry_status' => 'entryStatus',
        'entry_status_date' => 'entryStatusDate',
        'reference_id' => 'referenceId',
        'company_id' => 'companyId',
        'display_name' => 'displayName',
        'email' => 'email',
        'archived' => 'archived',
        'signature' => 'signature',
        'signed_date' => 'signedDate',
        'e_delivery_consented_at' => 'eDeliveryConsentedAt',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'citizenship_country' => 'setCitizenshipCountry',
        'disregarded_entity' => 'setDisregardedEntity',
        'entity_type' => 'setEntityType',
        'fatca_status' => 'setFatcaStatus',
        'residence_address' => 'setResidenceAddress',
        'residence_city' => 'setResidenceCity',
        'residence_state' => 'setResidenceState',
        'residence_zip' => 'setResidenceZip',
        'residence_country' => 'setResidenceCountry',
        'residence_is_mailing' => 'setResidenceIsMailing',
        'mailing_address' => 'setMailingAddress',
        'mailing_city' => 'setMailingCity',
        'mailing_state' => 'setMailingState',
        'mailing_zip' => 'setMailingZip',
        'mailing_country' => 'setMailingCountry',
        'tin_type' => 'setTinType',
        'tin' => 'setTin',
        'giin' => 'setGiin',
        'foreign_tin' => 'setForeignTin',
        'reference_number' => 'setReferenceNumber',
        'disregarded_entity_fatca_status' => 'setDisregardedEntityFatcaStatus',
        'disregarded_address' => 'setDisregardedAddress',
        'disregarded_city' => 'setDisregardedCity',
        'disregarded_state' => 'setDisregardedState',
        'disregarded_zip' => 'setDisregardedZip',
        'disregarded_country' => 'setDisregardedCountry',
        'disregarded_entity_giin' => 'setDisregardedEntityGiin',
        'qualified_intermediary_certification' => 'setQualifiedIntermediaryCertification',
        'qi_primary_withholding_responsibility_certification' => 'setQiPrimaryWithholdingResponsibilityCertification',
        'qi_withholding_responsibility_for_ptp_sales_certification' => 'setQiWithholdingResponsibilityForPtpSalesCertification',
        'qi_nominee_withholding_responsibility_for_ptp_distributions_certification' => 'setQiNomineeWithholdingResponsibilityForPtpDistributionsCertification',
        'qi_securities_lender_substitute_dividend_withholding_certification' => 'setQiSecuritiesLenderSubstituteDividendWithholdingCertification',
        'qi_withholding_and1099_reporting_responsibility_certification' => 'setQiWithholdingAnd1099ReportingResponsibilityCertification',
        'qi_form1099_or_fatca_reporting_responsibility_certification' => 'setQiForm1099OrFatcaReportingResponsibilityCertification',
        'qi_opt_out_of_form1099_reporting_certification' => 'setQiOptOutOfForm1099ReportingCertification',
        'qi_withholding_rate_pool_certification' => 'setQiWithholdingRatePoolCertification',
        'qi_intermediary_or_flow_through_entity_documentation_certification' => 'setQiIntermediaryOrFlowThroughEntityDocumentationCertification',
        'qualified_derivatives_dealer_certification' => 'setQualifiedDerivativesDealerCertification',
        'qdd_corporation' => 'setQddCorporation',
        'qdd_partnership' => 'setQddPartnership',
        'qdd_disregarded_entity' => 'setQddDisregardedEntity',
        'nonqualified_intermediary_certification' => 'setNonqualifiedIntermediaryCertification',
        'nqi_withholding_statement_transmission_certification' => 'setNqiWithholdingStatementTransmissionCertification',
        'nqi_withholding_rate_pool_compliance_certification' => 'setNqiWithholdingRatePoolComplianceCertification',
        'nqi_qualified_securities_lender_certification' => 'setNqiQualifiedSecuritiesLenderCertification',
        'nqi_alternative_withholding_statement_verification_certification' => 'setNqiAlternativeWithholdingStatementVerificationCertification',
        'territory_financial_institution_certification' => 'setTerritoryFinancialInstitutionCertification',
        'tfi_treated_as_us_person_certification' => 'setTfiTreatedAsUsPersonCertification',
        'tfi_withholding_statement_transmission_certification' => 'setTfiWithholdingStatementTransmissionCertification',
        'tfi_treated_as_us_person_for_ptp_sales_certification' => 'setTfiTreatedAsUsPersonForPtpSalesCertification',
        'tfi_nominee_us_person_for_ptp_distributions_certification' => 'setTfiNomineeUsPersonForPtpDistributionsCertification',
        'tfi_not_nominee_for_ptp_distributions_certification' => 'setTfiNotNomineeForPtpDistributionsCertification',
        'us_branch_non_effectively_connected_income_certification' => 'setUsBranchNonEffectivelyConnectedIncomeCertification',
        'us_branch_agreement_to_be_treated_as_us_person_certification' => 'setUsBranchAgreementToBeTreatedAsUsPersonCertification',
        'us_branch_withholding_statement_and_compliance_certification' => 'setUsBranchWithholdingStatementAndComplianceCertification',
        'us_branch_acting_as_us_person_for_ptp_sales_certification' => 'setUsBranchActingAsUsPersonForPtpSalesCertification',
        'us_branch_nominee_for_ptp_distributions_certification' => 'setUsBranchNomineeForPtpDistributionsCertification',
        'us_branch_not_nominee_for_ptp_distributions_certification' => 'setUsBranchNotNomineeForPtpDistributionsCertification',
        'withholding_foreign_partnership_or_trust_certification' => 'setWithholdingForeignPartnershipOrTrustCertification',
        'nonwithholding_foreign_entity_withholding_statement_certification' => 'setNonwithholdingForeignEntityWithholdingStatementCertification',
        'foreign_entity_partner_in_lower_tier_partnership_certification' => 'setForeignEntityPartnerInLowerTierPartnershipCertification',
        'foreign_partnership_amount_realized_section1446_f_certification' => 'setForeignPartnershipAmountRealizedSection1446FCertification',
        'foreign_partnership_modified_amount_realized_certification' => 'setForeignPartnershipModifiedAmountRealizedCertification',
        'foreign_grantor_trust_amount_realized_allocation_certification' => 'setForeignGrantorTrustAmountRealizedAllocationCertification',
        'alternative_withholding_statement_reliance_certification' => 'setAlternativeWithholdingStatementRelianceCertification',
        'np_ffi_with_exempt_beneficial_owners_certification' => 'setNpFfiWithExemptBeneficialOwnersCertification',
        'ffi_sponsoring_entity' => 'setFfiSponsoringEntity',
        'investment_entity_certification' => 'setInvestmentEntityCertification',
        'controlled_foreign_corporation_certification' => 'setControlledForeignCorporationCertification',
        'owner_documented_ffi_certification' => 'setOwnerDocumentedFfiCertification',
        'owner_documented_ffi_reporting_statement_certification' => 'setOwnerDocumentedFfiReportingStatementCertification',
        'owner_documented_ffi_auditor_letter_certification' => 'setOwnerDocumentedFfiAuditorLetterCertification',
        'compliant_nonregistering_local_bank_certification' => 'setCompliantNonregisteringLocalBankCertification',
        'compliant_ffi_low_value_accounts_certification' => 'setCompliantFfiLowValueAccountsCertification',
        'sponsored_closely_held_entity_sponsoring_entity' => 'setSponsoredCloselyHeldEntitySponsoringEntity',
        'sponsored_closely_held_investment_vehicle_certification' => 'setSponsoredCloselyHeldInvestmentVehicleCertification',
        'compliant_limited_life_debt_entity_certification' => 'setCompliantLimitedLifeDebtEntityCertification',
        'investment_entity_no_financial_accounts_certification' => 'setInvestmentEntityNoFinancialAccountsCertification',
        'restricted_distributor_certification' => 'setRestrictedDistributorCertification',
        'restricted_distributor_agreement_certification' => 'setRestrictedDistributorAgreementCertification',
        'restricted_distributor_preexisting_sales_compliance_certification' => 'setRestrictedDistributorPreexistingSalesComplianceCertification',
        'foreign_central_bank_of_issue_certification' => 'setForeignCentralBankOfIssueCertification',
        'nonreporting_iga_ffi_certification' => 'setNonreportingIgaFfiCertification',
        'iga_country' => 'setIgaCountry',
        'iga_model' => 'setIgaModel',
        'iga_legal_status_treatment' => 'setIgaLegalStatusTreatment',
        'iga_ffi_trustee_or_sponsor' => 'setIgaFfiTrusteeOrSponsor',
        'iga_ffi_trustee_is_foreign' => 'setIgaFfiTrusteeIsForeign',
        'treaty_qualified_pension_fund_certification' => 'setTreatyQualifiedPensionFundCertification',
        'qualified_retirement_fund_certification' => 'setQualifiedRetirementFundCertification',
        'narrow_participation_retirement_fund_certification' => 'setNarrowParticipationRetirementFundCertification',
        'section401_a_equivalent_pension_plan_certification' => 'setSection401AEquivalentPensionPlanCertification',
        'investment_entity_for_retirement_funds_certification' => 'setInvestmentEntityForRetirementFundsCertification',
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => 'setExemptBeneficialOwnerSponsoredRetirementFundCertification',
        'excepted_nonfinancial_group_entity_certification' => 'setExceptedNonfinancialGroupEntityCertification',
        'excepted_nonfinancial_start_up_certification' => 'setExceptedNonfinancialStartUpCertification',
        'startup_formation_or_resolution_date' => 'setStartupFormationOrResolutionDate',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => 'setExceptedNonfinancialEntityInLiquidationOrBankruptcyCertification',
        'nonfinancial_entity_filing_date' => 'setNonfinancialEntityFilingDate',
        'publicly_traded_nffe_certification' => 'setPubliclyTradedNffeCertification',
        'publicly_traded_nffe_securities_market' => 'setPubliclyTradedNffeSecuritiesMarket',
        'nffe_affiliate_of_publicly_traded_entity_certification' => 'setNffeAffiliateOfPubliclyTradedEntityCertification',
        'publicly_traded_entity' => 'setPubliclyTradedEntity',
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => 'setNffeAffiliateOfPubliclyTradedEntitySecuritiesMarket',
        'excepted_territory_nffe_certification' => 'setExceptedTerritoryNffeCertification',
        'active_nffe_certification' => 'setActiveNffeCertification',
        'passive_nffe_certification' => 'setPassiveNffeCertification',
        'sponsored_direct_reporting_nffe_certification' => 'setSponsoredDirectReportingNffeCertification',
        'direct_reporting_nffe_sponsoring_entity' => 'setDirectReportingNffeSponsoringEntity',
        'signer_name' => 'setSignerName',
        'id' => 'setId',
        'type' => 'setType',
        'entry_status' => 'setEntryStatus',
        'entry_status_date' => 'setEntryStatusDate',
        'reference_id' => 'setReferenceId',
        'company_id' => 'setCompanyId',
        'display_name' => 'setDisplayName',
        'email' => 'setEmail',
        'archived' => 'setArchived',
        'signature' => 'setSignature',
        'signed_date' => 'setSignedDate',
        'e_delivery_consented_at' => 'setEDeliveryConsentedAt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'citizenship_country' => 'getCitizenshipCountry',
        'disregarded_entity' => 'getDisregardedEntity',
        'entity_type' => 'getEntityType',
        'fatca_status' => 'getFatcaStatus',
        'residence_address' => 'getResidenceAddress',
        'residence_city' => 'getResidenceCity',
        'residence_state' => 'getResidenceState',
        'residence_zip' => 'getResidenceZip',
        'residence_country' => 'getResidenceCountry',
        'residence_is_mailing' => 'getResidenceIsMailing',
        'mailing_address' => 'getMailingAddress',
        'mailing_city' => 'getMailingCity',
        'mailing_state' => 'getMailingState',
        'mailing_zip' => 'getMailingZip',
        'mailing_country' => 'getMailingCountry',
        'tin_type' => 'getTinType',
        'tin' => 'getTin',
        'giin' => 'getGiin',
        'foreign_tin' => 'getForeignTin',
        'reference_number' => 'getReferenceNumber',
        'disregarded_entity_fatca_status' => 'getDisregardedEntityFatcaStatus',
        'disregarded_address' => 'getDisregardedAddress',
        'disregarded_city' => 'getDisregardedCity',
        'disregarded_state' => 'getDisregardedState',
        'disregarded_zip' => 'getDisregardedZip',
        'disregarded_country' => 'getDisregardedCountry',
        'disregarded_entity_giin' => 'getDisregardedEntityGiin',
        'qualified_intermediary_certification' => 'getQualifiedIntermediaryCertification',
        'qi_primary_withholding_responsibility_certification' => 'getQiPrimaryWithholdingResponsibilityCertification',
        'qi_withholding_responsibility_for_ptp_sales_certification' => 'getQiWithholdingResponsibilityForPtpSalesCertification',
        'qi_nominee_withholding_responsibility_for_ptp_distributions_certification' => 'getQiNomineeWithholdingResponsibilityForPtpDistributionsCertification',
        'qi_securities_lender_substitute_dividend_withholding_certification' => 'getQiSecuritiesLenderSubstituteDividendWithholdingCertification',
        'qi_withholding_and1099_reporting_responsibility_certification' => 'getQiWithholdingAnd1099ReportingResponsibilityCertification',
        'qi_form1099_or_fatca_reporting_responsibility_certification' => 'getQiForm1099OrFatcaReportingResponsibilityCertification',
        'qi_opt_out_of_form1099_reporting_certification' => 'getQiOptOutOfForm1099ReportingCertification',
        'qi_withholding_rate_pool_certification' => 'getQiWithholdingRatePoolCertification',
        'qi_intermediary_or_flow_through_entity_documentation_certification' => 'getQiIntermediaryOrFlowThroughEntityDocumentationCertification',
        'qualified_derivatives_dealer_certification' => 'getQualifiedDerivativesDealerCertification',
        'qdd_corporation' => 'getQddCorporation',
        'qdd_partnership' => 'getQddPartnership',
        'qdd_disregarded_entity' => 'getQddDisregardedEntity',
        'nonqualified_intermediary_certification' => 'getNonqualifiedIntermediaryCertification',
        'nqi_withholding_statement_transmission_certification' => 'getNqiWithholdingStatementTransmissionCertification',
        'nqi_withholding_rate_pool_compliance_certification' => 'getNqiWithholdingRatePoolComplianceCertification',
        'nqi_qualified_securities_lender_certification' => 'getNqiQualifiedSecuritiesLenderCertification',
        'nqi_alternative_withholding_statement_verification_certification' => 'getNqiAlternativeWithholdingStatementVerificationCertification',
        'territory_financial_institution_certification' => 'getTerritoryFinancialInstitutionCertification',
        'tfi_treated_as_us_person_certification' => 'getTfiTreatedAsUsPersonCertification',
        'tfi_withholding_statement_transmission_certification' => 'getTfiWithholdingStatementTransmissionCertification',
        'tfi_treated_as_us_person_for_ptp_sales_certification' => 'getTfiTreatedAsUsPersonForPtpSalesCertification',
        'tfi_nominee_us_person_for_ptp_distributions_certification' => 'getTfiNomineeUsPersonForPtpDistributionsCertification',
        'tfi_not_nominee_for_ptp_distributions_certification' => 'getTfiNotNomineeForPtpDistributionsCertification',
        'us_branch_non_effectively_connected_income_certification' => 'getUsBranchNonEffectivelyConnectedIncomeCertification',
        'us_branch_agreement_to_be_treated_as_us_person_certification' => 'getUsBranchAgreementToBeTreatedAsUsPersonCertification',
        'us_branch_withholding_statement_and_compliance_certification' => 'getUsBranchWithholdingStatementAndComplianceCertification',
        'us_branch_acting_as_us_person_for_ptp_sales_certification' => 'getUsBranchActingAsUsPersonForPtpSalesCertification',
        'us_branch_nominee_for_ptp_distributions_certification' => 'getUsBranchNomineeForPtpDistributionsCertification',
        'us_branch_not_nominee_for_ptp_distributions_certification' => 'getUsBranchNotNomineeForPtpDistributionsCertification',
        'withholding_foreign_partnership_or_trust_certification' => 'getWithholdingForeignPartnershipOrTrustCertification',
        'nonwithholding_foreign_entity_withholding_statement_certification' => 'getNonwithholdingForeignEntityWithholdingStatementCertification',
        'foreign_entity_partner_in_lower_tier_partnership_certification' => 'getForeignEntityPartnerInLowerTierPartnershipCertification',
        'foreign_partnership_amount_realized_section1446_f_certification' => 'getForeignPartnershipAmountRealizedSection1446FCertification',
        'foreign_partnership_modified_amount_realized_certification' => 'getForeignPartnershipModifiedAmountRealizedCertification',
        'foreign_grantor_trust_amount_realized_allocation_certification' => 'getForeignGrantorTrustAmountRealizedAllocationCertification',
        'alternative_withholding_statement_reliance_certification' => 'getAlternativeWithholdingStatementRelianceCertification',
        'np_ffi_with_exempt_beneficial_owners_certification' => 'getNpFfiWithExemptBeneficialOwnersCertification',
        'ffi_sponsoring_entity' => 'getFfiSponsoringEntity',
        'investment_entity_certification' => 'getInvestmentEntityCertification',
        'controlled_foreign_corporation_certification' => 'getControlledForeignCorporationCertification',
        'owner_documented_ffi_certification' => 'getOwnerDocumentedFfiCertification',
        'owner_documented_ffi_reporting_statement_certification' => 'getOwnerDocumentedFfiReportingStatementCertification',
        'owner_documented_ffi_auditor_letter_certification' => 'getOwnerDocumentedFfiAuditorLetterCertification',
        'compliant_nonregistering_local_bank_certification' => 'getCompliantNonregisteringLocalBankCertification',
        'compliant_ffi_low_value_accounts_certification' => 'getCompliantFfiLowValueAccountsCertification',
        'sponsored_closely_held_entity_sponsoring_entity' => 'getSponsoredCloselyHeldEntitySponsoringEntity',
        'sponsored_closely_held_investment_vehicle_certification' => 'getSponsoredCloselyHeldInvestmentVehicleCertification',
        'compliant_limited_life_debt_entity_certification' => 'getCompliantLimitedLifeDebtEntityCertification',
        'investment_entity_no_financial_accounts_certification' => 'getInvestmentEntityNoFinancialAccountsCertification',
        'restricted_distributor_certification' => 'getRestrictedDistributorCertification',
        'restricted_distributor_agreement_certification' => 'getRestrictedDistributorAgreementCertification',
        'restricted_distributor_preexisting_sales_compliance_certification' => 'getRestrictedDistributorPreexistingSalesComplianceCertification',
        'foreign_central_bank_of_issue_certification' => 'getForeignCentralBankOfIssueCertification',
        'nonreporting_iga_ffi_certification' => 'getNonreportingIgaFfiCertification',
        'iga_country' => 'getIgaCountry',
        'iga_model' => 'getIgaModel',
        'iga_legal_status_treatment' => 'getIgaLegalStatusTreatment',
        'iga_ffi_trustee_or_sponsor' => 'getIgaFfiTrusteeOrSponsor',
        'iga_ffi_trustee_is_foreign' => 'getIgaFfiTrusteeIsForeign',
        'treaty_qualified_pension_fund_certification' => 'getTreatyQualifiedPensionFundCertification',
        'qualified_retirement_fund_certification' => 'getQualifiedRetirementFundCertification',
        'narrow_participation_retirement_fund_certification' => 'getNarrowParticipationRetirementFundCertification',
        'section401_a_equivalent_pension_plan_certification' => 'getSection401AEquivalentPensionPlanCertification',
        'investment_entity_for_retirement_funds_certification' => 'getInvestmentEntityForRetirementFundsCertification',
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => 'getExemptBeneficialOwnerSponsoredRetirementFundCertification',
        'excepted_nonfinancial_group_entity_certification' => 'getExceptedNonfinancialGroupEntityCertification',
        'excepted_nonfinancial_start_up_certification' => 'getExceptedNonfinancialStartUpCertification',
        'startup_formation_or_resolution_date' => 'getStartupFormationOrResolutionDate',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => 'getExceptedNonfinancialEntityInLiquidationOrBankruptcyCertification',
        'nonfinancial_entity_filing_date' => 'getNonfinancialEntityFilingDate',
        'publicly_traded_nffe_certification' => 'getPubliclyTradedNffeCertification',
        'publicly_traded_nffe_securities_market' => 'getPubliclyTradedNffeSecuritiesMarket',
        'nffe_affiliate_of_publicly_traded_entity_certification' => 'getNffeAffiliateOfPubliclyTradedEntityCertification',
        'publicly_traded_entity' => 'getPubliclyTradedEntity',
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => 'getNffeAffiliateOfPubliclyTradedEntitySecuritiesMarket',
        'excepted_territory_nffe_certification' => 'getExceptedTerritoryNffeCertification',
        'active_nffe_certification' => 'getActiveNffeCertification',
        'passive_nffe_certification' => 'getPassiveNffeCertification',
        'sponsored_direct_reporting_nffe_certification' => 'getSponsoredDirectReportingNffeCertification',
        'direct_reporting_nffe_sponsoring_entity' => 'getDirectReportingNffeSponsoringEntity',
        'signer_name' => 'getSignerName',
        'id' => 'getId',
        'type' => 'getType',
        'entry_status' => 'getEntryStatus',
        'entry_status_date' => 'getEntryStatusDate',
        'reference_id' => 'getReferenceId',
        'company_id' => 'getCompanyId',
        'display_name' => 'getDisplayName',
        'email' => 'getEmail',
        'archived' => 'getArchived',
        'signature' => 'getSignature',
        'signed_date' => 'getSignedDate',
        'e_delivery_consented_at' => 'getEDeliveryConsentedAt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['citizenship_country'] = $data['citizenship_country'] ?? null;
        $this->container['disregarded_entity'] = $data['disregarded_entity'] ?? null;
        $this->container['entity_type'] = $data['entity_type'] ?? null;
        $this->container['fatca_status'] = $data['fatca_status'] ?? null;
        $this->container['residence_address'] = $data['residence_address'] ?? null;
        $this->container['residence_city'] = $data['residence_city'] ?? null;
        $this->container['residence_state'] = $data['residence_state'] ?? null;
        $this->container['residence_zip'] = $data['residence_zip'] ?? null;
        $this->container['residence_country'] = $data['residence_country'] ?? null;
        $this->container['residence_is_mailing'] = $data['residence_is_mailing'] ?? null;
        $this->container['mailing_address'] = $data['mailing_address'] ?? null;
        $this->container['mailing_city'] = $data['mailing_city'] ?? null;
        $this->container['mailing_state'] = $data['mailing_state'] ?? null;
        $this->container['mailing_zip'] = $data['mailing_zip'] ?? null;
        $this->container['mailing_country'] = $data['mailing_country'] ?? null;
        $this->container['tin_type'] = $data['tin_type'] ?? null;
        $this->container['tin'] = $data['tin'] ?? null;
        $this->container['giin'] = $data['giin'] ?? null;
        $this->container['foreign_tin'] = $data['foreign_tin'] ?? null;
        $this->container['reference_number'] = $data['reference_number'] ?? null;
        $this->container['disregarded_entity_fatca_status'] = $data['disregarded_entity_fatca_status'] ?? null;
        $this->container['disregarded_address'] = $data['disregarded_address'] ?? null;
        $this->container['disregarded_city'] = $data['disregarded_city'] ?? null;
        $this->container['disregarded_state'] = $data['disregarded_state'] ?? null;
        $this->container['disregarded_zip'] = $data['disregarded_zip'] ?? null;
        $this->container['disregarded_country'] = $data['disregarded_country'] ?? null;
        $this->container['disregarded_entity_giin'] = $data['disregarded_entity_giin'] ?? null;
        $this->container['qualified_intermediary_certification'] = $data['qualified_intermediary_certification'] ?? null;
        $this->container['qi_primary_withholding_responsibility_certification'] = $data['qi_primary_withholding_responsibility_certification'] ?? null;
        $this->container['qi_withholding_responsibility_for_ptp_sales_certification'] = $data['qi_withholding_responsibility_for_ptp_sales_certification'] ?? null;
        $this->container['qi_nominee_withholding_responsibility_for_ptp_distributions_certification'] = $data['qi_nominee_withholding_responsibility_for_ptp_distributions_certification'] ?? null;
        $this->container['qi_securities_lender_substitute_dividend_withholding_certification'] = $data['qi_securities_lender_substitute_dividend_withholding_certification'] ?? null;
        $this->container['qi_withholding_and1099_reporting_responsibility_certification'] = $data['qi_withholding_and1099_reporting_responsibility_certification'] ?? null;
        $this->container['qi_form1099_or_fatca_reporting_responsibility_certification'] = $data['qi_form1099_or_fatca_reporting_responsibility_certification'] ?? null;
        $this->container['qi_opt_out_of_form1099_reporting_certification'] = $data['qi_opt_out_of_form1099_reporting_certification'] ?? null;
        $this->container['qi_withholding_rate_pool_certification'] = $data['qi_withholding_rate_pool_certification'] ?? null;
        $this->container['qi_intermediary_or_flow_through_entity_documentation_certification'] = $data['qi_intermediary_or_flow_through_entity_documentation_certification'] ?? null;
        $this->container['qualified_derivatives_dealer_certification'] = $data['qualified_derivatives_dealer_certification'] ?? null;
        $this->container['qdd_corporation'] = $data['qdd_corporation'] ?? null;
        $this->container['qdd_partnership'] = $data['qdd_partnership'] ?? null;
        $this->container['qdd_disregarded_entity'] = $data['qdd_disregarded_entity'] ?? null;
        $this->container['nonqualified_intermediary_certification'] = $data['nonqualified_intermediary_certification'] ?? null;
        $this->container['nqi_withholding_statement_transmission_certification'] = $data['nqi_withholding_statement_transmission_certification'] ?? null;
        $this->container['nqi_withholding_rate_pool_compliance_certification'] = $data['nqi_withholding_rate_pool_compliance_certification'] ?? null;
        $this->container['nqi_qualified_securities_lender_certification'] = $data['nqi_qualified_securities_lender_certification'] ?? null;
        $this->container['nqi_alternative_withholding_statement_verification_certification'] = $data['nqi_alternative_withholding_statement_verification_certification'] ?? null;
        $this->container['territory_financial_institution_certification'] = $data['territory_financial_institution_certification'] ?? null;
        $this->container['tfi_treated_as_us_person_certification'] = $data['tfi_treated_as_us_person_certification'] ?? null;
        $this->container['tfi_withholding_statement_transmission_certification'] = $data['tfi_withholding_statement_transmission_certification'] ?? null;
        $this->container['tfi_treated_as_us_person_for_ptp_sales_certification'] = $data['tfi_treated_as_us_person_for_ptp_sales_certification'] ?? null;
        $this->container['tfi_nominee_us_person_for_ptp_distributions_certification'] = $data['tfi_nominee_us_person_for_ptp_distributions_certification'] ?? null;
        $this->container['tfi_not_nominee_for_ptp_distributions_certification'] = $data['tfi_not_nominee_for_ptp_distributions_certification'] ?? null;
        $this->container['us_branch_non_effectively_connected_income_certification'] = $data['us_branch_non_effectively_connected_income_certification'] ?? null;
        $this->container['us_branch_agreement_to_be_treated_as_us_person_certification'] = $data['us_branch_agreement_to_be_treated_as_us_person_certification'] ?? null;
        $this->container['us_branch_withholding_statement_and_compliance_certification'] = $data['us_branch_withholding_statement_and_compliance_certification'] ?? null;
        $this->container['us_branch_acting_as_us_person_for_ptp_sales_certification'] = $data['us_branch_acting_as_us_person_for_ptp_sales_certification'] ?? null;
        $this->container['us_branch_nominee_for_ptp_distributions_certification'] = $data['us_branch_nominee_for_ptp_distributions_certification'] ?? null;
        $this->container['us_branch_not_nominee_for_ptp_distributions_certification'] = $data['us_branch_not_nominee_for_ptp_distributions_certification'] ?? null;
        $this->container['withholding_foreign_partnership_or_trust_certification'] = $data['withholding_foreign_partnership_or_trust_certification'] ?? null;
        $this->container['nonwithholding_foreign_entity_withholding_statement_certification'] = $data['nonwithholding_foreign_entity_withholding_statement_certification'] ?? null;
        $this->container['foreign_entity_partner_in_lower_tier_partnership_certification'] = $data['foreign_entity_partner_in_lower_tier_partnership_certification'] ?? null;
        $this->container['foreign_partnership_amount_realized_section1446_f_certification'] = $data['foreign_partnership_amount_realized_section1446_f_certification'] ?? null;
        $this->container['foreign_partnership_modified_amount_realized_certification'] = $data['foreign_partnership_modified_amount_realized_certification'] ?? null;
        $this->container['foreign_grantor_trust_amount_realized_allocation_certification'] = $data['foreign_grantor_trust_amount_realized_allocation_certification'] ?? null;
        $this->container['alternative_withholding_statement_reliance_certification'] = $data['alternative_withholding_statement_reliance_certification'] ?? null;
        $this->container['np_ffi_with_exempt_beneficial_owners_certification'] = $data['np_ffi_with_exempt_beneficial_owners_certification'] ?? null;
        $this->container['ffi_sponsoring_entity'] = $data['ffi_sponsoring_entity'] ?? null;
        $this->container['investment_entity_certification'] = $data['investment_entity_certification'] ?? null;
        $this->container['controlled_foreign_corporation_certification'] = $data['controlled_foreign_corporation_certification'] ?? null;
        $this->container['owner_documented_ffi_certification'] = $data['owner_documented_ffi_certification'] ?? null;
        $this->container['owner_documented_ffi_reporting_statement_certification'] = $data['owner_documented_ffi_reporting_statement_certification'] ?? null;
        $this->container['owner_documented_ffi_auditor_letter_certification'] = $data['owner_documented_ffi_auditor_letter_certification'] ?? null;
        $this->container['compliant_nonregistering_local_bank_certification'] = $data['compliant_nonregistering_local_bank_certification'] ?? null;
        $this->container['compliant_ffi_low_value_accounts_certification'] = $data['compliant_ffi_low_value_accounts_certification'] ?? null;
        $this->container['sponsored_closely_held_entity_sponsoring_entity'] = $data['sponsored_closely_held_entity_sponsoring_entity'] ?? null;
        $this->container['sponsored_closely_held_investment_vehicle_certification'] = $data['sponsored_closely_held_investment_vehicle_certification'] ?? null;
        $this->container['compliant_limited_life_debt_entity_certification'] = $data['compliant_limited_life_debt_entity_certification'] ?? null;
        $this->container['investment_entity_no_financial_accounts_certification'] = $data['investment_entity_no_financial_accounts_certification'] ?? null;
        $this->container['restricted_distributor_certification'] = $data['restricted_distributor_certification'] ?? null;
        $this->container['restricted_distributor_agreement_certification'] = $data['restricted_distributor_agreement_certification'] ?? null;
        $this->container['restricted_distributor_preexisting_sales_compliance_certification'] = $data['restricted_distributor_preexisting_sales_compliance_certification'] ?? null;
        $this->container['foreign_central_bank_of_issue_certification'] = $data['foreign_central_bank_of_issue_certification'] ?? null;
        $this->container['nonreporting_iga_ffi_certification'] = $data['nonreporting_iga_ffi_certification'] ?? null;
        $this->container['iga_country'] = $data['iga_country'] ?? null;
        $this->container['iga_model'] = $data['iga_model'] ?? null;
        $this->container['iga_legal_status_treatment'] = $data['iga_legal_status_treatment'] ?? null;
        $this->container['iga_ffi_trustee_or_sponsor'] = $data['iga_ffi_trustee_or_sponsor'] ?? null;
        $this->container['iga_ffi_trustee_is_foreign'] = $data['iga_ffi_trustee_is_foreign'] ?? null;
        $this->container['treaty_qualified_pension_fund_certification'] = $data['treaty_qualified_pension_fund_certification'] ?? null;
        $this->container['qualified_retirement_fund_certification'] = $data['qualified_retirement_fund_certification'] ?? null;
        $this->container['narrow_participation_retirement_fund_certification'] = $data['narrow_participation_retirement_fund_certification'] ?? null;
        $this->container['section401_a_equivalent_pension_plan_certification'] = $data['section401_a_equivalent_pension_plan_certification'] ?? null;
        $this->container['investment_entity_for_retirement_funds_certification'] = $data['investment_entity_for_retirement_funds_certification'] ?? null;
        $this->container['exempt_beneficial_owner_sponsored_retirement_fund_certification'] = $data['exempt_beneficial_owner_sponsored_retirement_fund_certification'] ?? null;
        $this->container['excepted_nonfinancial_group_entity_certification'] = $data['excepted_nonfinancial_group_entity_certification'] ?? null;
        $this->container['excepted_nonfinancial_start_up_certification'] = $data['excepted_nonfinancial_start_up_certification'] ?? null;
        $this->container['startup_formation_or_resolution_date'] = $data['startup_formation_or_resolution_date'] ?? null;
        $this->container['excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification'] = $data['excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification'] ?? null;
        $this->container['nonfinancial_entity_filing_date'] = $data['nonfinancial_entity_filing_date'] ?? null;
        $this->container['publicly_traded_nffe_certification'] = $data['publicly_traded_nffe_certification'] ?? null;
        $this->container['publicly_traded_nffe_securities_market'] = $data['publicly_traded_nffe_securities_market'] ?? null;
        $this->container['nffe_affiliate_of_publicly_traded_entity_certification'] = $data['nffe_affiliate_of_publicly_traded_entity_certification'] ?? null;
        $this->container['publicly_traded_entity'] = $data['publicly_traded_entity'] ?? null;
        $this->container['nffe_affiliate_of_publicly_traded_entity_securities_market'] = $data['nffe_affiliate_of_publicly_traded_entity_securities_market'] ?? null;
        $this->container['excepted_territory_nffe_certification'] = $data['excepted_territory_nffe_certification'] ?? null;
        $this->container['active_nffe_certification'] = $data['active_nffe_certification'] ?? null;
        $this->container['passive_nffe_certification'] = $data['passive_nffe_certification'] ?? null;
        $this->container['sponsored_direct_reporting_nffe_certification'] = $data['sponsored_direct_reporting_nffe_certification'] ?? null;
        $this->container['direct_reporting_nffe_sponsoring_entity'] = $data['direct_reporting_nffe_sponsoring_entity'] ?? null;
        $this->container['signer_name'] = $data['signer_name'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['entry_status'] = $data['entry_status'] ?? null;
        $this->container['entry_status_date'] = $data['entry_status_date'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['archived'] = $data['archived'] ?? null;
        $this->container['signature'] = $data['signature'] ?? null;
        $this->container['signed_date'] = $data['signed_date'] ?? null;
        $this->container['e_delivery_consented_at'] = $data['e_delivery_consented_at'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the individual or entity associated with the form.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets citizenship_country
     *
     * @return string|null
     */
    public function getCitizenshipCountry()
    {
        return $this->container['citizenship_country'];
    }

    /**
     * Sets citizenship_country
     *
     * @param string|null $citizenship_country The country of citizenship.
     *
     * @return self
     */
    public function setCitizenshipCountry($citizenship_country)
    {
        $this->container['citizenship_country'] = $citizenship_country;

        return $this;
    }

    /**
     * Gets disregarded_entity
     *
     * @return string|null
     */
    public function getDisregardedEntity()
    {
        return $this->container['disregarded_entity'];
    }

    /**
     * Sets disregarded_entity
     *
     * @param string|null $disregarded_entity The name of the disregarded entity receiving the payment (if applicable).
     *
     * @return self
     */
    public function setDisregardedEntity($disregarded_entity)
    {
        $this->container['disregarded_entity'] = $disregarded_entity;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string|null
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string|null $entity_type The entity type.
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets fatca_status
     *
     * @return string|null
     */
    public function getFatcaStatus()
    {
        return $this->container['fatca_status'];
    }

    /**
     * Sets fatca_status
     *
     * @param string|null $fatca_status The FATCA status.
     *
     * @return self
     */
    public function setFatcaStatus($fatca_status)
    {
        $this->container['fatca_status'] = $fatca_status;

        return $this;
    }

    /**
     * Gets residence_address
     *
     * @return string|null
     */
    public function getResidenceAddress()
    {
        return $this->container['residence_address'];
    }

    /**
     * Sets residence_address
     *
     * @param string|null $residence_address The residential address of the individual or entity.
     *
     * @return self
     */
    public function setResidenceAddress($residence_address)
    {
        $this->container['residence_address'] = $residence_address;

        return $this;
    }

    /**
     * Gets residence_city
     *
     * @return string|null
     */
    public function getResidenceCity()
    {
        return $this->container['residence_city'];
    }

    /**
     * Sets residence_city
     *
     * @param string|null $residence_city The city of residence.
     *
     * @return self
     */
    public function setResidenceCity($residence_city)
    {
        $this->container['residence_city'] = $residence_city;

        return $this;
    }

    /**
     * Gets residence_state
     *
     * @return string|null
     */
    public function getResidenceState()
    {
        return $this->container['residence_state'];
    }

    /**
     * Sets residence_state
     *
     * @param string|null $residence_state The state of residence.
     *
     * @return self
     */
    public function setResidenceState($residence_state)
    {
        $this->container['residence_state'] = $residence_state;

        return $this;
    }

    /**
     * Gets residence_zip
     *
     * @return string|null
     */
    public function getResidenceZip()
    {
        return $this->container['residence_zip'];
    }

    /**
     * Sets residence_zip
     *
     * @param string|null $residence_zip The ZIP code of the residence.
     *
     * @return self
     */
    public function setResidenceZip($residence_zip)
    {
        $this->container['residence_zip'] = $residence_zip;

        return $this;
    }

    /**
     * Gets residence_country
     *
     * @return string|null
     */
    public function getResidenceCountry()
    {
        return $this->container['residence_country'];
    }

    /**
     * Sets residence_country
     *
     * @param string|null $residence_country The country of residence.
     *
     * @return self
     */
    public function setResidenceCountry($residence_country)
    {
        $this->container['residence_country'] = $residence_country;

        return $this;
    }

    /**
     * Gets residence_is_mailing
     *
     * @return bool|null
     */
    public function getResidenceIsMailing()
    {
        return $this->container['residence_is_mailing'];
    }

    /**
     * Sets residence_is_mailing
     *
     * @param bool|null $residence_is_mailing Indicates whether the residence address is also the mailing address.
     *
     * @return self
     */
    public function setResidenceIsMailing($residence_is_mailing)
    {
        $this->container['residence_is_mailing'] = $residence_is_mailing;

        return $this;
    }

    /**
     * Gets mailing_address
     *
     * @return string|null
     */
    public function getMailingAddress()
    {
        return $this->container['mailing_address'];
    }

    /**
     * Sets mailing_address
     *
     * @param string|null $mailing_address The mailing address.
     *
     * @return self
     */
    public function setMailingAddress($mailing_address)
    {
        $this->container['mailing_address'] = $mailing_address;

        return $this;
    }

    /**
     * Gets mailing_city
     *
     * @return string|null
     */
    public function getMailingCity()
    {
        return $this->container['mailing_city'];
    }

    /**
     * Sets mailing_city
     *
     * @param string|null $mailing_city The city of the mailing address.
     *
     * @return self
     */
    public function setMailingCity($mailing_city)
    {
        $this->container['mailing_city'] = $mailing_city;

        return $this;
    }

    /**
     * Gets mailing_state
     *
     * @return string|null
     */
    public function getMailingState()
    {
        return $this->container['mailing_state'];
    }

    /**
     * Sets mailing_state
     *
     * @param string|null $mailing_state The state of the mailing address.
     *
     * @return self
     */
    public function setMailingState($mailing_state)
    {
        $this->container['mailing_state'] = $mailing_state;

        return $this;
    }

    /**
     * Gets mailing_zip
     *
     * @return string|null
     */
    public function getMailingZip()
    {
        return $this->container['mailing_zip'];
    }

    /**
     * Sets mailing_zip
     *
     * @param string|null $mailing_zip The ZIP code of the mailing address.
     *
     * @return self
     */
    public function setMailingZip($mailing_zip)
    {
        $this->container['mailing_zip'] = $mailing_zip;

        return $this;
    }

    /**
     * Gets mailing_country
     *
     * @return string|null
     */
    public function getMailingCountry()
    {
        return $this->container['mailing_country'];
    }

    /**
     * Sets mailing_country
     *
     * @param string|null $mailing_country The country of the mailing address.
     *
     * @return self
     */
    public function setMailingCountry($mailing_country)
    {
        $this->container['mailing_country'] = $mailing_country;

        return $this;
    }

    /**
     * Gets tin_type
     *
     * @return string|null
     */
    public function getTinType()
    {
        return $this->container['tin_type'];
    }

    /**
     * Sets tin_type
     *
     * @param string|null $tin_type The type of TIN provided.
     *
     * @return self
     */
    public function setTinType($tin_type)
    {
        $this->container['tin_type'] = $tin_type;

        return $this;
    }

    /**
     * Gets tin
     *
     * @return string|null
     */
    public function getTin()
    {
        return $this->container['tin'];
    }

    /**
     * Sets tin
     *
     * @param string|null $tin The taxpayer identification number (TIN).
     *
     * @return self
     */
    public function setTin($tin)
    {
        $this->container['tin'] = $tin;

        return $this;
    }

    /**
     * Gets giin
     *
     * @return string|null
     */
    public function getGiin()
    {
        return $this->container['giin'];
    }

    /**
     * Sets giin
     *
     * @param string|null $giin The global intermediary identification number (GIIN).
     *
     * @return self
     */
    public function setGiin($giin)
    {
        $this->container['giin'] = $giin;

        return $this;
    }

    /**
     * Gets foreign_tin
     *
     * @return string|null
     */
    public function getForeignTin()
    {
        return $this->container['foreign_tin'];
    }

    /**
     * Sets foreign_tin
     *
     * @param string|null $foreign_tin The foreign taxpayer identification number (TIN).
     *
     * @return self
     */
    public function setForeignTin($foreign_tin)
    {
        $this->container['foreign_tin'] = $foreign_tin;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number A reference number for the form.
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets disregarded_entity_fatca_status
     *
     * @return string|null
     */
    public function getDisregardedEntityFatcaStatus()
    {
        return $this->container['disregarded_entity_fatca_status'];
    }

    /**
     * Sets disregarded_entity_fatca_status
     *
     * @param string|null $disregarded_entity_fatca_status The FATCA status of disregarded entity or branch receiving payment.
     *
     * @return self
     */
    public function setDisregardedEntityFatcaStatus($disregarded_entity_fatca_status)
    {
        $this->container['disregarded_entity_fatca_status'] = $disregarded_entity_fatca_status;

        return $this;
    }

    /**
     * Gets disregarded_address
     *
     * @return string|null
     */
    public function getDisregardedAddress()
    {
        return $this->container['disregarded_address'];
    }

    /**
     * Sets disregarded_address
     *
     * @param string|null $disregarded_address The address for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedAddress($disregarded_address)
    {
        $this->container['disregarded_address'] = $disregarded_address;

        return $this;
    }

    /**
     * Gets disregarded_city
     *
     * @return string|null
     */
    public function getDisregardedCity()
    {
        return $this->container['disregarded_city'];
    }

    /**
     * Sets disregarded_city
     *
     * @param string|null $disregarded_city The city for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedCity($disregarded_city)
    {
        $this->container['disregarded_city'] = $disregarded_city;

        return $this;
    }

    /**
     * Gets disregarded_state
     *
     * @return string|null
     */
    public function getDisregardedState()
    {
        return $this->container['disregarded_state'];
    }

    /**
     * Sets disregarded_state
     *
     * @param string|null $disregarded_state The state for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedState($disregarded_state)
    {
        $this->container['disregarded_state'] = $disregarded_state;

        return $this;
    }

    /**
     * Gets disregarded_zip
     *
     * @return string|null
     */
    public function getDisregardedZip()
    {
        return $this->container['disregarded_zip'];
    }

    /**
     * Sets disregarded_zip
     *
     * @param string|null $disregarded_zip The ZIP code for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedZip($disregarded_zip)
    {
        $this->container['disregarded_zip'] = $disregarded_zip;

        return $this;
    }

    /**
     * Gets disregarded_country
     *
     * @return string|null
     */
    public function getDisregardedCountry()
    {
        return $this->container['disregarded_country'];
    }

    /**
     * Sets disregarded_country
     *
     * @param string|null $disregarded_country The country for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedCountry($disregarded_country)
    {
        $this->container['disregarded_country'] = $disregarded_country;

        return $this;
    }

    /**
     * Gets disregarded_entity_giin
     *
     * @return string|null
     */
    public function getDisregardedEntityGiin()
    {
        return $this->container['disregarded_entity_giin'];
    }

    /**
     * Sets disregarded_entity_giin
     *
     * @param string|null $disregarded_entity_giin The GIIN for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedEntityGiin($disregarded_entity_giin)
    {
        $this->container['disregarded_entity_giin'] = $disregarded_entity_giin;

        return $this;
    }

    /**
     * Gets qualified_intermediary_certification
     *
     * @return bool|null
     */
    public function getQualifiedIntermediaryCertification()
    {
        return $this->container['qualified_intermediary_certification'];
    }

    /**
     * Sets qualified_intermediary_certification
     *
     * @param bool|null $qualified_intermediary_certification Certifies that the entity is a Qualified Intermediary (QI) acting in accordance with its QI Agreement,  providing required withholding statements and documentation for relevant tax withholding purposes.
     *
     * @return self
     */
    public function setQualifiedIntermediaryCertification($qualified_intermediary_certification)
    {
        $this->container['qualified_intermediary_certification'] = $qualified_intermediary_certification;

        return $this;
    }

    /**
     * Gets qi_primary_withholding_responsibility_certification
     *
     * @return bool|null
     */
    public function getQiPrimaryWithholdingResponsibilityCertification()
    {
        return $this->container['qi_primary_withholding_responsibility_certification'];
    }

    /**
     * Sets qi_primary_withholding_responsibility_certification
     *
     * @param bool|null $qi_primary_withholding_responsibility_certification Certifies that the Qualified Intermediary assumes primary withholding responsibility  under chapters 3 and 4 for the specified accounts.
     *
     * @return self
     */
    public function setQiPrimaryWithholdingResponsibilityCertification($qi_primary_withholding_responsibility_certification)
    {
        $this->container['qi_primary_withholding_responsibility_certification'] = $qi_primary_withholding_responsibility_certification;

        return $this;
    }

    /**
     * Gets qi_withholding_responsibility_for_ptp_sales_certification
     *
     * @return bool|null
     */
    public function getQiWithholdingResponsibilityForPtpSalesCertification()
    {
        return $this->container['qi_withholding_responsibility_for_ptp_sales_certification'];
    }

    /**
     * Sets qi_withholding_responsibility_for_ptp_sales_certification
     *
     * @param bool|null $qi_withholding_responsibility_for_ptp_sales_certification Certifies that the Qualified Intermediary assumes primary withholding and reporting responsibility under section 1446(f)  for amounts realized from sales of interests in publicly traded partnerships.
     *
     * @return self
     */
    public function setQiWithholdingResponsibilityForPtpSalesCertification($qi_withholding_responsibility_for_ptp_sales_certification)
    {
        $this->container['qi_withholding_responsibility_for_ptp_sales_certification'] = $qi_withholding_responsibility_for_ptp_sales_certification;

        return $this;
    }

    /**
     * Gets qi_nominee_withholding_responsibility_for_ptp_distributions_certification
     *
     * @return bool|null
     */
    public function getQiNomineeWithholdingResponsibilityForPtpDistributionsCertification()
    {
        return $this->container['qi_nominee_withholding_responsibility_for_ptp_distributions_certification'];
    }

    /**
     * Sets qi_nominee_withholding_responsibility_for_ptp_distributions_certification
     *
     * @param bool|null $qi_nominee_withholding_responsibility_for_ptp_distributions_certification Certifies that the Qualified Intermediary assumes primary withholding responsibility as a nominee  under Regulations section 1.1446-4(b)(3) for publicly traded partnership distributions.
     *
     * @return self
     */
    public function setQiNomineeWithholdingResponsibilityForPtpDistributionsCertification($qi_nominee_withholding_responsibility_for_ptp_distributions_certification)
    {
        $this->container['qi_nominee_withholding_responsibility_for_ptp_distributions_certification'] = $qi_nominee_withholding_responsibility_for_ptp_distributions_certification;

        return $this;
    }

    /**
     * Gets qi_securities_lender_substitute_dividend_withholding_certification
     *
     * @return bool|null
     */
    public function getQiSecuritiesLenderSubstituteDividendWithholdingCertification()
    {
        return $this->container['qi_securities_lender_substitute_dividend_withholding_certification'];
    }

    /**
     * Sets qi_securities_lender_substitute_dividend_withholding_certification
     *
     * @param bool|null $qi_securities_lender_substitute_dividend_withholding_certification Certifies that the Qualified Intermediary is acting as a qualified securities lender and assumes primary withholding  and reporting responsibilities for U.S. source substitute dividend payments.
     *
     * @return self
     */
    public function setQiSecuritiesLenderSubstituteDividendWithholdingCertification($qi_securities_lender_substitute_dividend_withholding_certification)
    {
        $this->container['qi_securities_lender_substitute_dividend_withholding_certification'] = $qi_securities_lender_substitute_dividend_withholding_certification;

        return $this;
    }

    /**
     * Gets qi_withholding_and1099_reporting_responsibility_certification
     *
     * @return bool|null
     */
    public function getQiWithholdingAnd1099ReportingResponsibilityCertification()
    {
        return $this->container['qi_withholding_and1099_reporting_responsibility_certification'];
    }

    /**
     * Sets qi_withholding_and1099_reporting_responsibility_certification
     *
     * @param bool|null $qi_withholding_and1099_reporting_responsibility_certification Certifies that the Qualified Intermediary assumes primary withholding under chapters 3 and 4, and primary Form 1099 reporting  and backup withholding responsibility for U.S. source interest and substitute interest payments.
     *
     * @return self
     */
    public function setQiWithholdingAnd1099ReportingResponsibilityCertification($qi_withholding_and1099_reporting_responsibility_certification)
    {
        $this->container['qi_withholding_and1099_reporting_responsibility_certification'] = $qi_withholding_and1099_reporting_responsibility_certification;

        return $this;
    }

    /**
     * Gets qi_form1099_or_fatca_reporting_responsibility_certification
     *
     * @return bool|null
     */
    public function getQiForm1099OrFatcaReportingResponsibilityCertification()
    {
        return $this->container['qi_form1099_or_fatca_reporting_responsibility_certification'];
    }

    /**
     * Sets qi_form1099_or_fatca_reporting_responsibility_certification
     *
     * @param bool|null $qi_form1099_or_fatca_reporting_responsibility_certification Certifies that the Qualified Intermediary assumes Form 1099 reporting and backup withholding responsibility,  or FATCA reporting responsibility as a participating or registered deemed-compliant FFI,  for accounts held by specified U.S. persons.
     *
     * @return self
     */
    public function setQiForm1099OrFatcaReportingResponsibilityCertification($qi_form1099_or_fatca_reporting_responsibility_certification)
    {
        $this->container['qi_form1099_or_fatca_reporting_responsibility_certification'] = $qi_form1099_or_fatca_reporting_responsibility_certification;

        return $this;
    }

    /**
     * Gets qi_opt_out_of_form1099_reporting_certification
     *
     * @return bool|null
     */
    public function getQiOptOutOfForm1099ReportingCertification()
    {
        return $this->container['qi_opt_out_of_form1099_reporting_certification'];
    }

    /**
     * Sets qi_opt_out_of_form1099_reporting_certification
     *
     * @param bool|null $qi_opt_out_of_form1099_reporting_certification Certifies that the Qualified Intermediary does not assume primary Form 1099 reporting  and backup withholding responsibility for the accounts associated with this form.
     *
     * @return self
     */
    public function setQiOptOutOfForm1099ReportingCertification($qi_opt_out_of_form1099_reporting_certification)
    {
        $this->container['qi_opt_out_of_form1099_reporting_certification'] = $qi_opt_out_of_form1099_reporting_certification;

        return $this;
    }

    /**
     * Gets qi_withholding_rate_pool_certification
     *
     * @return bool|null
     */
    public function getQiWithholdingRatePoolCertification()
    {
        return $this->container['qi_withholding_rate_pool_certification'];
    }

    /**
     * Sets qi_withholding_rate_pool_certification
     *
     * @param bool|null $qi_withholding_rate_pool_certification Certifies that the Qualified Intermediary meets the requirements for allocating payments  to a chapter 4 withholding rate pool of U.S. payees under Regulations section 1.6049-4(c)(4)(iii).
     *
     * @return self
     */
    public function setQiWithholdingRatePoolCertification($qi_withholding_rate_pool_certification)
    {
        $this->container['qi_withholding_rate_pool_certification'] = $qi_withholding_rate_pool_certification;

        return $this;
    }

    /**
     * Gets qi_intermediary_or_flow_through_entity_documentation_certification
     *
     * @return bool|null
     */
    public function getQiIntermediaryOrFlowThroughEntityDocumentationCertification()
    {
        return $this->container['qi_intermediary_or_flow_through_entity_documentation_certification'];
    }

    /**
     * Sets qi_intermediary_or_flow_through_entity_documentation_certification
     *
     * @param bool|null $qi_intermediary_or_flow_through_entity_documentation_certification Certifies that the Qualified Intermediary has obtained or will obtain documentation confirming the status of any intermediary  or flow-through entity as a participating FFI, registered deemed-compliant FFI,  or QI for U.S. payees in a chapter 4 withholding rate pool.
     *
     * @return self
     */
    public function setQiIntermediaryOrFlowThroughEntityDocumentationCertification($qi_intermediary_or_flow_through_entity_documentation_certification)
    {
        $this->container['qi_intermediary_or_flow_through_entity_documentation_certification'] = $qi_intermediary_or_flow_through_entity_documentation_certification;

        return $this;
    }

    /**
     * Gets qualified_derivatives_dealer_certification
     *
     * @return bool|null
     */
    public function getQualifiedDerivativesDealerCertification()
    {
        return $this->container['qualified_derivatives_dealer_certification'];
    }

    /**
     * Sets qualified_derivatives_dealer_certification
     *
     * @param bool|null $qualified_derivatives_dealer_certification Certifies that the Qualified Derivatives Dealer (QDD) is approved by the IRS and assumes primary withholding  and reporting responsibilities for payments related to potential section 871(m) transactions.
     *
     * @return self
     */
    public function setQualifiedDerivativesDealerCertification($qualified_derivatives_dealer_certification)
    {
        $this->container['qualified_derivatives_dealer_certification'] = $qualified_derivatives_dealer_certification;

        return $this;
    }

    /**
     * Gets qdd_corporation
     *
     * @return bool|null
     */
    public function getQddCorporation()
    {
        return $this->container['qdd_corporation'];
    }

    /**
     * Sets qdd_corporation
     *
     * @param bool|null $qdd_corporation Indicates QDD classification is Corporation.
     *
     * @return self
     */
    public function setQddCorporation($qdd_corporation)
    {
        $this->container['qdd_corporation'] = $qdd_corporation;

        return $this;
    }

    /**
     * Gets qdd_partnership
     *
     * @return bool|null
     */
    public function getQddPartnership()
    {
        return $this->container['qdd_partnership'];
    }

    /**
     * Sets qdd_partnership
     *
     * @param bool|null $qdd_partnership Indicates QDD classification is Partnership.
     *
     * @return self
     */
    public function setQddPartnership($qdd_partnership)
    {
        $this->container['qdd_partnership'] = $qdd_partnership;

        return $this;
    }

    /**
     * Gets qdd_disregarded_entity
     *
     * @return bool|null
     */
    public function getQddDisregardedEntity()
    {
        return $this->container['qdd_disregarded_entity'];
    }

    /**
     * Sets qdd_disregarded_entity
     *
     * @param bool|null $qdd_disregarded_entity Indicates QDD classification is Disregarded Entity.
     *
     * @return self
     */
    public function setQddDisregardedEntity($qdd_disregarded_entity)
    {
        $this->container['qdd_disregarded_entity'] = $qdd_disregarded_entity;

        return $this;
    }

    /**
     * Gets nonqualified_intermediary_certification
     *
     * @return bool|null
     */
    public function getNonqualifiedIntermediaryCertification()
    {
        return $this->container['nonqualified_intermediary_certification'];
    }

    /**
     * Sets nonqualified_intermediary_certification
     *
     * @param bool|null $nonqualified_intermediary_certification Certifies that the entity is not acting as a Qualified Intermediary  and is not acting for its own account for the accounts covered by this form.
     *
     * @return self
     */
    public function setNonqualifiedIntermediaryCertification($nonqualified_intermediary_certification)
    {
        $this->container['nonqualified_intermediary_certification'] = $nonqualified_intermediary_certification;

        return $this;
    }

    /**
     * Gets nqi_withholding_statement_transmission_certification
     *
     * @return bool|null
     */
    public function getNqiWithholdingStatementTransmissionCertification()
    {
        return $this->container['nqi_withholding_statement_transmission_certification'];
    }

    /**
     * Sets nqi_withholding_statement_transmission_certification
     *
     * @param bool|null $nqi_withholding_statement_transmission_certification Certifies that the nonqualified intermediary is submitting this form to transmit withholding certificates  and/or other required documentation along with a withholding statement.
     *
     * @return self
     */
    public function setNqiWithholdingStatementTransmissionCertification($nqi_withholding_statement_transmission_certification)
    {
        $this->container['nqi_withholding_statement_transmission_certification'] = $nqi_withholding_statement_transmission_certification;

        return $this;
    }

    /**
     * Gets nqi_withholding_rate_pool_compliance_certification
     *
     * @return bool|null
     */
    public function getNqiWithholdingRatePoolComplianceCertification()
    {
        return $this->container['nqi_withholding_rate_pool_compliance_certification'];
    }

    /**
     * Sets nqi_withholding_rate_pool_compliance_certification
     *
     * @param bool|null $nqi_withholding_rate_pool_compliance_certification Certifies that the nonqualified intermediary meets the requirements of Regulations section 1.6049-4(c)(4)(iii)  for U.S. payees included in a withholding rate pool, excluding publicly traded partnership distributions.
     *
     * @return self
     */
    public function setNqiWithholdingRatePoolComplianceCertification($nqi_withholding_rate_pool_compliance_certification)
    {
        $this->container['nqi_withholding_rate_pool_compliance_certification'] = $nqi_withholding_rate_pool_compliance_certification;

        return $this;
    }

    /**
     * Gets nqi_qualified_securities_lender_certification
     *
     * @return bool|null
     */
    public function getNqiQualifiedSecuritiesLenderCertification()
    {
        return $this->container['nqi_qualified_securities_lender_certification'];
    }

    /**
     * Sets nqi_qualified_securities_lender_certification
     *
     * @param bool|null $nqi_qualified_securities_lender_certification Certifies that the nonqualified intermediary is acting as a qualified securities lender (not as a QI)  and assumes primary withholding and reporting responsibilities for U.S. source substitute dividend payments.
     *
     * @return self
     */
    public function setNqiQualifiedSecuritiesLenderCertification($nqi_qualified_securities_lender_certification)
    {
        $this->container['nqi_qualified_securities_lender_certification'] = $nqi_qualified_securities_lender_certification;

        return $this;
    }

    /**
     * Gets nqi_alternative_withholding_statement_verification_certification
     *
     * @return bool|null
     */
    public function getNqiAlternativeWithholdingStatementVerificationCertification()
    {
        return $this->container['nqi_alternative_withholding_statement_verification_certification'];
    }

    /**
     * Sets nqi_alternative_withholding_statement_verification_certification
     *
     * @param bool|null $nqi_alternative_withholding_statement_verification_certification Certifies that the nonqualified intermediary has verified, or will verify,  all information on alternative withholding statements for consistency with account data to determine the correct withholding rate,  as required under sections 1441 or 1471.
     *
     * @return self
     */
    public function setNqiAlternativeWithholdingStatementVerificationCertification($nqi_alternative_withholding_statement_verification_certification)
    {
        $this->container['nqi_alternative_withholding_statement_verification_certification'] = $nqi_alternative_withholding_statement_verification_certification;

        return $this;
    }

    /**
     * Gets territory_financial_institution_certification
     *
     * @return bool|null
     */
    public function getTerritoryFinancialInstitutionCertification()
    {
        return $this->container['territory_financial_institution_certification'];
    }

    /**
     * Sets territory_financial_institution_certification
     *
     * @param bool|null $territory_financial_institution_certification Certifies that the entity is a financial institution (other than an investment entity) that is incorporated  or organized under the laws of a possession of the United States.
     *
     * @return self
     */
    public function setTerritoryFinancialInstitutionCertification($territory_financial_institution_certification)
    {
        $this->container['territory_financial_institution_certification'] = $territory_financial_institution_certification;

        return $this;
    }

    /**
     * Gets tfi_treated_as_us_person_certification
     *
     * @return bool|null
     */
    public function getTfiTreatedAsUsPersonCertification()
    {
        return $this->container['tfi_treated_as_us_person_certification'];
    }

    /**
     * Sets tfi_treated_as_us_person_certification
     *
     * @param bool|null $tfi_treated_as_us_person_certification Certifies that the territory financial institution agrees to be treated as a U.S. person  for chapters 3 and 4 purposes concerning reportable amounts and withholdable payments.
     *
     * @return self
     */
    public function setTfiTreatedAsUsPersonCertification($tfi_treated_as_us_person_certification)
    {
        $this->container['tfi_treated_as_us_person_certification'] = $tfi_treated_as_us_person_certification;

        return $this;
    }

    /**
     * Gets tfi_withholding_statement_transmission_certification
     *
     * @return bool|null
     */
    public function getTfiWithholdingStatementTransmissionCertification()
    {
        return $this->container['tfi_withholding_statement_transmission_certification'];
    }

    /**
     * Sets tfi_withholding_statement_transmission_certification
     *
     * @param bool|null $tfi_withholding_statement_transmission_certification Certifies that the territory financial institution is transmitting withholding certificates or other required documentation  and has provided or will provide a withholding statement for reportable or withholdable payments.
     *
     * @return self
     */
    public function setTfiWithholdingStatementTransmissionCertification($tfi_withholding_statement_transmission_certification)
    {
        $this->container['tfi_withholding_statement_transmission_certification'] = $tfi_withholding_statement_transmission_certification;

        return $this;
    }

    /**
     * Gets tfi_treated_as_us_person_for_ptp_sales_certification
     *
     * @return bool|null
     */
    public function getTfiTreatedAsUsPersonForPtpSalesCertification()
    {
        return $this->container['tfi_treated_as_us_person_for_ptp_sales_certification'];
    }

    /**
     * Sets tfi_treated_as_us_person_for_ptp_sales_certification
     *
     * @param bool|null $tfi_treated_as_us_person_for_ptp_sales_certification Certifies that the territory financial institution agrees to be treated as a U.S. person  under Regulations section 1.1446(f)-4(a)(2)(i)(B) for amounts realized from sales of publicly traded partnership interests.
     *
     * @return self
     */
    public function setTfiTreatedAsUsPersonForPtpSalesCertification($tfi_treated_as_us_person_for_ptp_sales_certification)
    {
        $this->container['tfi_treated_as_us_person_for_ptp_sales_certification'] = $tfi_treated_as_us_person_for_ptp_sales_certification;

        return $this;
    }

    /**
     * Gets tfi_nominee_us_person_for_ptp_distributions_certification
     *
     * @return bool|null
     */
    public function getTfiNomineeUsPersonForPtpDistributionsCertification()
    {
        return $this->container['tfi_nominee_us_person_for_ptp_distributions_certification'];
    }

    /**
     * Sets tfi_nominee_us_person_for_ptp_distributions_certification
     *
     * @param bool|null $tfi_nominee_us_person_for_ptp_distributions_certification Certifies that the territory financial institution agrees to be treated as a U.S. person  and as a nominee for purposes of publicly traded partnership distributions under the applicable regulations.
     *
     * @return self
     */
    public function setTfiNomineeUsPersonForPtpDistributionsCertification($tfi_nominee_us_person_for_ptp_distributions_certification)
    {
        $this->container['tfi_nominee_us_person_for_ptp_distributions_certification'] = $tfi_nominee_us_person_for_ptp_distributions_certification;

        return $this;
    }

    /**
     * Gets tfi_not_nominee_for_ptp_distributions_certification
     *
     * @return bool|null
     */
    public function getTfiNotNomineeForPtpDistributionsCertification()
    {
        return $this->container['tfi_not_nominee_for_ptp_distributions_certification'];
    }

    /**
     * Sets tfi_not_nominee_for_ptp_distributions_certification
     *
     * @param bool|null $tfi_not_nominee_for_ptp_distributions_certification Certifies that the territory financial institution is not acting as a nominee for publicly traded partnership distributions  and is providing withholding statements for those distributions.
     *
     * @return self
     */
    public function setTfiNotNomineeForPtpDistributionsCertification($tfi_not_nominee_for_ptp_distributions_certification)
    {
        $this->container['tfi_not_nominee_for_ptp_distributions_certification'] = $tfi_not_nominee_for_ptp_distributions_certification;

        return $this;
    }

    /**
     * Gets us_branch_non_effectively_connected_income_certification
     *
     * @return bool|null
     */
    public function getUsBranchNonEffectivelyConnectedIncomeCertification()
    {
        return $this->container['us_branch_non_effectively_connected_income_certification'];
    }

    /**
     * Sets us_branch_non_effectively_connected_income_certification
     *
     * @param bool|null $us_branch_non_effectively_connected_income_certification Certifies that the U.S. branch is receiving reportable or withholdable payments  that are not effectively connected income, PTP distributions, or proceeds from PTP sales.
     *
     * @return self
     */
    public function setUsBranchNonEffectivelyConnectedIncomeCertification($us_branch_non_effectively_connected_income_certification)
    {
        $this->container['us_branch_non_effectively_connected_income_certification'] = $us_branch_non_effectively_connected_income_certification;

        return $this;
    }

    /**
     * Gets us_branch_agreement_to_be_treated_as_us_person_certification
     *
     * @return bool|null
     */
    public function getUsBranchAgreementToBeTreatedAsUsPersonCertification()
    {
        return $this->container['us_branch_agreement_to_be_treated_as_us_person_certification'];
    }

    /**
     * Sets us_branch_agreement_to_be_treated_as_us_person_certification
     *
     * @param bool|null $us_branch_agreement_to_be_treated_as_us_person_certification Certifies that the U.S. branch of a foreign bank or insurance company agrees to be treated as a U.S. person  for reportable amounts or withholdable payments under the applicable regulations.
     *
     * @return self
     */
    public function setUsBranchAgreementToBeTreatedAsUsPersonCertification($us_branch_agreement_to_be_treated_as_us_person_certification)
    {
        $this->container['us_branch_agreement_to_be_treated_as_us_person_certification'] = $us_branch_agreement_to_be_treated_as_us_person_certification;

        return $this;
    }

    /**
     * Gets us_branch_withholding_statement_and_compliance_certification
     *
     * @return bool|null
     */
    public function getUsBranchWithholdingStatementAndComplianceCertification()
    {
        return $this->container['us_branch_withholding_statement_and_compliance_certification'];
    }

    /**
     * Sets us_branch_withholding_statement_and_compliance_certification
     *
     * @param bool|null $us_branch_withholding_statement_and_compliance_certification Certifies that the U.S. branch is transmitting required documentation  and withholding statements for reportable or withholdable payments and is applying the appropriate FATCA regulations.
     *
     * @return self
     */
    public function setUsBranchWithholdingStatementAndComplianceCertification($us_branch_withholding_statement_and_compliance_certification)
    {
        $this->container['us_branch_withholding_statement_and_compliance_certification'] = $us_branch_withholding_statement_and_compliance_certification;

        return $this;
    }

    /**
     * Gets us_branch_acting_as_us_person_for_ptp_sales_certification
     *
     * @return bool|null
     */
    public function getUsBranchActingAsUsPersonForPtpSalesCertification()
    {
        return $this->container['us_branch_acting_as_us_person_for_ptp_sales_certification'];
    }

    /**
     * Sets us_branch_acting_as_us_person_for_ptp_sales_certification
     *
     * @param bool|null $us_branch_acting_as_us_person_for_ptp_sales_certification Certifies that the U.S. branch is acting as a U.S. person  for purposes of amounts realized from sales of publicly traded partnership interests under the applicable regulations.
     *
     * @return self
     */
    public function setUsBranchActingAsUsPersonForPtpSalesCertification($us_branch_acting_as_us_person_for_ptp_sales_certification)
    {
        $this->container['us_branch_acting_as_us_person_for_ptp_sales_certification'] = $us_branch_acting_as_us_person_for_ptp_sales_certification;

        return $this;
    }

    /**
     * Gets us_branch_nominee_for_ptp_distributions_certification
     *
     * @return bool|null
     */
    public function getUsBranchNomineeForPtpDistributionsCertification()
    {
        return $this->container['us_branch_nominee_for_ptp_distributions_certification'];
    }

    /**
     * Sets us_branch_nominee_for_ptp_distributions_certification
     *
     * @param bool|null $us_branch_nominee_for_ptp_distributions_certification Certifies that the U.S. branch is treated as a U.S. person  and as a nominee for publicly traded partnership distributions under the applicable regulations.
     *
     * @return self
     */
    public function setUsBranchNomineeForPtpDistributionsCertification($us_branch_nominee_for_ptp_distributions_certification)
    {
        $this->container['us_branch_nominee_for_ptp_distributions_certification'] = $us_branch_nominee_for_ptp_distributions_certification;

        return $this;
    }

    /**
     * Gets us_branch_not_nominee_for_ptp_distributions_certification
     *
     * @return bool|null
     */
    public function getUsBranchNotNomineeForPtpDistributionsCertification()
    {
        return $this->container['us_branch_not_nominee_for_ptp_distributions_certification'];
    }

    /**
     * Sets us_branch_not_nominee_for_ptp_distributions_certification
     *
     * @param bool|null $us_branch_not_nominee_for_ptp_distributions_certification Certifies that the U.S. branch is not acting as a nominee for publicly traded partnership distributions  and is providing the required withholding statements.
     *
     * @return self
     */
    public function setUsBranchNotNomineeForPtpDistributionsCertification($us_branch_not_nominee_for_ptp_distributions_certification)
    {
        $this->container['us_branch_not_nominee_for_ptp_distributions_certification'] = $us_branch_not_nominee_for_ptp_distributions_certification;

        return $this;
    }

    /**
     * Gets withholding_foreign_partnership_or_trust_certification
     *
     * @return bool|null
     */
    public function getWithholdingForeignPartnershipOrTrustCertification()
    {
        return $this->container['withholding_foreign_partnership_or_trust_certification'];
    }

    /**
     * Sets withholding_foreign_partnership_or_trust_certification
     *
     * @param bool|null $withholding_foreign_partnership_or_trust_certification Certifies that the entity is a withholding foreign partnership (WP) or a withholding foreign trust (WT)  that is compliant with the terms of its WP or WT agreement.
     *
     * @return self
     */
    public function setWithholdingForeignPartnershipOrTrustCertification($withholding_foreign_partnership_or_trust_certification)
    {
        $this->container['withholding_foreign_partnership_or_trust_certification'] = $withholding_foreign_partnership_or_trust_certification;

        return $this;
    }

    /**
     * Gets nonwithholding_foreign_entity_withholding_statement_certification
     *
     * @return bool|null
     */
    public function getNonwithholdingForeignEntityWithholdingStatementCertification()
    {
        return $this->container['nonwithholding_foreign_entity_withholding_statement_certification'];
    }

    /**
     * Sets nonwithholding_foreign_entity_withholding_statement_certification
     *
     * @param bool|null $nonwithholding_foreign_entity_withholding_statement_certification Certifies that the entity is a nonwithholding foreign partnership or trust,  providing the form for non-effectively connected payments and transmitting required withholding documentation for chapters 3 and 4.
     *
     * @return self
     */
    public function setNonwithholdingForeignEntityWithholdingStatementCertification($nonwithholding_foreign_entity_withholding_statement_certification)
    {
        $this->container['nonwithholding_foreign_entity_withholding_statement_certification'] = $nonwithholding_foreign_entity_withholding_statement_certification;

        return $this;
    }

    /**
     * Gets foreign_entity_partner_in_lower_tier_partnership_certification
     *
     * @return bool|null
     */
    public function getForeignEntityPartnerInLowerTierPartnershipCertification()
    {
        return $this->container['foreign_entity_partner_in_lower_tier_partnership_certification'];
    }

    /**
     * Sets foreign_entity_partner_in_lower_tier_partnership_certification
     *
     * @param bool|null $foreign_entity_partner_in_lower_tier_partnership_certification Certifies that the entity is a foreign partnership or grantor trust acting as a partner in a lower-tier partnership  and is submitting the form for purposes of section 1446(a).
     *
     * @return self
     */
    public function setForeignEntityPartnerInLowerTierPartnershipCertification($foreign_entity_partner_in_lower_tier_partnership_certification)
    {
        $this->container['foreign_entity_partner_in_lower_tier_partnership_certification'] = $foreign_entity_partner_in_lower_tier_partnership_certification;

        return $this;
    }

    /**
     * Gets foreign_partnership_amount_realized_section1446_f_certification
     *
     * @return bool|null
     */
    public function getForeignPartnershipAmountRealizedSection1446FCertification()
    {
        return $this->container['foreign_partnership_amount_realized_section1446_f_certification'];
    }

    /**
     * Sets foreign_partnership_amount_realized_section1446_f_certification
     *
     * @param bool|null $foreign_partnership_amount_realized_section1446_f_certification Certifies that the entity is a foreign partnership receiving an amount realized  from the transfer of a partnership interest for purposes of section 1446(f).
     *
     * @return self
     */
    public function setForeignPartnershipAmountRealizedSection1446FCertification($foreign_partnership_amount_realized_section1446_f_certification)
    {
        $this->container['foreign_partnership_amount_realized_section1446_f_certification'] = $foreign_partnership_amount_realized_section1446_f_certification;

        return $this;
    }

    /**
     * Gets foreign_partnership_modified_amount_realized_certification
     *
     * @return bool|null
     */
    public function getForeignPartnershipModifiedAmountRealizedCertification()
    {
        return $this->container['foreign_partnership_modified_amount_realized_certification'];
    }

    /**
     * Sets foreign_partnership_modified_amount_realized_certification
     *
     * @param bool|null $foreign_partnership_modified_amount_realized_certification Certifies that the foreign partnership is providing a withholding statement for a modified amount realized  from the transfer of a partnership interest, when applicable.
     *
     * @return self
     */
    public function setForeignPartnershipModifiedAmountRealizedCertification($foreign_partnership_modified_amount_realized_certification)
    {
        $this->container['foreign_partnership_modified_amount_realized_certification'] = $foreign_partnership_modified_amount_realized_certification;

        return $this;
    }

    /**
     * Gets foreign_grantor_trust_amount_realized_allocation_certification
     *
     * @return bool|null
     */
    public function getForeignGrantorTrustAmountRealizedAllocationCertification()
    {
        return $this->container['foreign_grantor_trust_amount_realized_allocation_certification'];
    }

    /**
     * Sets foreign_grantor_trust_amount_realized_allocation_certification
     *
     * @param bool|null $foreign_grantor_trust_amount_realized_allocation_certification Certifies that the foreign grantor trust is submitting the form on behalf of each grantor or owner  and providing a withholding statement to allocate the amount realized in accordance with the regulations.
     *
     * @return self
     */
    public function setForeignGrantorTrustAmountRealizedAllocationCertification($foreign_grantor_trust_amount_realized_allocation_certification)
    {
        $this->container['foreign_grantor_trust_amount_realized_allocation_certification'] = $foreign_grantor_trust_amount_realized_allocation_certification;

        return $this;
    }

    /**
     * Gets alternative_withholding_statement_reliance_certification
     *
     * @return bool|null
     */
    public function getAlternativeWithholdingStatementRelianceCertification()
    {
        return $this->container['alternative_withholding_statement_reliance_certification'];
    }

    /**
     * Sets alternative_withholding_statement_reliance_certification
     *
     * @param bool|null $alternative_withholding_statement_reliance_certification Certifies that the entity may rely on the information in all associated withholding certificates  under the applicable standards of knowledge in sections 1441 or 1471 when providing an alternative withholding statement.
     *
     * @return self
     */
    public function setAlternativeWithholdingStatementRelianceCertification($alternative_withholding_statement_reliance_certification)
    {
        $this->container['alternative_withholding_statement_reliance_certification'] = $alternative_withholding_statement_reliance_certification;

        return $this;
    }

    /**
     * Gets np_ffi_with_exempt_beneficial_owners_certification
     *
     * @return bool|null
     */
    public function getNpFfiWithExemptBeneficialOwnersCertification()
    {
        return $this->container['np_ffi_with_exempt_beneficial_owners_certification'];
    }

    /**
     * Sets np_ffi_with_exempt_beneficial_owners_certification
     *
     * @param bool|null $np_ffi_with_exempt_beneficial_owners_certification Certifies that the nonparticipating FFI is transmitting withholding documentation  and providing a statement allocating payment portions to exempt beneficial owners.
     *
     * @return self
     */
    public function setNpFfiWithExemptBeneficialOwnersCertification($np_ffi_with_exempt_beneficial_owners_certification)
    {
        $this->container['np_ffi_with_exempt_beneficial_owners_certification'] = $np_ffi_with_exempt_beneficial_owners_certification;

        return $this;
    }

    /**
     * Gets ffi_sponsoring_entity
     *
     * @return string|null
     */
    public function getFfiSponsoringEntity()
    {
        return $this->container['ffi_sponsoring_entity'];
    }

    /**
     * Sets ffi_sponsoring_entity
     *
     * @param string|null $ffi_sponsoring_entity The name of the entity that sponsors the foreign financial institution (FFI).
     *
     * @return self
     */
    public function setFfiSponsoringEntity($ffi_sponsoring_entity)
    {
        $this->container['ffi_sponsoring_entity'] = $ffi_sponsoring_entity;

        return $this;
    }

    /**
     * Gets investment_entity_certification
     *
     * @return bool|null
     */
    public function getInvestmentEntityCertification()
    {
        return $this->container['investment_entity_certification'];
    }

    /**
     * Sets investment_entity_certification
     *
     * @param bool|null $investment_entity_certification Certifies that the entity is an investment entity, not a QI, WP, or WT, and has an agreement with a sponsoring entity.
     *
     * @return self
     */
    public function setInvestmentEntityCertification($investment_entity_certification)
    {
        $this->container['investment_entity_certification'] = $investment_entity_certification;

        return $this;
    }

    /**
     * Gets controlled_foreign_corporation_certification
     *
     * @return bool|null
     */
    public function getControlledForeignCorporationCertification()
    {
        return $this->container['controlled_foreign_corporation_certification'];
    }

    /**
     * Sets controlled_foreign_corporation_certification
     *
     * @param bool|null $controlled_foreign_corporation_certification Certifies that the entity is a controlled foreign corporation sponsored by a U.S. financial institution, not a QI, WP, or WT,  and shares a common electronic account system for full transparency.
     *
     * @return self
     */
    public function setControlledForeignCorporationCertification($controlled_foreign_corporation_certification)
    {
        $this->container['controlled_foreign_corporation_certification'] = $controlled_foreign_corporation_certification;

        return $this;
    }

    /**
     * Gets owner_documented_ffi_certification
     *
     * @return bool|null
     */
    public function getOwnerDocumentedFfiCertification()
    {
        return $this->container['owner_documented_ffi_certification'];
    }

    /**
     * Sets owner_documented_ffi_certification
     *
     * @param bool|null $owner_documented_ffi_certification Certifies that the FFI meets all requirements to qualify as an owner-documented FFI, including restrictions on activities,  ownership, and account relationships.
     *
     * @return self
     */
    public function setOwnerDocumentedFfiCertification($owner_documented_ffi_certification)
    {
        $this->container['owner_documented_ffi_certification'] = $owner_documented_ffi_certification;

        return $this;
    }

    /**
     * Gets owner_documented_ffi_reporting_statement_certification
     *
     * @return bool|null
     */
    public function getOwnerDocumentedFfiReportingStatementCertification()
    {
        return $this->container['owner_documented_ffi_reporting_statement_certification'];
    }

    /**
     * Sets owner_documented_ffi_reporting_statement_certification
     *
     * @param bool|null $owner_documented_ffi_reporting_statement_certification Certifies that the FFI will provide a complete owner reporting statement  and required documentation for each relevant owner or debt holder.
     *
     * @return self
     */
    public function setOwnerDocumentedFfiReportingStatementCertification($owner_documented_ffi_reporting_statement_certification)
    {
        $this->container['owner_documented_ffi_reporting_statement_certification'] = $owner_documented_ffi_reporting_statement_certification;

        return $this;
    }

    /**
     * Gets owner_documented_ffi_auditor_letter_certification
     *
     * @return bool|null
     */
    public function getOwnerDocumentedFfiAuditorLetterCertification()
    {
        return $this->container['owner_documented_ffi_auditor_letter_certification'];
    }

    /**
     * Sets owner_documented_ffi_auditor_letter_certification
     *
     * @param bool|null $owner_documented_ffi_auditor_letter_certification Certifies that the FFI has provided or will provide an auditor’s letter and required owner documentation,  including a reporting statement and Form W-9s, to meet owner-documented FFI requirements under the regulations.
     *
     * @return self
     */
    public function setOwnerDocumentedFfiAuditorLetterCertification($owner_documented_ffi_auditor_letter_certification)
    {
        $this->container['owner_documented_ffi_auditor_letter_certification'] = $owner_documented_ffi_auditor_letter_certification;

        return $this;
    }

    /**
     * Gets compliant_nonregistering_local_bank_certification
     *
     * @return bool|null
     */
    public function getCompliantNonregisteringLocalBankCertification()
    {
        return $this->container['compliant_nonregistering_local_bank_certification'];
    }

    /**
     * Sets compliant_nonregistering_local_bank_certification
     *
     * @param bool|null $compliant_nonregistering_local_bank_certification Certifies that the FFI operates solely as a limited bank or credit union within its country, meets asset thresholds,  and has no foreign operations or affiliations outside its country of organization.
     *
     * @return self
     */
    public function setCompliantNonregisteringLocalBankCertification($compliant_nonregistering_local_bank_certification)
    {
        $this->container['compliant_nonregistering_local_bank_certification'] = $compliant_nonregistering_local_bank_certification;

        return $this;
    }

    /**
     * Gets compliant_ffi_low_value_accounts_certification
     *
     * @return bool|null
     */
    public function getCompliantFfiLowValueAccountsCertification()
    {
        return $this->container['compliant_ffi_low_value_accounts_certification'];
    }

    /**
     * Sets compliant_ffi_low_value_accounts_certification
     *
     * @param bool|null $compliant_ffi_low_value_accounts_certification Certifies that the FFI is not primarily engaged in investment activities, maintains only low-value accounts,  and has limited total assets within its group.
     *
     * @return self
     */
    public function setCompliantFfiLowValueAccountsCertification($compliant_ffi_low_value_accounts_certification)
    {
        $this->container['compliant_ffi_low_value_accounts_certification'] = $compliant_ffi_low_value_accounts_certification;

        return $this;
    }

    /**
     * Gets sponsored_closely_held_entity_sponsoring_entity
     *
     * @return string|null
     */
    public function getSponsoredCloselyHeldEntitySponsoringEntity()
    {
        return $this->container['sponsored_closely_held_entity_sponsoring_entity'];
    }

    /**
     * Sets sponsored_closely_held_entity_sponsoring_entity
     *
     * @param string|null $sponsored_closely_held_entity_sponsoring_entity The name of sponsoring entity for a certified deemed-compliant, closely held investment vehicle.
     *
     * @return self
     */
    public function setSponsoredCloselyHeldEntitySponsoringEntity($sponsored_closely_held_entity_sponsoring_entity)
    {
        $this->container['sponsored_closely_held_entity_sponsoring_entity'] = $sponsored_closely_held_entity_sponsoring_entity;

        return $this;
    }

    /**
     * Gets sponsored_closely_held_investment_vehicle_certification
     *
     * @return bool|null
     */
    public function getSponsoredCloselyHeldInvestmentVehicleCertification()
    {
        return $this->container['sponsored_closely_held_investment_vehicle_certification'];
    }

    /**
     * Sets sponsored_closely_held_investment_vehicle_certification
     *
     * @param bool|null $sponsored_closely_held_investment_vehicle_certification Certifies that the entity is a sponsored investment entity with 20 or fewer individual owners,  and that all compliance obligations are fulfilled by the sponsoring entity.
     *
     * @return self
     */
    public function setSponsoredCloselyHeldInvestmentVehicleCertification($sponsored_closely_held_investment_vehicle_certification)
    {
        $this->container['sponsored_closely_held_investment_vehicle_certification'] = $sponsored_closely_held_investment_vehicle_certification;

        return $this;
    }

    /**
     * Gets compliant_limited_life_debt_entity_certification
     *
     * @return bool|null
     */
    public function getCompliantLimitedLifeDebtEntityCertification()
    {
        return $this->container['compliant_limited_life_debt_entity_certification'];
    }

    /**
     * Sets compliant_limited_life_debt_entity_certification
     *
     * @param bool|null $compliant_limited_life_debt_entity_certification Certifies that the entity qualifies as a limited life debt investment entity based on its formation date, issuance terms,  and compliance with regulatory requirements.
     *
     * @return self
     */
    public function setCompliantLimitedLifeDebtEntityCertification($compliant_limited_life_debt_entity_certification)
    {
        $this->container['compliant_limited_life_debt_entity_certification'] = $compliant_limited_life_debt_entity_certification;

        return $this;
    }

    /**
     * Gets investment_entity_no_financial_accounts_certification
     *
     * @return bool|null
     */
    public function getInvestmentEntityNoFinancialAccountsCertification()
    {
        return $this->container['investment_entity_no_financial_accounts_certification'];
    }

    /**
     * Sets investment_entity_no_financial_accounts_certification
     *
     * @param bool|null $investment_entity_no_financial_accounts_certification Certifies that the entity is a financial institution solely because it is an investment entity under regulations  and the entity does not maintain financial accounts.
     *
     * @return self
     */
    public function setInvestmentEntityNoFinancialAccountsCertification($investment_entity_no_financial_accounts_certification)
    {
        $this->container['investment_entity_no_financial_accounts_certification'] = $investment_entity_no_financial_accounts_certification;

        return $this;
    }

    /**
     * Gets restricted_distributor_certification
     *
     * @return bool|null
     */
    public function getRestrictedDistributorCertification()
    {
        return $this->container['restricted_distributor_certification'];
    }

    /**
     * Sets restricted_distributor_certification
     *
     * @param bool|null $restricted_distributor_certification Certifies that the entity qualifies as a restricted distributor based on its operations, customer base, regulatory compliance,  and financial and geographic limitations.
     *
     * @return self
     */
    public function setRestrictedDistributorCertification($restricted_distributor_certification)
    {
        $this->container['restricted_distributor_certification'] = $restricted_distributor_certification;

        return $this;
    }

    /**
     * Gets restricted_distributor_agreement_certification
     *
     * @return bool|null
     */
    public function getRestrictedDistributorAgreementCertification()
    {
        return $this->container['restricted_distributor_agreement_certification'];
    }

    /**
     * Sets restricted_distributor_agreement_certification
     *
     * @param bool|null $restricted_distributor_agreement_certification Certifies that the entity is, and has been, bound by distribution agreements prohibiting sales of fund interests to  specified U.S. persons and certain non-U.S. entities.
     *
     * @return self
     */
    public function setRestrictedDistributorAgreementCertification($restricted_distributor_agreement_certification)
    {
        $this->container['restricted_distributor_agreement_certification'] = $restricted_distributor_agreement_certification;

        return $this;
    }

    /**
     * Gets restricted_distributor_preexisting_sales_compliance_certification
     *
     * @return bool|null
     */
    public function getRestrictedDistributorPreexistingSalesComplianceCertification()
    {
        return $this->container['restricted_distributor_preexisting_sales_compliance_certification'];
    }

    /**
     * Sets restricted_distributor_preexisting_sales_compliance_certification
     *
     * @param bool|null $restricted_distributor_preexisting_sales_compliance_certification Certifies that the entity complies with distribution restrictions for U.S.-linked investors  and has addressed any preexisting sales in accordance with FATCA regulations.
     *
     * @return self
     */
    public function setRestrictedDistributorPreexistingSalesComplianceCertification($restricted_distributor_preexisting_sales_compliance_certification)
    {
        $this->container['restricted_distributor_preexisting_sales_compliance_certification'] = $restricted_distributor_preexisting_sales_compliance_certification;

        return $this;
    }

    /**
     * Gets foreign_central_bank_of_issue_certification
     *
     * @return bool|null
     */
    public function getForeignCentralBankOfIssueCertification()
    {
        return $this->container['foreign_central_bank_of_issue_certification'];
    }

    /**
     * Sets foreign_central_bank_of_issue_certification
     *
     * @param bool|null $foreign_central_bank_of_issue_certification Certifies that the entity is treated as the beneficial owner of the payment solely  for purposes of chapter 4 under Regulations section 1.1471-6(d)(4).
     *
     * @return self
     */
    public function setForeignCentralBankOfIssueCertification($foreign_central_bank_of_issue_certification)
    {
        $this->container['foreign_central_bank_of_issue_certification'] = $foreign_central_bank_of_issue_certification;

        return $this;
    }

    /**
     * Gets nonreporting_iga_ffi_certification
     *
     * @return bool|null
     */
    public function getNonreportingIgaFfiCertification()
    {
        return $this->container['nonreporting_iga_ffi_certification'];
    }

    /**
     * Sets nonreporting_iga_ffi_certification
     *
     * @param bool|null $nonreporting_iga_ffi_certification Certifies that the entity meets the requirements to be considered a nonreporting financial institution to an applicable IGA.
     *
     * @return self
     */
    public function setNonreportingIgaFfiCertification($nonreporting_iga_ffi_certification)
    {
        $this->container['nonreporting_iga_ffi_certification'] = $nonreporting_iga_ffi_certification;

        return $this;
    }

    /**
     * Gets iga_country
     *
     * @return string|null
     */
    public function getIgaCountry()
    {
        return $this->container['iga_country'];
    }

    /**
     * Sets iga_country
     *
     * @param string|null $iga_country The country for the applicable IGA with the United States.
     *
     * @return self
     */
    public function setIgaCountry($iga_country)
    {
        $this->container['iga_country'] = $iga_country;

        return $this;
    }

    /**
     * Gets iga_model
     *
     * @return string|null
     */
    public function getIgaModel()
    {
        return $this->container['iga_model'];
    }

    /**
     * Sets iga_model
     *
     * @param string|null $iga_model The applicable IGA model.
     *
     * @return self
     */
    public function setIgaModel($iga_model)
    {
        $this->container['iga_model'] = $iga_model;

        return $this;
    }

    /**
     * Gets iga_legal_status_treatment
     *
     * @return string|null
     */
    public function getIgaLegalStatusTreatment()
    {
        return $this->container['iga_legal_status_treatment'];
    }

    /**
     * Sets iga_legal_status_treatment
     *
     * @param string|null $iga_legal_status_treatment Specifies how the applicable IGA is treated under the IGA provisions or Treasury regulations.
     *
     * @return self
     */
    public function setIgaLegalStatusTreatment($iga_legal_status_treatment)
    {
        $this->container['iga_legal_status_treatment'] = $iga_legal_status_treatment;

        return $this;
    }

    /**
     * Gets iga_ffi_trustee_or_sponsor
     *
     * @return string|null
     */
    public function getIgaFfiTrusteeOrSponsor()
    {
        return $this->container['iga_ffi_trustee_or_sponsor'];
    }

    /**
     * Sets iga_ffi_trustee_or_sponsor
     *
     * @param string|null $iga_ffi_trustee_or_sponsor The trustee or sponsor name for the nonreporting IGA FFI.
     *
     * @return self
     */
    public function setIgaFfiTrusteeOrSponsor($iga_ffi_trustee_or_sponsor)
    {
        $this->container['iga_ffi_trustee_or_sponsor'] = $iga_ffi_trustee_or_sponsor;

        return $this;
    }

    /**
     * Gets iga_ffi_trustee_is_foreign
     *
     * @return bool|null
     */
    public function getIgaFfiTrusteeIsForeign()
    {
        return $this->container['iga_ffi_trustee_is_foreign'];
    }

    /**
     * Sets iga_ffi_trustee_is_foreign
     *
     * @param bool|null $iga_ffi_trustee_is_foreign Indicates whether the trustee for the nonreporting IGA FFI is foreign.
     *
     * @return self
     */
    public function setIgaFfiTrusteeIsForeign($iga_ffi_trustee_is_foreign)
    {
        $this->container['iga_ffi_trustee_is_foreign'] = $iga_ffi_trustee_is_foreign;

        return $this;
    }

    /**
     * Gets treaty_qualified_pension_fund_certification
     *
     * @return bool|null
     */
    public function getTreatyQualifiedPensionFundCertification()
    {
        return $this->container['treaty_qualified_pension_fund_certification'];
    }

    /**
     * Sets treaty_qualified_pension_fund_certification
     *
     * @param bool|null $treaty_qualified_pension_fund_certification Certifies that the entity is a pension or retirement fund established in a treaty country  and is entitled to treaty benefits on U.S. source income.
     *
     * @return self
     */
    public function setTreatyQualifiedPensionFundCertification($treaty_qualified_pension_fund_certification)
    {
        $this->container['treaty_qualified_pension_fund_certification'] = $treaty_qualified_pension_fund_certification;

        return $this;
    }

    /**
     * Gets qualified_retirement_fund_certification
     *
     * @return bool|null
     */
    public function getQualifiedRetirementFundCertification()
    {
        return $this->container['qualified_retirement_fund_certification'];
    }

    /**
     * Sets qualified_retirement_fund_certification
     *
     * @param bool|null $qualified_retirement_fund_certification Certifies that the entity is a government-regulated retirement fund meeting specific requirements for contributions, tax exemption,  beneficiary limits, and distribution restrictions.
     *
     * @return self
     */
    public function setQualifiedRetirementFundCertification($qualified_retirement_fund_certification)
    {
        $this->container['qualified_retirement_fund_certification'] = $qualified_retirement_fund_certification;

        return $this;
    }

    /**
     * Gets narrow_participation_retirement_fund_certification
     *
     * @return bool|null
     */
    public function getNarrowParticipationRetirementFundCertification()
    {
        return $this->container['narrow_participation_retirement_fund_certification'];
    }

    /**
     * Sets narrow_participation_retirement_fund_certification
     *
     * @param bool|null $narrow_participation_retirement_fund_certification Certifies that the entity is a government-regulated retirement fund with fewer than 50 participants, limited foreign ownership,  and employer sponsorship that is not from investment entities or passive NFFEs.
     *
     * @return self
     */
    public function setNarrowParticipationRetirementFundCertification($narrow_participation_retirement_fund_certification)
    {
        $this->container['narrow_participation_retirement_fund_certification'] = $narrow_participation_retirement_fund_certification;

        return $this;
    }

    /**
     * Gets section401_a_equivalent_pension_plan_certification
     *
     * @return bool|null
     */
    public function getSection401AEquivalentPensionPlanCertification()
    {
        return $this->container['section401_a_equivalent_pension_plan_certification'];
    }

    /**
     * Sets section401_a_equivalent_pension_plan_certification
     *
     * @param bool|null $section401_a_equivalent_pension_plan_certification Certifies that the entity is formed under a pension plan meeting section 401(a) requirements, except for being U.S.-trust funded.
     *
     * @return self
     */
    public function setSection401AEquivalentPensionPlanCertification($section401_a_equivalent_pension_plan_certification)
    {
        $this->container['section401_a_equivalent_pension_plan_certification'] = $section401_a_equivalent_pension_plan_certification;

        return $this;
    }

    /**
     * Gets investment_entity_for_retirement_funds_certification
     *
     * @return bool|null
     */
    public function getInvestmentEntityForRetirementFundsCertification()
    {
        return $this->container['investment_entity_for_retirement_funds_certification'];
    }

    /**
     * Sets investment_entity_for_retirement_funds_certification
     *
     * @param bool|null $investment_entity_for_retirement_funds_certification Certifies that the entity is established solely to earn income for the benefit of qualifying retirement funds  or accounts under applicable FATCA regulations or IGAs.
     *
     * @return self
     */
    public function setInvestmentEntityForRetirementFundsCertification($investment_entity_for_retirement_funds_certification)
    {
        $this->container['investment_entity_for_retirement_funds_certification'] = $investment_entity_for_retirement_funds_certification;

        return $this;
    }

    /**
     * Gets exempt_beneficial_owner_sponsored_retirement_fund_certification
     *
     * @return bool|null
     */
    public function getExemptBeneficialOwnerSponsoredRetirementFundCertification()
    {
        return $this->container['exempt_beneficial_owner_sponsored_retirement_fund_certification'];
    }

    /**
     * Sets exempt_beneficial_owner_sponsored_retirement_fund_certification
     *
     * @param bool|null $exempt_beneficial_owner_sponsored_retirement_fund_certification Certifies that the entity is established and sponsored by a qualifying exempt beneficial owner to provide retirement, disability,  or death benefits to individuals based on services performed for the sponsor.
     *
     * @return self
     */
    public function setExemptBeneficialOwnerSponsoredRetirementFundCertification($exempt_beneficial_owner_sponsored_retirement_fund_certification)
    {
        $this->container['exempt_beneficial_owner_sponsored_retirement_fund_certification'] = $exempt_beneficial_owner_sponsored_retirement_fund_certification;

        return $this;
    }

    /**
     * Gets excepted_nonfinancial_group_entity_certification
     *
     * @return bool|null
     */
    public function getExceptedNonfinancialGroupEntityCertification()
    {
        return $this->container['excepted_nonfinancial_group_entity_certification'];
    }

    /**
     * Sets excepted_nonfinancial_group_entity_certification
     *
     * @param bool|null $excepted_nonfinancial_group_entity_certification Certifies that the entity is a holding company, treasury center, or captive finance company operating within a nonfinancial group  and not functioning as an investment or financial institution.
     *
     * @return self
     */
    public function setExceptedNonfinancialGroupEntityCertification($excepted_nonfinancial_group_entity_certification)
    {
        $this->container['excepted_nonfinancial_group_entity_certification'] = $excepted_nonfinancial_group_entity_certification;

        return $this;
    }

    /**
     * Gets excepted_nonfinancial_start_up_certification
     *
     * @return bool|null
     */
    public function getExceptedNonfinancialStartUpCertification()
    {
        return $this->container['excepted_nonfinancial_start_up_certification'];
    }

    /**
     * Sets excepted_nonfinancial_start_up_certification
     *
     * @param bool|null $excepted_nonfinancial_start_up_certification Certifies that the entity is a recently formed startup NFFE investing in a non-financial business  and is not operating as or presenting itself as an investment fund.
     *
     * @return self
     */
    public function setExceptedNonfinancialStartUpCertification($excepted_nonfinancial_start_up_certification)
    {
        $this->container['excepted_nonfinancial_start_up_certification'] = $excepted_nonfinancial_start_up_certification;

        return $this;
    }

    /**
     * Gets startup_formation_or_resolution_date
     *
     * @return \DateTime|null
     */
    public function getStartupFormationOrResolutionDate()
    {
        return $this->container['startup_formation_or_resolution_date'];
    }

    /**
     * Sets startup_formation_or_resolution_date
     *
     * @param \DateTime|null $startup_formation_or_resolution_date The date the start-up company was formed on (or, in case of new line of business, the date of board resolution approving the  new line of business).
     *
     * @return self
     */
    public function setStartupFormationOrResolutionDate($startup_formation_or_resolution_date)
    {
        $this->container['startup_formation_or_resolution_date'] = $startup_formation_or_resolution_date;

        return $this;
    }

    /**
     * Gets excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification
     *
     * @return bool|null
     */
    public function getExceptedNonfinancialEntityInLiquidationOrBankruptcyCertification()
    {
        return $this->container['excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification'];
    }

    /**
     * Sets excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification
     *
     * @param bool|null $excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification Certifies that the entity is in liquidation, reorganization, or bankruptcy and intends to operate as a nonfinancial entity,  with supporting documentation available if the process exceeds three years.
     *
     * @return self
     */
    public function setExceptedNonfinancialEntityInLiquidationOrBankruptcyCertification($excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification)
    {
        $this->container['excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification'] = $excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification;

        return $this;
    }

    /**
     * Gets nonfinancial_entity_filing_date
     *
     * @return \DateTime|null
     */
    public function getNonfinancialEntityFilingDate()
    {
        return $this->container['nonfinancial_entity_filing_date'];
    }

    /**
     * Sets nonfinancial_entity_filing_date
     *
     * @param \DateTime|null $nonfinancial_entity_filing_date The filed date for a plan of reorganization, liquidation or bankruptcy.
     *
     * @return self
     */
    public function setNonfinancialEntityFilingDate($nonfinancial_entity_filing_date)
    {
        $this->container['nonfinancial_entity_filing_date'] = $nonfinancial_entity_filing_date;

        return $this;
    }

    /**
     * Gets publicly_traded_nffe_certification
     *
     * @return bool|null
     */
    public function getPubliclyTradedNffeCertification()
    {
        return $this->container['publicly_traded_nffe_certification'];
    }

    /**
     * Sets publicly_traded_nffe_certification
     *
     * @param bool|null $publicly_traded_nffe_certification Certifies that the entity is a foreign corporation that is not a financial institution  and whose stock is regularly traded on an established securities market.
     *
     * @return self
     */
    public function setPubliclyTradedNffeCertification($publicly_traded_nffe_certification)
    {
        $this->container['publicly_traded_nffe_certification'] = $publicly_traded_nffe_certification;

        return $this;
    }

    /**
     * Gets publicly_traded_nffe_securities_market
     *
     * @return string|null
     */
    public function getPubliclyTradedNffeSecuritiesMarket()
    {
        return $this->container['publicly_traded_nffe_securities_market'];
    }

    /**
     * Sets publicly_traded_nffe_securities_market
     *
     * @param string|null $publicly_traded_nffe_securities_market The name of the securities market where the corporation's stock is regularly traded.
     *
     * @return self
     */
    public function setPubliclyTradedNffeSecuritiesMarket($publicly_traded_nffe_securities_market)
    {
        $this->container['publicly_traded_nffe_securities_market'] = $publicly_traded_nffe_securities_market;

        return $this;
    }

    /**
     * Gets nffe_affiliate_of_publicly_traded_entity_certification
     *
     * @return bool|null
     */
    public function getNffeAffiliateOfPubliclyTradedEntityCertification()
    {
        return $this->container['nffe_affiliate_of_publicly_traded_entity_certification'];
    }

    /**
     * Sets nffe_affiliate_of_publicly_traded_entity_certification
     *
     * @param bool|null $nffe_affiliate_of_publicly_traded_entity_certification Certifies that the entity is a foreign corporation that is not a financial institution  and is affiliated with a publicly traded entity within the same expanded affiliated group.
     *
     * @return self
     */
    public function setNffeAffiliateOfPubliclyTradedEntityCertification($nffe_affiliate_of_publicly_traded_entity_certification)
    {
        $this->container['nffe_affiliate_of_publicly_traded_entity_certification'] = $nffe_affiliate_of_publicly_traded_entity_certification;

        return $this;
    }

    /**
     * Gets publicly_traded_entity
     *
     * @return string|null
     */
    public function getPubliclyTradedEntity()
    {
        return $this->container['publicly_traded_entity'];
    }

    /**
     * Sets publicly_traded_entity
     *
     * @param string|null $publicly_traded_entity The name of the affiliated entity whose stock is regularly traded on an established securities market.
     *
     * @return self
     */
    public function setPubliclyTradedEntity($publicly_traded_entity)
    {
        $this->container['publicly_traded_entity'] = $publicly_traded_entity;

        return $this;
    }

    /**
     * Gets nffe_affiliate_of_publicly_traded_entity_securities_market
     *
     * @return string|null
     */
    public function getNffeAffiliateOfPubliclyTradedEntitySecuritiesMarket()
    {
        return $this->container['nffe_affiliate_of_publicly_traded_entity_securities_market'];
    }

    /**
     * Sets nffe_affiliate_of_publicly_traded_entity_securities_market
     *
     * @param string|null $nffe_affiliate_of_publicly_traded_entity_securities_market The name of the established securities market where the affiliated entity's stock is traded.
     *
     * @return self
     */
    public function setNffeAffiliateOfPubliclyTradedEntitySecuritiesMarket($nffe_affiliate_of_publicly_traded_entity_securities_market)
    {
        $this->container['nffe_affiliate_of_publicly_traded_entity_securities_market'] = $nffe_affiliate_of_publicly_traded_entity_securities_market;

        return $this;
    }

    /**
     * Gets excepted_territory_nffe_certification
     *
     * @return bool|null
     */
    public function getExceptedTerritoryNffeCertification()
    {
        return $this->container['excepted_territory_nffe_certification'];
    }

    /**
     * Sets excepted_territory_nffe_certification
     *
     * @param bool|null $excepted_territory_nffe_certification Certifies that the entity is organized in a U.S. possession, is not engaged in financial activities,  and is entirely owned by bona fide residents of that possession.
     *
     * @return self
     */
    public function setExceptedTerritoryNffeCertification($excepted_territory_nffe_certification)
    {
        $this->container['excepted_territory_nffe_certification'] = $excepted_territory_nffe_certification;

        return $this;
    }

    /**
     * Gets active_nffe_certification
     *
     * @return bool|null
     */
    public function getActiveNffeCertification()
    {
        return $this->container['active_nffe_certification'];
    }

    /**
     * Sets active_nffe_certification
     *
     * @param bool|null $active_nffe_certification Certifies that the entity is a foreign non-financial institution with less than 50% passive income  and less than 50% of its assets producing or held to produce passive income.
     *
     * @return self
     */
    public function setActiveNffeCertification($active_nffe_certification)
    {
        $this->container['active_nffe_certification'] = $active_nffe_certification;

        return $this;
    }

    /**
     * Gets passive_nffe_certification
     *
     * @return bool|null
     */
    public function getPassiveNffeCertification()
    {
        return $this->container['passive_nffe_certification'];
    }

    /**
     * Sets passive_nffe_certification
     *
     * @param bool|null $passive_nffe_certification Certifies that the entity is a foreign non-financial entity that does not qualify for any other NFFE category  and is not a financial institution.
     *
     * @return self
     */
    public function setPassiveNffeCertification($passive_nffe_certification)
    {
        $this->container['passive_nffe_certification'] = $passive_nffe_certification;

        return $this;
    }

    /**
     * Gets sponsored_direct_reporting_nffe_certification
     *
     * @return bool|null
     */
    public function getSponsoredDirectReportingNffeCertification()
    {
        return $this->container['sponsored_direct_reporting_nffe_certification'];
    }

    /**
     * Sets sponsored_direct_reporting_nffe_certification
     *
     * @param bool|null $sponsored_direct_reporting_nffe_certification Certifies that the entity is a sponsored direct reporting NFFE.
     *
     * @return self
     */
    public function setSponsoredDirectReportingNffeCertification($sponsored_direct_reporting_nffe_certification)
    {
        $this->container['sponsored_direct_reporting_nffe_certification'] = $sponsored_direct_reporting_nffe_certification;

        return $this;
    }

    /**
     * Gets direct_reporting_nffe_sponsoring_entity
     *
     * @return string|null
     */
    public function getDirectReportingNffeSponsoringEntity()
    {
        return $this->container['direct_reporting_nffe_sponsoring_entity'];
    }

    /**
     * Sets direct_reporting_nffe_sponsoring_entity
     *
     * @param string|null $direct_reporting_nffe_sponsoring_entity The name of the entity that sponsors the direct reporting NFFE.
     *
     * @return self
     */
    public function setDirectReportingNffeSponsoringEntity($direct_reporting_nffe_sponsoring_entity)
    {
        $this->container['direct_reporting_nffe_sponsoring_entity'] = $direct_reporting_nffe_sponsoring_entity;

        return $this;
    }

    /**
     * Gets signer_name
     *
     * @return string|null
     */
    public function getSignerName()
    {
        return $this->container['signer_name'];
    }

    /**
     * Sets signer_name
     *
     * @param string|null $signer_name The name of the signer.
     *
     * @return self
     */
    public function setSignerName($signer_name)
    {
        $this->container['signer_name'] = $signer_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the form.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The form type.
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets entry_status
     *
     * @return string|null
     */
    public function getEntryStatus()
    {
        return $this->container['entry_status'];
    }

    /**
     * Sets entry_status
     *
     * @param string|null $entry_status The form status.
     *
     * @return self
     */
    public function setEntryStatus($entry_status)
    {
        $this->container['entry_status'] = $entry_status;

        return $this;
    }

    /**
     * Gets entry_status_date
     *
     * @return \DateTime|null
     */
    public function getEntryStatusDate()
    {
        return $this->container['entry_status_date'];
    }

    /**
     * Sets entry_status_date
     *
     * @param \DateTime|null $entry_status_date The timestamp for the latest status update.
     *
     * @return self
     */
    public function setEntryStatusDate($entry_status_date)
    {
        $this->container['entry_status_date'] = $entry_status_date;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id A reference identifier for the form.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string|null $company_id The ID of the associated company.
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name The display name associated with the form.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of the individual associated with the form.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Indicates whether the form is archived.
     *
     * @return self
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature The signature of the form.
     *
     * @return self
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets signed_date
     *
     * @return \DateTime|null
     */
    public function getSignedDate()
    {
        return $this->container['signed_date'];
    }

    /**
     * Sets signed_date
     *
     * @param \DateTime|null $signed_date The date the form was signed.
     *
     * @return self
     */
    public function setSignedDate($signed_date)
    {
        $this->container['signed_date'] = $signed_date;

        return $this;
    }

    /**
     * Gets e_delivery_consented_at
     *
     * @return \DateTime|null
     */
    public function getEDeliveryConsentedAt()
    {
        return $this->container['e_delivery_consented_at'];
    }

    /**
     * Sets e_delivery_consented_at
     *
     * @param \DateTime|null $e_delivery_consented_at The date when e-delivery was consented.
     *
     * @return self
     */
    public function setEDeliveryConsentedAt($e_delivery_consented_at)
    {
        $this->container['e_delivery_consented_at'] = $e_delivery_consented_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The creation date of the form.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at The last updated date of the form.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


