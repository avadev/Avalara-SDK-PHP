<?php
/**
 * JobResult
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * JobResult Class Doc Comment
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class JobResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'JobResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'dry_run' => 'bool',
        'upsert' => 'bool',
        'status' => 'string',
        'error_message' => 'string',
        'total_processed' => 'int',
        'total_rows' => 'int',
        'updated_valid' => 'int',
        'updated_no_email' => 'int',
        'updated_invalid' => 'int',
        'skipped_duplicate' => 'int',
        'skipped_invalid' => 'int',
        'skipped_multiple_matches' => 'int',
        'not_found' => 'int',
        'created_invalid' => 'int',
        'created_no_email' => 'int',
        'created_valid' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'dry_run' => null,
        'upsert' => null,
        'status' => null,
        'error_message' => null,
        'total_processed' => 'int32',
        'total_rows' => 'int32',
        'updated_valid' => 'int32',
        'updated_no_email' => 'int32',
        'updated_invalid' => 'int32',
        'skipped_duplicate' => 'int32',
        'skipped_invalid' => 'int32',
        'skipped_multiple_matches' => 'int32',
        'not_found' => 'int32',
        'created_invalid' => 'int32',
        'created_no_email' => 'int32',
        'created_valid' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'dry_run' => 'dryRun',
        'upsert' => 'upsert',
        'status' => 'status',
        'error_message' => 'errorMessage',
        'total_processed' => 'totalProcessed',
        'total_rows' => 'totalRows',
        'updated_valid' => 'updatedValid',
        'updated_no_email' => 'updatedNoEmail',
        'updated_invalid' => 'updatedInvalid',
        'skipped_duplicate' => 'skippedDuplicate',
        'skipped_invalid' => 'skippedInvalid',
        'skipped_multiple_matches' => 'skippedMultipleMatches',
        'not_found' => 'notFound',
        'created_invalid' => 'createdInvalid',
        'created_no_email' => 'createdNoEmail',
        'created_valid' => 'createdValid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'dry_run' => 'setDryRun',
        'upsert' => 'setUpsert',
        'status' => 'setStatus',
        'error_message' => 'setErrorMessage',
        'total_processed' => 'setTotalProcessed',
        'total_rows' => 'setTotalRows',
        'updated_valid' => 'setUpdatedValid',
        'updated_no_email' => 'setUpdatedNoEmail',
        'updated_invalid' => 'setUpdatedInvalid',
        'skipped_duplicate' => 'setSkippedDuplicate',
        'skipped_invalid' => 'setSkippedInvalid',
        'skipped_multiple_matches' => 'setSkippedMultipleMatches',
        'not_found' => 'setNotFound',
        'created_invalid' => 'setCreatedInvalid',
        'created_no_email' => 'setCreatedNoEmail',
        'created_valid' => 'setCreatedValid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'dry_run' => 'getDryRun',
        'upsert' => 'getUpsert',
        'status' => 'getStatus',
        'error_message' => 'getErrorMessage',
        'total_processed' => 'getTotalProcessed',
        'total_rows' => 'getTotalRows',
        'updated_valid' => 'getUpdatedValid',
        'updated_no_email' => 'getUpdatedNoEmail',
        'updated_invalid' => 'getUpdatedInvalid',
        'skipped_duplicate' => 'getSkippedDuplicate',
        'skipped_invalid' => 'getSkippedInvalid',
        'skipped_multiple_matches' => 'getSkippedMultipleMatches',
        'not_found' => 'getNotFound',
        'created_invalid' => 'getCreatedInvalid',
        'created_no_email' => 'getCreatedNoEmail',
        'created_valid' => 'getCreatedValid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['dry_run'] = $data['dry_run'] ?? null;
        $this->container['upsert'] = $data['upsert'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['error_message'] = $data['error_message'] ?? null;
        $this->container['total_processed'] = $data['total_processed'] ?? null;
        $this->container['total_rows'] = $data['total_rows'] ?? null;
        $this->container['updated_valid'] = $data['updated_valid'] ?? null;
        $this->container['updated_no_email'] = $data['updated_no_email'] ?? null;
        $this->container['updated_invalid'] = $data['updated_invalid'] ?? null;
        $this->container['skipped_duplicate'] = $data['skipped_duplicate'] ?? null;
        $this->container['skipped_invalid'] = $data['skipped_invalid'] ?? null;
        $this->container['skipped_multiple_matches'] = $data['skipped_multiple_matches'] ?? null;
        $this->container['not_found'] = $data['not_found'] ?? null;
        $this->container['created_invalid'] = $data['created_invalid'] ?? null;
        $this->container['created_no_email'] = $data['created_no_email'] ?? null;
        $this->container['created_valid'] = $data['created_valid'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets dry_run
     *
     * @return bool|null
     */
    public function getDryRun()
    {
        return $this->container['dry_run'];
    }

    /**
     * Sets dry_run
     *
     * @param bool|null $dry_run Dry run. If `true`, this job only simulates the changes but doesn't actually persist them.
     *
     * @return self
     */
    public function setDryRun($dry_run)
    {
        $this->container['dry_run'] = $dry_run;

        return $this;
    }

    /**
     * Gets upsert
     *
     * @return bool|null
     */
    public function getUpsert()
    {
        return $this->container['upsert'];
    }

    /**
     * Sets upsert
     *
     * @param bool|null $upsert Upsert. If `true`, this job will first attempt to update existing records if matches can be found. Matches are done in the following order:  * Form ID  * Form Reference ID and tax year  * Form TIN and tax year
     *
     * @return self
     */
    public function setUpsert($upsert)
    {
        $this->container['upsert'] = $upsert;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the job
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message error_message
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets total_processed
     *
     * @return int|null
     */
    public function getTotalProcessed()
    {
        return $this->container['total_processed'];
    }

    /**
     * Sets total_processed
     *
     * @param int|null $total_processed Total number of forms processed
     *
     * @return self
     */
    public function setTotalProcessed($total_processed)
    {
        $this->container['total_processed'] = $total_processed;

        return $this;
    }

    /**
     * Gets total_rows
     *
     * @return int|null
     */
    public function getTotalRows()
    {
        return $this->container['total_rows'];
    }

    /**
     * Sets total_rows
     *
     * @param int|null $total_rows Total number of forms in the request
     *
     * @return self
     */
    public function setTotalRows($total_rows)
    {
        $this->container['total_rows'] = $total_rows;

        return $this;
    }

    /**
     * Gets updated_valid
     *
     * @return int|null
     */
    public function getUpdatedValid()
    {
        return $this->container['updated_valid'];
    }

    /**
     * Sets updated_valid
     *
     * @param int|null $updated_valid Number of forms updated and valid for e-filing and e-delivery
     *
     * @return self
     */
    public function setUpdatedValid($updated_valid)
    {
        $this->container['updated_valid'] = $updated_valid;

        return $this;
    }

    /**
     * Gets updated_no_email
     *
     * @return int|null
     */
    public function getUpdatedNoEmail()
    {
        return $this->container['updated_no_email'];
    }

    /**
     * Sets updated_no_email
     *
     * @param int|null $updated_no_email Number of forms updated and valid for e-filing but missing email or email is undeliverable
     *
     * @return self
     */
    public function setUpdatedNoEmail($updated_no_email)
    {
        $this->container['updated_no_email'] = $updated_no_email;

        return $this;
    }

    /**
     * Gets updated_invalid
     *
     * @return int|null
     */
    public function getUpdatedInvalid()
    {
        return $this->container['updated_invalid'];
    }

    /**
     * Sets updated_invalid
     *
     * @param int|null $updated_invalid Number of forms updated but invalid for e-filing
     *
     * @return self
     */
    public function setUpdatedInvalid($updated_invalid)
    {
        $this->container['updated_invalid'] = $updated_invalid;

        return $this;
    }

    /**
     * Gets skipped_duplicate
     *
     * @return int|null
     */
    public function getSkippedDuplicate()
    {
        return $this->container['skipped_duplicate'];
    }

    /**
     * Sets skipped_duplicate
     *
     * @param int|null $skipped_duplicate Number of forms skipped because they would have updated a record already updated once in the request
     *
     * @return self
     */
    public function setSkippedDuplicate($skipped_duplicate)
    {
        $this->container['skipped_duplicate'] = $skipped_duplicate;

        return $this;
    }

    /**
     * Gets skipped_invalid
     *
     * @return int|null
     */
    public function getSkippedInvalid()
    {
        return $this->container['skipped_invalid'];
    }

    /**
     * Sets skipped_invalid
     *
     * @param int|null $skipped_invalid Number of forms skipped because they would have made a form invalid and the form is already e-filed or scheduled for e-filing
     *
     * @return self
     */
    public function setSkippedInvalid($skipped_invalid)
    {
        $this->container['skipped_invalid'] = $skipped_invalid;

        return $this;
    }

    /**
     * Gets skipped_multiple_matches
     *
     * @return int|null
     */
    public function getSkippedMultipleMatches()
    {
        return $this->container['skipped_multiple_matches'];
    }

    /**
     * Sets skipped_multiple_matches
     *
     * @param int|null $skipped_multiple_matches Number of forms skipped because they matched multiple forms
     *
     * @return self
     */
    public function setSkippedMultipleMatches($skipped_multiple_matches)
    {
        $this->container['skipped_multiple_matches'] = $skipped_multiple_matches;

        return $this;
    }

    /**
     * Gets not_found
     *
     * @return int|null
     */
    public function getNotFound()
    {
        return $this->container['not_found'];
    }

    /**
     * Sets not_found
     *
     * @param int|null $not_found Number of forms skipped because no matching form or issuer could be found
     *
     * @return self
     */
    public function setNotFound($not_found)
    {
        $this->container['not_found'] = $not_found;

        return $this;
    }

    /**
     * Gets created_invalid
     *
     * @return int|null
     */
    public function getCreatedInvalid()
    {
        return $this->container['created_invalid'];
    }

    /**
     * Sets created_invalid
     *
     * @param int|null $created_invalid Number of new forms created because no matching form could be found (and `upsert` was true) - with errors
     *
     * @return self
     */
    public function setCreatedInvalid($created_invalid)
    {
        $this->container['created_invalid'] = $created_invalid;

        return $this;
    }

    /**
     * Gets created_no_email
     *
     * @return int|null
     */
    public function getCreatedNoEmail()
    {
        return $this->container['created_no_email'];
    }

    /**
     * Sets created_no_email
     *
     * @param int|null $created_no_email Number of new forms created because no matching form could be found (and `upsert` was true) - valid for e-filing but missing email or email is undeliverable
     *
     * @return self
     */
    public function setCreatedNoEmail($created_no_email)
    {
        $this->container['created_no_email'] = $created_no_email;

        return $this;
    }

    /**
     * Gets created_valid
     *
     * @return int|null
     */
    public function getCreatedValid()
    {
        return $this->container['created_valid'];
    }

    /**
     * Sets created_valid
     *
     * @param int|null $created_valid Number of new forms created because no matching form could be found (and `upsert` was true) - valid for e-filing and e-delivery
     *
     * @return self
     */
    public function setCreatedValid($created_valid)
    {
        $this->container['created_valid'] = $created_valid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


