<?php
/**
 * W8BenFormRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * W8BenFormRequest Class Doc Comment
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class W8BenFormRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'W8BenFormRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'name' => 'string',
        'citizenship_country' => 'string',
        'residence_address' => 'string',
        'residence_city' => 'string',
        'residence_state' => 'string',
        'residence_zip' => 'string',
        'residence_country' => 'string',
        'residence_is_mailing' => 'bool',
        'mailing_address' => 'string',
        'mailing_city' => 'string',
        'mailing_state' => 'string',
        'mailing_zip' => 'string',
        'mailing_country' => 'string',
        'tin' => 'string',
        'foreign_tin_not_required' => 'bool',
        'foreign_tin' => 'string',
        'reference_number' => 'string',
        'birthday' => '\DateTime',
        'treaty_country' => 'string',
        'treaty_article' => 'string',
        'treaty_reasons' => 'string',
        'withholding_rate' => 'string',
        'income_type' => 'string',
        'signer_name' => 'string',
        'company_id' => 'string',
        'reference_id' => 'string',
        'email' => 'string',
        'e_delivery_consented_at' => '\DateTime',
        'signature' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'name' => null,
        'citizenship_country' => null,
        'residence_address' => null,
        'residence_city' => null,
        'residence_state' => null,
        'residence_zip' => null,
        'residence_country' => null,
        'residence_is_mailing' => null,
        'mailing_address' => null,
        'mailing_city' => null,
        'mailing_state' => null,
        'mailing_zip' => null,
        'mailing_country' => null,
        'tin' => null,
        'foreign_tin_not_required' => null,
        'foreign_tin' => null,
        'reference_number' => null,
        'birthday' => 'date',
        'treaty_country' => null,
        'treaty_article' => null,
        'treaty_reasons' => null,
        'withholding_rate' => null,
        'income_type' => null,
        'signer_name' => null,
        'company_id' => null,
        'reference_id' => null,
        'email' => null,
        'e_delivery_consented_at' => 'date-time',
        'signature' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'name' => 'name',
        'citizenship_country' => 'citizenshipCountry',
        'residence_address' => 'residenceAddress',
        'residence_city' => 'residenceCity',
        'residence_state' => 'residenceState',
        'residence_zip' => 'residenceZip',
        'residence_country' => 'residenceCountry',
        'residence_is_mailing' => 'residenceIsMailing',
        'mailing_address' => 'mailingAddress',
        'mailing_city' => 'mailingCity',
        'mailing_state' => 'mailingState',
        'mailing_zip' => 'mailingZip',
        'mailing_country' => 'mailingCountry',
        'tin' => 'tin',
        'foreign_tin_not_required' => 'foreignTinNotRequired',
        'foreign_tin' => 'foreignTin',
        'reference_number' => 'referenceNumber',
        'birthday' => 'birthday',
        'treaty_country' => 'treatyCountry',
        'treaty_article' => 'treatyArticle',
        'treaty_reasons' => 'treatyReasons',
        'withholding_rate' => 'withholdingRate',
        'income_type' => 'incomeType',
        'signer_name' => 'signerName',
        'company_id' => 'companyId',
        'reference_id' => 'referenceId',
        'email' => 'email',
        'e_delivery_consented_at' => 'eDeliveryConsentedAt',
        'signature' => 'signature'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'name' => 'setName',
        'citizenship_country' => 'setCitizenshipCountry',
        'residence_address' => 'setResidenceAddress',
        'residence_city' => 'setResidenceCity',
        'residence_state' => 'setResidenceState',
        'residence_zip' => 'setResidenceZip',
        'residence_country' => 'setResidenceCountry',
        'residence_is_mailing' => 'setResidenceIsMailing',
        'mailing_address' => 'setMailingAddress',
        'mailing_city' => 'setMailingCity',
        'mailing_state' => 'setMailingState',
        'mailing_zip' => 'setMailingZip',
        'mailing_country' => 'setMailingCountry',
        'tin' => 'setTin',
        'foreign_tin_not_required' => 'setForeignTinNotRequired',
        'foreign_tin' => 'setForeignTin',
        'reference_number' => 'setReferenceNumber',
        'birthday' => 'setBirthday',
        'treaty_country' => 'setTreatyCountry',
        'treaty_article' => 'setTreatyArticle',
        'treaty_reasons' => 'setTreatyReasons',
        'withholding_rate' => 'setWithholdingRate',
        'income_type' => 'setIncomeType',
        'signer_name' => 'setSignerName',
        'company_id' => 'setCompanyId',
        'reference_id' => 'setReferenceId',
        'email' => 'setEmail',
        'e_delivery_consented_at' => 'setEDeliveryConsentedAt',
        'signature' => 'setSignature'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'name' => 'getName',
        'citizenship_country' => 'getCitizenshipCountry',
        'residence_address' => 'getResidenceAddress',
        'residence_city' => 'getResidenceCity',
        'residence_state' => 'getResidenceState',
        'residence_zip' => 'getResidenceZip',
        'residence_country' => 'getResidenceCountry',
        'residence_is_mailing' => 'getResidenceIsMailing',
        'mailing_address' => 'getMailingAddress',
        'mailing_city' => 'getMailingCity',
        'mailing_state' => 'getMailingState',
        'mailing_zip' => 'getMailingZip',
        'mailing_country' => 'getMailingCountry',
        'tin' => 'getTin',
        'foreign_tin_not_required' => 'getForeignTinNotRequired',
        'foreign_tin' => 'getForeignTin',
        'reference_number' => 'getReferenceNumber',
        'birthday' => 'getBirthday',
        'treaty_country' => 'getTreatyCountry',
        'treaty_article' => 'getTreatyArticle',
        'treaty_reasons' => 'getTreatyReasons',
        'withholding_rate' => 'getWithholdingRate',
        'income_type' => 'getIncomeType',
        'signer_name' => 'getSignerName',
        'company_id' => 'getCompanyId',
        'reference_id' => 'getReferenceId',
        'email' => 'getEmail',
        'e_delivery_consented_at' => 'getEDeliveryConsentedAt',
        'signature' => 'getSignature'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_W4 = 'W4';
    const TYPE_W8_BEN = 'W8Ben';
    const TYPE_W8_BEN_E = 'W8BenE';
    const TYPE_W8_IMY = 'W8Imy';
    const TYPE_W9 = 'W9';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_W4,
            self::TYPE_W8_BEN,
            self::TYPE_W8_BEN_E,
            self::TYPE_W8_IMY,
            self::TYPE_W9,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['citizenship_country'] = $data['citizenship_country'] ?? null;
        $this->container['residence_address'] = $data['residence_address'] ?? null;
        $this->container['residence_city'] = $data['residence_city'] ?? null;
        $this->container['residence_state'] = $data['residence_state'] ?? null;
        $this->container['residence_zip'] = $data['residence_zip'] ?? null;
        $this->container['residence_country'] = $data['residence_country'] ?? null;
        $this->container['residence_is_mailing'] = $data['residence_is_mailing'] ?? null;
        $this->container['mailing_address'] = $data['mailing_address'] ?? null;
        $this->container['mailing_city'] = $data['mailing_city'] ?? null;
        $this->container['mailing_state'] = $data['mailing_state'] ?? null;
        $this->container['mailing_zip'] = $data['mailing_zip'] ?? null;
        $this->container['mailing_country'] = $data['mailing_country'] ?? null;
        $this->container['tin'] = $data['tin'] ?? null;
        $this->container['foreign_tin_not_required'] = $data['foreign_tin_not_required'] ?? null;
        $this->container['foreign_tin'] = $data['foreign_tin'] ?? null;
        $this->container['reference_number'] = $data['reference_number'] ?? null;
        $this->container['birthday'] = $data['birthday'] ?? null;
        $this->container['treaty_country'] = $data['treaty_country'] ?? null;
        $this->container['treaty_article'] = $data['treaty_article'] ?? null;
        $this->container['treaty_reasons'] = $data['treaty_reasons'] ?? null;
        $this->container['withholding_rate'] = $data['withholding_rate'] ?? null;
        $this->container['income_type'] = $data['income_type'] ?? null;
        $this->container['signer_name'] = $data['signer_name'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['e_delivery_consented_at'] = $data['e_delivery_consented_at'] ?? null;
        $this->container['signature'] = $data['signature'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The form type (always \"w8ben\" for this model).
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the individual or entity associated with the form.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets citizenship_country
     *
     * @return string|null
     */
    public function getCitizenshipCountry()
    {
        return $this->container['citizenship_country'];
    }

    /**
     * Sets citizenship_country
     *
     * @param string|null $citizenship_country The country of citizenship.
     *
     * @return self
     */
    public function setCitizenshipCountry($citizenship_country)
    {
        $this->container['citizenship_country'] = $citizenship_country;

        return $this;
    }

    /**
     * Gets residence_address
     *
     * @return string|null
     */
    public function getResidenceAddress()
    {
        return $this->container['residence_address'];
    }

    /**
     * Sets residence_address
     *
     * @param string|null $residence_address The residential address of the individual or entity.
     *
     * @return self
     */
    public function setResidenceAddress($residence_address)
    {
        $this->container['residence_address'] = $residence_address;

        return $this;
    }

    /**
     * Gets residence_city
     *
     * @return string|null
     */
    public function getResidenceCity()
    {
        return $this->container['residence_city'];
    }

    /**
     * Sets residence_city
     *
     * @param string|null $residence_city The city of residence.
     *
     * @return self
     */
    public function setResidenceCity($residence_city)
    {
        $this->container['residence_city'] = $residence_city;

        return $this;
    }

    /**
     * Gets residence_state
     *
     * @return string|null
     */
    public function getResidenceState()
    {
        return $this->container['residence_state'];
    }

    /**
     * Sets residence_state
     *
     * @param string|null $residence_state The state of residence.
     *
     * @return self
     */
    public function setResidenceState($residence_state)
    {
        $this->container['residence_state'] = $residence_state;

        return $this;
    }

    /**
     * Gets residence_zip
     *
     * @return string|null
     */
    public function getResidenceZip()
    {
        return $this->container['residence_zip'];
    }

    /**
     * Sets residence_zip
     *
     * @param string|null $residence_zip The ZIP code of the residence.
     *
     * @return self
     */
    public function setResidenceZip($residence_zip)
    {
        $this->container['residence_zip'] = $residence_zip;

        return $this;
    }

    /**
     * Gets residence_country
     *
     * @return string|null
     */
    public function getResidenceCountry()
    {
        return $this->container['residence_country'];
    }

    /**
     * Sets residence_country
     *
     * @param string|null $residence_country The country of residence.
     *
     * @return self
     */
    public function setResidenceCountry($residence_country)
    {
        $this->container['residence_country'] = $residence_country;

        return $this;
    }

    /**
     * Gets residence_is_mailing
     *
     * @return bool|null
     */
    public function getResidenceIsMailing()
    {
        return $this->container['residence_is_mailing'];
    }

    /**
     * Sets residence_is_mailing
     *
     * @param bool|null $residence_is_mailing Indicates whether the residence address is the mailing address.
     *
     * @return self
     */
    public function setResidenceIsMailing($residence_is_mailing)
    {
        $this->container['residence_is_mailing'] = $residence_is_mailing;

        return $this;
    }

    /**
     * Gets mailing_address
     *
     * @return string|null
     */
    public function getMailingAddress()
    {
        return $this->container['mailing_address'];
    }

    /**
     * Sets mailing_address
     *
     * @param string|null $mailing_address The mailing address.
     *
     * @return self
     */
    public function setMailingAddress($mailing_address)
    {
        $this->container['mailing_address'] = $mailing_address;

        return $this;
    }

    /**
     * Gets mailing_city
     *
     * @return string|null
     */
    public function getMailingCity()
    {
        return $this->container['mailing_city'];
    }

    /**
     * Sets mailing_city
     *
     * @param string|null $mailing_city The city of the mailing address.
     *
     * @return self
     */
    public function setMailingCity($mailing_city)
    {
        $this->container['mailing_city'] = $mailing_city;

        return $this;
    }

    /**
     * Gets mailing_state
     *
     * @return string|null
     */
    public function getMailingState()
    {
        return $this->container['mailing_state'];
    }

    /**
     * Sets mailing_state
     *
     * @param string|null $mailing_state The state of the mailing address.
     *
     * @return self
     */
    public function setMailingState($mailing_state)
    {
        $this->container['mailing_state'] = $mailing_state;

        return $this;
    }

    /**
     * Gets mailing_zip
     *
     * @return string|null
     */
    public function getMailingZip()
    {
        return $this->container['mailing_zip'];
    }

    /**
     * Sets mailing_zip
     *
     * @param string|null $mailing_zip The ZIP code of the mailing address.
     *
     * @return self
     */
    public function setMailingZip($mailing_zip)
    {
        $this->container['mailing_zip'] = $mailing_zip;

        return $this;
    }

    /**
     * Gets mailing_country
     *
     * @return string|null
     */
    public function getMailingCountry()
    {
        return $this->container['mailing_country'];
    }

    /**
     * Sets mailing_country
     *
     * @param string|null $mailing_country The country of the mailing address.
     *
     * @return self
     */
    public function setMailingCountry($mailing_country)
    {
        $this->container['mailing_country'] = $mailing_country;

        return $this;
    }

    /**
     * Gets tin
     *
     * @return string|null
     */
    public function getTin()
    {
        return $this->container['tin'];
    }

    /**
     * Sets tin
     *
     * @param string|null $tin The taxpayer identification number (TIN).
     *
     * @return self
     */
    public function setTin($tin)
    {
        $this->container['tin'] = $tin;

        return $this;
    }

    /**
     * Gets foreign_tin_not_required
     *
     * @return bool|null
     */
    public function getForeignTinNotRequired()
    {
        return $this->container['foreign_tin_not_required'];
    }

    /**
     * Sets foreign_tin_not_required
     *
     * @param bool|null $foreign_tin_not_required Indicates whether a foreign TIN is not legally required.
     *
     * @return self
     */
    public function setForeignTinNotRequired($foreign_tin_not_required)
    {
        $this->container['foreign_tin_not_required'] = $foreign_tin_not_required;

        return $this;
    }

    /**
     * Gets foreign_tin
     *
     * @return string|null
     */
    public function getForeignTin()
    {
        return $this->container['foreign_tin'];
    }

    /**
     * Sets foreign_tin
     *
     * @param string|null $foreign_tin The foreign taxpayer identification number (TIN).
     *
     * @return self
     */
    public function setForeignTin($foreign_tin)
    {
        $this->container['foreign_tin'] = $foreign_tin;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number A reference number for the form.
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return \DateTime|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param \DateTime|null $birthday The birthday of the individual associated with the form.
     *
     * @return self
     */
    public function setBirthday($birthday)
    {
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets treaty_country
     *
     * @return string|null
     */
    public function getTreatyCountry()
    {
        return $this->container['treaty_country'];
    }

    /**
     * Sets treaty_country
     *
     * @param string|null $treaty_country The country for which the treaty applies.
     *
     * @return self
     */
    public function setTreatyCountry($treaty_country)
    {
        $this->container['treaty_country'] = $treaty_country;

        return $this;
    }

    /**
     * Gets treaty_article
     *
     * @return string|null
     */
    public function getTreatyArticle()
    {
        return $this->container['treaty_article'];
    }

    /**
     * Sets treaty_article
     *
     * @param string|null $treaty_article The specific article of the treaty being claimed.
     *
     * @return self
     */
    public function setTreatyArticle($treaty_article)
    {
        $this->container['treaty_article'] = $treaty_article;

        return $this;
    }

    /**
     * Gets treaty_reasons
     *
     * @return string|null
     */
    public function getTreatyReasons()
    {
        return $this->container['treaty_reasons'];
    }

    /**
     * Sets treaty_reasons
     *
     * @param string|null $treaty_reasons The reasons for claiming treaty benefits.
     *
     * @return self
     */
    public function setTreatyReasons($treaty_reasons)
    {
        $this->container['treaty_reasons'] = $treaty_reasons;

        return $this;
    }

    /**
     * Gets withholding_rate
     *
     * @return string|null
     */
    public function getWithholdingRate()
    {
        return $this->container['withholding_rate'];
    }

    /**
     * Sets withholding_rate
     *
     * @param string|null $withholding_rate The withholding rate applied as per the treaty.
     *
     * @return self
     */
    public function setWithholdingRate($withholding_rate)
    {
        $this->container['withholding_rate'] = $withholding_rate;

        return $this;
    }

    /**
     * Gets income_type
     *
     * @return string|null
     */
    public function getIncomeType()
    {
        return $this->container['income_type'];
    }

    /**
     * Sets income_type
     *
     * @param string|null $income_type The type of income covered by the treaty.
     *
     * @return self
     */
    public function setIncomeType($income_type)
    {
        $this->container['income_type'] = $income_type;

        return $this;
    }

    /**
     * Gets signer_name
     *
     * @return string|null
     */
    public function getSignerName()
    {
        return $this->container['signer_name'];
    }

    /**
     * Sets signer_name
     *
     * @param string|null $signer_name The name of the signer of the form.
     *
     * @return self
     */
    public function setSignerName($signer_name)
    {
        $this->container['signer_name'] = $signer_name;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string|null $company_id The ID of the associated company.
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id A reference identifier for the form.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of the individual associated with the form.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets e_delivery_consented_at
     *
     * @return \DateTime|null
     */
    public function getEDeliveryConsentedAt()
    {
        return $this->container['e_delivery_consented_at'];
    }

    /**
     * Sets e_delivery_consented_at
     *
     * @param \DateTime|null $e_delivery_consented_at The date when e-delivery was consented.
     *
     * @return self
     */
    public function setEDeliveryConsentedAt($e_delivery_consented_at)
    {
        $this->container['e_delivery_consented_at'] = $e_delivery_consented_at;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature The signature of the form.
     *
     * @return self
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


