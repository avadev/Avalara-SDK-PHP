<?php
/**
 * W8BenEFormRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * W8BenEFormRequest Class Doc Comment
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class W8BenEFormRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'W8BenEFormRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'name' => 'string',
        'citizenship_country' => 'string',
        'disregarded_entity' => 'string',
        'entity_type' => 'string',
        'making_treaty_claim' => 'bool',
        'fatca_status' => 'string',
        'residence_address' => 'string',
        'residence_city' => 'string',
        'residence_state' => 'string',
        'residence_zip' => 'string',
        'residence_country' => 'string',
        'residence_is_mailing' => 'bool',
        'mailing_address' => 'string',
        'mailing_city' => 'string',
        'mailing_state' => 'string',
        'mailing_zip' => 'string',
        'mailing_country' => 'string',
        'tin' => 'string',
        'giin' => 'string',
        'foreign_tin_not_required' => 'bool',
        'foreign_tin' => 'string',
        'reference_number' => 'string',
        'disregarded_entity_fatca_status' => 'string',
        'disregarded_address' => 'string',
        'disregarded_city' => 'string',
        'disregarded_state' => 'string',
        'disregarded_zip' => 'string',
        'disregarded_country' => 'string',
        'disregarded_entity_giin' => 'string',
        'treaty_country_certification' => 'bool',
        'treaty_country' => 'string',
        'benefit_limitation_certification' => 'bool',
        'benefit_limitation' => 'string',
        'qualified_resident_status_certification' => 'bool',
        'treaty_article' => 'string',
        'withholding_rate' => 'string',
        'income_type' => 'string',
        'treaty_reasons' => 'string',
        'ffi_sponsoring_entity' => 'string',
        'investment_entity_certification' => 'bool',
        'controlled_foreign_corporation_certification' => 'bool',
        'compliant_nonregistering_local_bank_certification' => 'bool',
        'compliant_ffi_low_value_accounts_certification' => 'bool',
        'sponsored_closely_held_entity_sponsoring_entity' => 'string',
        'sponsored_closely_held_investment_vehicle_certification' => 'bool',
        'compliant_limited_life_debt_entity_certification' => 'bool',
        'investment_entity_no_financial_accounts_certification' => 'bool',
        'owner_documented_ffi_certification' => 'bool',
        'owner_documented_ffi_reporting_statement_certification' => 'bool',
        'owner_documented_ffi_auditor_letter_certification' => 'bool',
        'owner_documented_ffi_trust_beneficiaries_certification' => 'bool',
        'restricted_distributor_certification' => 'bool',
        'restricted_distributor_agreement_certification' => 'bool',
        'restricted_distributor_preexisting_sales_compliance_certification' => 'bool',
        'nonreporting_iga_ffi_certification' => 'bool',
        'iga_country' => 'string',
        'iga_model' => 'string',
        'iga_legal_status_treatment' => 'string',
        'iga_ffi_trustee_or_sponsor' => 'string',
        'iga_ffi_trustee_is_foreign' => 'bool',
        'non_commercial_financial_activity_certification' => 'bool',
        'internation_organization_certification' => 'bool',
        'intergovernmental_organization_certification' => 'bool',
        'treaty_qualified_pension_fund_certification' => 'bool',
        'qualified_retirement_fund_certification' => 'bool',
        'narrow_participation_retirement_fund_certification' => 'bool',
        'section401_a_equivalent_pension_plan_certification' => 'bool',
        'investment_entity_for_retirement_funds_certification' => 'bool',
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => 'bool',
        'exempt_beneficial_owner_owned_investment_entity_certification' => 'bool',
        'territory_financial_institution_certification' => 'bool',
        'excepted_nonfinancial_group_entity_certification' => 'bool',
        'excepted_nonfinancial_start_up_certification' => 'bool',
        'startup_formation_or_resolution_date' => '\DateTime',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => 'bool',
        'nonfinancial_entity_filing_date' => '\DateTime',
        'section501_c_organization_certification' => 'bool',
        'determination_letter_date' => '\DateTime',
        'nonprofit_organization_certification' => 'bool',
        'publicly_traded_nffe_certification' => 'bool',
        'publicly_traded_nffe_securities_market' => 'string',
        'nffe_affiliate_of_publicly_traded_entity_certification' => 'bool',
        'publicly_traded_entity' => 'string',
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => 'string',
        'excepted_territory_nffe_certification' => 'bool',
        'active_nffe_certification' => 'bool',
        'passive_nffe_certification' => 'bool',
        'passive_nffe_no_substantial_us_owners_certification' => 'bool',
        'passive_nffe_substantial_us_owners_provided_certification' => 'bool',
        'excepted_inter_affiliate_ffi_certification' => 'bool',
        'sponsored_direct_reporting_nffe_certification' => 'bool',
        'direct_reporting_nffe_sponsoring_entity' => 'string',
        'substantial_us_owners' => '\Avalara\SDK\Model\A1099\V2\SubstantialUsOwnerRequest[]',
        'signer_name' => 'string',
        'capacity_to_sign_certification' => 'bool',
        'company_id' => 'string',
        'reference_id' => 'string',
        'email' => 'string',
        'e_delivery_consented_at' => '\DateTime',
        'signature' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'name' => null,
        'citizenship_country' => null,
        'disregarded_entity' => null,
        'entity_type' => null,
        'making_treaty_claim' => null,
        'fatca_status' => null,
        'residence_address' => null,
        'residence_city' => null,
        'residence_state' => null,
        'residence_zip' => null,
        'residence_country' => null,
        'residence_is_mailing' => null,
        'mailing_address' => null,
        'mailing_city' => null,
        'mailing_state' => null,
        'mailing_zip' => null,
        'mailing_country' => null,
        'tin' => null,
        'giin' => null,
        'foreign_tin_not_required' => null,
        'foreign_tin' => null,
        'reference_number' => null,
        'disregarded_entity_fatca_status' => null,
        'disregarded_address' => null,
        'disregarded_city' => null,
        'disregarded_state' => null,
        'disregarded_zip' => null,
        'disregarded_country' => null,
        'disregarded_entity_giin' => null,
        'treaty_country_certification' => null,
        'treaty_country' => null,
        'benefit_limitation_certification' => null,
        'benefit_limitation' => null,
        'qualified_resident_status_certification' => null,
        'treaty_article' => null,
        'withholding_rate' => null,
        'income_type' => null,
        'treaty_reasons' => null,
        'ffi_sponsoring_entity' => null,
        'investment_entity_certification' => null,
        'controlled_foreign_corporation_certification' => null,
        'compliant_nonregistering_local_bank_certification' => null,
        'compliant_ffi_low_value_accounts_certification' => null,
        'sponsored_closely_held_entity_sponsoring_entity' => null,
        'sponsored_closely_held_investment_vehicle_certification' => null,
        'compliant_limited_life_debt_entity_certification' => null,
        'investment_entity_no_financial_accounts_certification' => null,
        'owner_documented_ffi_certification' => null,
        'owner_documented_ffi_reporting_statement_certification' => null,
        'owner_documented_ffi_auditor_letter_certification' => null,
        'owner_documented_ffi_trust_beneficiaries_certification' => null,
        'restricted_distributor_certification' => null,
        'restricted_distributor_agreement_certification' => null,
        'restricted_distributor_preexisting_sales_compliance_certification' => null,
        'nonreporting_iga_ffi_certification' => null,
        'iga_country' => null,
        'iga_model' => null,
        'iga_legal_status_treatment' => null,
        'iga_ffi_trustee_or_sponsor' => null,
        'iga_ffi_trustee_is_foreign' => null,
        'non_commercial_financial_activity_certification' => null,
        'internation_organization_certification' => null,
        'intergovernmental_organization_certification' => null,
        'treaty_qualified_pension_fund_certification' => null,
        'qualified_retirement_fund_certification' => null,
        'narrow_participation_retirement_fund_certification' => null,
        'section401_a_equivalent_pension_plan_certification' => null,
        'investment_entity_for_retirement_funds_certification' => null,
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => null,
        'exempt_beneficial_owner_owned_investment_entity_certification' => null,
        'territory_financial_institution_certification' => null,
        'excepted_nonfinancial_group_entity_certification' => null,
        'excepted_nonfinancial_start_up_certification' => null,
        'startup_formation_or_resolution_date' => 'date',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => null,
        'nonfinancial_entity_filing_date' => 'date',
        'section501_c_organization_certification' => null,
        'determination_letter_date' => 'date',
        'nonprofit_organization_certification' => null,
        'publicly_traded_nffe_certification' => null,
        'publicly_traded_nffe_securities_market' => null,
        'nffe_affiliate_of_publicly_traded_entity_certification' => null,
        'publicly_traded_entity' => null,
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => null,
        'excepted_territory_nffe_certification' => null,
        'active_nffe_certification' => null,
        'passive_nffe_certification' => null,
        'passive_nffe_no_substantial_us_owners_certification' => null,
        'passive_nffe_substantial_us_owners_provided_certification' => null,
        'excepted_inter_affiliate_ffi_certification' => null,
        'sponsored_direct_reporting_nffe_certification' => null,
        'direct_reporting_nffe_sponsoring_entity' => null,
        'substantial_us_owners' => null,
        'signer_name' => null,
        'capacity_to_sign_certification' => null,
        'company_id' => null,
        'reference_id' => null,
        'email' => null,
        'e_delivery_consented_at' => 'date-time',
        'signature' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'name' => 'name',
        'citizenship_country' => 'citizenshipCountry',
        'disregarded_entity' => 'disregardedEntity',
        'entity_type' => 'entityType',
        'making_treaty_claim' => 'makingTreatyClaim',
        'fatca_status' => 'fatcaStatus',
        'residence_address' => 'residenceAddress',
        'residence_city' => 'residenceCity',
        'residence_state' => 'residenceState',
        'residence_zip' => 'residenceZip',
        'residence_country' => 'residenceCountry',
        'residence_is_mailing' => 'residenceIsMailing',
        'mailing_address' => 'mailingAddress',
        'mailing_city' => 'mailingCity',
        'mailing_state' => 'mailingState',
        'mailing_zip' => 'mailingZip',
        'mailing_country' => 'mailingCountry',
        'tin' => 'tin',
        'giin' => 'giin',
        'foreign_tin_not_required' => 'foreignTinNotRequired',
        'foreign_tin' => 'foreignTin',
        'reference_number' => 'referenceNumber',
        'disregarded_entity_fatca_status' => 'disregardedEntityFatcaStatus',
        'disregarded_address' => 'disregardedAddress',
        'disregarded_city' => 'disregardedCity',
        'disregarded_state' => 'disregardedState',
        'disregarded_zip' => 'disregardedZip',
        'disregarded_country' => 'disregardedCountry',
        'disregarded_entity_giin' => 'disregardedEntityGiin',
        'treaty_country_certification' => 'treatyCountryCertification',
        'treaty_country' => 'treatyCountry',
        'benefit_limitation_certification' => 'benefitLimitationCertification',
        'benefit_limitation' => 'benefitLimitation',
        'qualified_resident_status_certification' => 'qualifiedResidentStatusCertification',
        'treaty_article' => 'treatyArticle',
        'withholding_rate' => 'withholdingRate',
        'income_type' => 'incomeType',
        'treaty_reasons' => 'treatyReasons',
        'ffi_sponsoring_entity' => 'ffiSponsoringEntity',
        'investment_entity_certification' => 'investmentEntityCertification',
        'controlled_foreign_corporation_certification' => 'controlledForeignCorporationCertification',
        'compliant_nonregistering_local_bank_certification' => 'compliantNonregisteringLocalBankCertification',
        'compliant_ffi_low_value_accounts_certification' => 'compliantFfiLowValueAccountsCertification',
        'sponsored_closely_held_entity_sponsoring_entity' => 'sponsoredCloselyHeldEntitySponsoringEntity',
        'sponsored_closely_held_investment_vehicle_certification' => 'sponsoredCloselyHeldInvestmentVehicleCertification',
        'compliant_limited_life_debt_entity_certification' => 'compliantLimitedLifeDebtEntityCertification',
        'investment_entity_no_financial_accounts_certification' => 'investmentEntityNoFinancialAccountsCertification',
        'owner_documented_ffi_certification' => 'ownerDocumentedFfiCertification',
        'owner_documented_ffi_reporting_statement_certification' => 'ownerDocumentedFfiReportingStatementCertification',
        'owner_documented_ffi_auditor_letter_certification' => 'ownerDocumentedFfiAuditorLetterCertification',
        'owner_documented_ffi_trust_beneficiaries_certification' => 'ownerDocumentedFfiTrustBeneficiariesCertification',
        'restricted_distributor_certification' => 'restrictedDistributorCertification',
        'restricted_distributor_agreement_certification' => 'restrictedDistributorAgreementCertification',
        'restricted_distributor_preexisting_sales_compliance_certification' => 'restrictedDistributorPreexistingSalesComplianceCertification',
        'nonreporting_iga_ffi_certification' => 'nonreportingIgaFfiCertification',
        'iga_country' => 'igaCountry',
        'iga_model' => 'igaModel',
        'iga_legal_status_treatment' => 'igaLegalStatusTreatment',
        'iga_ffi_trustee_or_sponsor' => 'igaFfiTrusteeOrSponsor',
        'iga_ffi_trustee_is_foreign' => 'igaFfiTrusteeIsForeign',
        'non_commercial_financial_activity_certification' => 'nonCommercialFinancialActivityCertification',
        'internation_organization_certification' => 'internationOrganizationCertification',
        'intergovernmental_organization_certification' => 'intergovernmentalOrganizationCertification',
        'treaty_qualified_pension_fund_certification' => 'treatyQualifiedPensionFundCertification',
        'qualified_retirement_fund_certification' => 'qualifiedRetirementFundCertification',
        'narrow_participation_retirement_fund_certification' => 'narrowParticipationRetirementFundCertification',
        'section401_a_equivalent_pension_plan_certification' => 'section401AEquivalentPensionPlanCertification',
        'investment_entity_for_retirement_funds_certification' => 'investmentEntityForRetirementFundsCertification',
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => 'exemptBeneficialOwnerSponsoredRetirementFundCertification',
        'exempt_beneficial_owner_owned_investment_entity_certification' => 'exemptBeneficialOwnerOwnedInvestmentEntityCertification',
        'territory_financial_institution_certification' => 'territoryFinancialInstitutionCertification',
        'excepted_nonfinancial_group_entity_certification' => 'exceptedNonfinancialGroupEntityCertification',
        'excepted_nonfinancial_start_up_certification' => 'exceptedNonfinancialStartUpCertification',
        'startup_formation_or_resolution_date' => 'startupFormationOrResolutionDate',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => 'exceptedNonfinancialEntityInLiquidationOrBankruptcyCertification',
        'nonfinancial_entity_filing_date' => 'nonfinancialEntityFilingDate',
        'section501_c_organization_certification' => 'section501COrganizationCertification',
        'determination_letter_date' => 'determinationLetterDate',
        'nonprofit_organization_certification' => 'nonprofitOrganizationCertification',
        'publicly_traded_nffe_certification' => 'publiclyTradedNffeCertification',
        'publicly_traded_nffe_securities_market' => 'publiclyTradedNffeSecuritiesMarket',
        'nffe_affiliate_of_publicly_traded_entity_certification' => 'nffeAffiliateOfPubliclyTradedEntityCertification',
        'publicly_traded_entity' => 'publiclyTradedEntity',
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => 'nffeAffiliateOfPubliclyTradedEntitySecuritiesMarket',
        'excepted_territory_nffe_certification' => 'exceptedTerritoryNffeCertification',
        'active_nffe_certification' => 'activeNffeCertification',
        'passive_nffe_certification' => 'passiveNffeCertification',
        'passive_nffe_no_substantial_us_owners_certification' => 'passiveNffeNoSubstantialUsOwnersCertification',
        'passive_nffe_substantial_us_owners_provided_certification' => 'passiveNffeSubstantialUsOwnersProvidedCertification',
        'excepted_inter_affiliate_ffi_certification' => 'exceptedInterAffiliateFfiCertification',
        'sponsored_direct_reporting_nffe_certification' => 'sponsoredDirectReportingNffeCertification',
        'direct_reporting_nffe_sponsoring_entity' => 'directReportingNffeSponsoringEntity',
        'substantial_us_owners' => 'substantialUsOwners',
        'signer_name' => 'signerName',
        'capacity_to_sign_certification' => 'capacityToSignCertification',
        'company_id' => 'companyId',
        'reference_id' => 'referenceId',
        'email' => 'email',
        'e_delivery_consented_at' => 'eDeliveryConsentedAt',
        'signature' => 'signature'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'name' => 'setName',
        'citizenship_country' => 'setCitizenshipCountry',
        'disregarded_entity' => 'setDisregardedEntity',
        'entity_type' => 'setEntityType',
        'making_treaty_claim' => 'setMakingTreatyClaim',
        'fatca_status' => 'setFatcaStatus',
        'residence_address' => 'setResidenceAddress',
        'residence_city' => 'setResidenceCity',
        'residence_state' => 'setResidenceState',
        'residence_zip' => 'setResidenceZip',
        'residence_country' => 'setResidenceCountry',
        'residence_is_mailing' => 'setResidenceIsMailing',
        'mailing_address' => 'setMailingAddress',
        'mailing_city' => 'setMailingCity',
        'mailing_state' => 'setMailingState',
        'mailing_zip' => 'setMailingZip',
        'mailing_country' => 'setMailingCountry',
        'tin' => 'setTin',
        'giin' => 'setGiin',
        'foreign_tin_not_required' => 'setForeignTinNotRequired',
        'foreign_tin' => 'setForeignTin',
        'reference_number' => 'setReferenceNumber',
        'disregarded_entity_fatca_status' => 'setDisregardedEntityFatcaStatus',
        'disregarded_address' => 'setDisregardedAddress',
        'disregarded_city' => 'setDisregardedCity',
        'disregarded_state' => 'setDisregardedState',
        'disregarded_zip' => 'setDisregardedZip',
        'disregarded_country' => 'setDisregardedCountry',
        'disregarded_entity_giin' => 'setDisregardedEntityGiin',
        'treaty_country_certification' => 'setTreatyCountryCertification',
        'treaty_country' => 'setTreatyCountry',
        'benefit_limitation_certification' => 'setBenefitLimitationCertification',
        'benefit_limitation' => 'setBenefitLimitation',
        'qualified_resident_status_certification' => 'setQualifiedResidentStatusCertification',
        'treaty_article' => 'setTreatyArticle',
        'withholding_rate' => 'setWithholdingRate',
        'income_type' => 'setIncomeType',
        'treaty_reasons' => 'setTreatyReasons',
        'ffi_sponsoring_entity' => 'setFfiSponsoringEntity',
        'investment_entity_certification' => 'setInvestmentEntityCertification',
        'controlled_foreign_corporation_certification' => 'setControlledForeignCorporationCertification',
        'compliant_nonregistering_local_bank_certification' => 'setCompliantNonregisteringLocalBankCertification',
        'compliant_ffi_low_value_accounts_certification' => 'setCompliantFfiLowValueAccountsCertification',
        'sponsored_closely_held_entity_sponsoring_entity' => 'setSponsoredCloselyHeldEntitySponsoringEntity',
        'sponsored_closely_held_investment_vehicle_certification' => 'setSponsoredCloselyHeldInvestmentVehicleCertification',
        'compliant_limited_life_debt_entity_certification' => 'setCompliantLimitedLifeDebtEntityCertification',
        'investment_entity_no_financial_accounts_certification' => 'setInvestmentEntityNoFinancialAccountsCertification',
        'owner_documented_ffi_certification' => 'setOwnerDocumentedFfiCertification',
        'owner_documented_ffi_reporting_statement_certification' => 'setOwnerDocumentedFfiReportingStatementCertification',
        'owner_documented_ffi_auditor_letter_certification' => 'setOwnerDocumentedFfiAuditorLetterCertification',
        'owner_documented_ffi_trust_beneficiaries_certification' => 'setOwnerDocumentedFfiTrustBeneficiariesCertification',
        'restricted_distributor_certification' => 'setRestrictedDistributorCertification',
        'restricted_distributor_agreement_certification' => 'setRestrictedDistributorAgreementCertification',
        'restricted_distributor_preexisting_sales_compliance_certification' => 'setRestrictedDistributorPreexistingSalesComplianceCertification',
        'nonreporting_iga_ffi_certification' => 'setNonreportingIgaFfiCertification',
        'iga_country' => 'setIgaCountry',
        'iga_model' => 'setIgaModel',
        'iga_legal_status_treatment' => 'setIgaLegalStatusTreatment',
        'iga_ffi_trustee_or_sponsor' => 'setIgaFfiTrusteeOrSponsor',
        'iga_ffi_trustee_is_foreign' => 'setIgaFfiTrusteeIsForeign',
        'non_commercial_financial_activity_certification' => 'setNonCommercialFinancialActivityCertification',
        'internation_organization_certification' => 'setInternationOrganizationCertification',
        'intergovernmental_organization_certification' => 'setIntergovernmentalOrganizationCertification',
        'treaty_qualified_pension_fund_certification' => 'setTreatyQualifiedPensionFundCertification',
        'qualified_retirement_fund_certification' => 'setQualifiedRetirementFundCertification',
        'narrow_participation_retirement_fund_certification' => 'setNarrowParticipationRetirementFundCertification',
        'section401_a_equivalent_pension_plan_certification' => 'setSection401AEquivalentPensionPlanCertification',
        'investment_entity_for_retirement_funds_certification' => 'setInvestmentEntityForRetirementFundsCertification',
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => 'setExemptBeneficialOwnerSponsoredRetirementFundCertification',
        'exempt_beneficial_owner_owned_investment_entity_certification' => 'setExemptBeneficialOwnerOwnedInvestmentEntityCertification',
        'territory_financial_institution_certification' => 'setTerritoryFinancialInstitutionCertification',
        'excepted_nonfinancial_group_entity_certification' => 'setExceptedNonfinancialGroupEntityCertification',
        'excepted_nonfinancial_start_up_certification' => 'setExceptedNonfinancialStartUpCertification',
        'startup_formation_or_resolution_date' => 'setStartupFormationOrResolutionDate',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => 'setExceptedNonfinancialEntityInLiquidationOrBankruptcyCertification',
        'nonfinancial_entity_filing_date' => 'setNonfinancialEntityFilingDate',
        'section501_c_organization_certification' => 'setSection501COrganizationCertification',
        'determination_letter_date' => 'setDeterminationLetterDate',
        'nonprofit_organization_certification' => 'setNonprofitOrganizationCertification',
        'publicly_traded_nffe_certification' => 'setPubliclyTradedNffeCertification',
        'publicly_traded_nffe_securities_market' => 'setPubliclyTradedNffeSecuritiesMarket',
        'nffe_affiliate_of_publicly_traded_entity_certification' => 'setNffeAffiliateOfPubliclyTradedEntityCertification',
        'publicly_traded_entity' => 'setPubliclyTradedEntity',
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => 'setNffeAffiliateOfPubliclyTradedEntitySecuritiesMarket',
        'excepted_territory_nffe_certification' => 'setExceptedTerritoryNffeCertification',
        'active_nffe_certification' => 'setActiveNffeCertification',
        'passive_nffe_certification' => 'setPassiveNffeCertification',
        'passive_nffe_no_substantial_us_owners_certification' => 'setPassiveNffeNoSubstantialUsOwnersCertification',
        'passive_nffe_substantial_us_owners_provided_certification' => 'setPassiveNffeSubstantialUsOwnersProvidedCertification',
        'excepted_inter_affiliate_ffi_certification' => 'setExceptedInterAffiliateFfiCertification',
        'sponsored_direct_reporting_nffe_certification' => 'setSponsoredDirectReportingNffeCertification',
        'direct_reporting_nffe_sponsoring_entity' => 'setDirectReportingNffeSponsoringEntity',
        'substantial_us_owners' => 'setSubstantialUsOwners',
        'signer_name' => 'setSignerName',
        'capacity_to_sign_certification' => 'setCapacityToSignCertification',
        'company_id' => 'setCompanyId',
        'reference_id' => 'setReferenceId',
        'email' => 'setEmail',
        'e_delivery_consented_at' => 'setEDeliveryConsentedAt',
        'signature' => 'setSignature'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'name' => 'getName',
        'citizenship_country' => 'getCitizenshipCountry',
        'disregarded_entity' => 'getDisregardedEntity',
        'entity_type' => 'getEntityType',
        'making_treaty_claim' => 'getMakingTreatyClaim',
        'fatca_status' => 'getFatcaStatus',
        'residence_address' => 'getResidenceAddress',
        'residence_city' => 'getResidenceCity',
        'residence_state' => 'getResidenceState',
        'residence_zip' => 'getResidenceZip',
        'residence_country' => 'getResidenceCountry',
        'residence_is_mailing' => 'getResidenceIsMailing',
        'mailing_address' => 'getMailingAddress',
        'mailing_city' => 'getMailingCity',
        'mailing_state' => 'getMailingState',
        'mailing_zip' => 'getMailingZip',
        'mailing_country' => 'getMailingCountry',
        'tin' => 'getTin',
        'giin' => 'getGiin',
        'foreign_tin_not_required' => 'getForeignTinNotRequired',
        'foreign_tin' => 'getForeignTin',
        'reference_number' => 'getReferenceNumber',
        'disregarded_entity_fatca_status' => 'getDisregardedEntityFatcaStatus',
        'disregarded_address' => 'getDisregardedAddress',
        'disregarded_city' => 'getDisregardedCity',
        'disregarded_state' => 'getDisregardedState',
        'disregarded_zip' => 'getDisregardedZip',
        'disregarded_country' => 'getDisregardedCountry',
        'disregarded_entity_giin' => 'getDisregardedEntityGiin',
        'treaty_country_certification' => 'getTreatyCountryCertification',
        'treaty_country' => 'getTreatyCountry',
        'benefit_limitation_certification' => 'getBenefitLimitationCertification',
        'benefit_limitation' => 'getBenefitLimitation',
        'qualified_resident_status_certification' => 'getQualifiedResidentStatusCertification',
        'treaty_article' => 'getTreatyArticle',
        'withholding_rate' => 'getWithholdingRate',
        'income_type' => 'getIncomeType',
        'treaty_reasons' => 'getTreatyReasons',
        'ffi_sponsoring_entity' => 'getFfiSponsoringEntity',
        'investment_entity_certification' => 'getInvestmentEntityCertification',
        'controlled_foreign_corporation_certification' => 'getControlledForeignCorporationCertification',
        'compliant_nonregistering_local_bank_certification' => 'getCompliantNonregisteringLocalBankCertification',
        'compliant_ffi_low_value_accounts_certification' => 'getCompliantFfiLowValueAccountsCertification',
        'sponsored_closely_held_entity_sponsoring_entity' => 'getSponsoredCloselyHeldEntitySponsoringEntity',
        'sponsored_closely_held_investment_vehicle_certification' => 'getSponsoredCloselyHeldInvestmentVehicleCertification',
        'compliant_limited_life_debt_entity_certification' => 'getCompliantLimitedLifeDebtEntityCertification',
        'investment_entity_no_financial_accounts_certification' => 'getInvestmentEntityNoFinancialAccountsCertification',
        'owner_documented_ffi_certification' => 'getOwnerDocumentedFfiCertification',
        'owner_documented_ffi_reporting_statement_certification' => 'getOwnerDocumentedFfiReportingStatementCertification',
        'owner_documented_ffi_auditor_letter_certification' => 'getOwnerDocumentedFfiAuditorLetterCertification',
        'owner_documented_ffi_trust_beneficiaries_certification' => 'getOwnerDocumentedFfiTrustBeneficiariesCertification',
        'restricted_distributor_certification' => 'getRestrictedDistributorCertification',
        'restricted_distributor_agreement_certification' => 'getRestrictedDistributorAgreementCertification',
        'restricted_distributor_preexisting_sales_compliance_certification' => 'getRestrictedDistributorPreexistingSalesComplianceCertification',
        'nonreporting_iga_ffi_certification' => 'getNonreportingIgaFfiCertification',
        'iga_country' => 'getIgaCountry',
        'iga_model' => 'getIgaModel',
        'iga_legal_status_treatment' => 'getIgaLegalStatusTreatment',
        'iga_ffi_trustee_or_sponsor' => 'getIgaFfiTrusteeOrSponsor',
        'iga_ffi_trustee_is_foreign' => 'getIgaFfiTrusteeIsForeign',
        'non_commercial_financial_activity_certification' => 'getNonCommercialFinancialActivityCertification',
        'internation_organization_certification' => 'getInternationOrganizationCertification',
        'intergovernmental_organization_certification' => 'getIntergovernmentalOrganizationCertification',
        'treaty_qualified_pension_fund_certification' => 'getTreatyQualifiedPensionFundCertification',
        'qualified_retirement_fund_certification' => 'getQualifiedRetirementFundCertification',
        'narrow_participation_retirement_fund_certification' => 'getNarrowParticipationRetirementFundCertification',
        'section401_a_equivalent_pension_plan_certification' => 'getSection401AEquivalentPensionPlanCertification',
        'investment_entity_for_retirement_funds_certification' => 'getInvestmentEntityForRetirementFundsCertification',
        'exempt_beneficial_owner_sponsored_retirement_fund_certification' => 'getExemptBeneficialOwnerSponsoredRetirementFundCertification',
        'exempt_beneficial_owner_owned_investment_entity_certification' => 'getExemptBeneficialOwnerOwnedInvestmentEntityCertification',
        'territory_financial_institution_certification' => 'getTerritoryFinancialInstitutionCertification',
        'excepted_nonfinancial_group_entity_certification' => 'getExceptedNonfinancialGroupEntityCertification',
        'excepted_nonfinancial_start_up_certification' => 'getExceptedNonfinancialStartUpCertification',
        'startup_formation_or_resolution_date' => 'getStartupFormationOrResolutionDate',
        'excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification' => 'getExceptedNonfinancialEntityInLiquidationOrBankruptcyCertification',
        'nonfinancial_entity_filing_date' => 'getNonfinancialEntityFilingDate',
        'section501_c_organization_certification' => 'getSection501COrganizationCertification',
        'determination_letter_date' => 'getDeterminationLetterDate',
        'nonprofit_organization_certification' => 'getNonprofitOrganizationCertification',
        'publicly_traded_nffe_certification' => 'getPubliclyTradedNffeCertification',
        'publicly_traded_nffe_securities_market' => 'getPubliclyTradedNffeSecuritiesMarket',
        'nffe_affiliate_of_publicly_traded_entity_certification' => 'getNffeAffiliateOfPubliclyTradedEntityCertification',
        'publicly_traded_entity' => 'getPubliclyTradedEntity',
        'nffe_affiliate_of_publicly_traded_entity_securities_market' => 'getNffeAffiliateOfPubliclyTradedEntitySecuritiesMarket',
        'excepted_territory_nffe_certification' => 'getExceptedTerritoryNffeCertification',
        'active_nffe_certification' => 'getActiveNffeCertification',
        'passive_nffe_certification' => 'getPassiveNffeCertification',
        'passive_nffe_no_substantial_us_owners_certification' => 'getPassiveNffeNoSubstantialUsOwnersCertification',
        'passive_nffe_substantial_us_owners_provided_certification' => 'getPassiveNffeSubstantialUsOwnersProvidedCertification',
        'excepted_inter_affiliate_ffi_certification' => 'getExceptedInterAffiliateFfiCertification',
        'sponsored_direct_reporting_nffe_certification' => 'getSponsoredDirectReportingNffeCertification',
        'direct_reporting_nffe_sponsoring_entity' => 'getDirectReportingNffeSponsoringEntity',
        'substantial_us_owners' => 'getSubstantialUsOwners',
        'signer_name' => 'getSignerName',
        'capacity_to_sign_certification' => 'getCapacityToSignCertification',
        'company_id' => 'getCompanyId',
        'reference_id' => 'getReferenceId',
        'email' => 'getEmail',
        'e_delivery_consented_at' => 'getEDeliveryConsentedAt',
        'signature' => 'getSignature'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_W4 = 'W4';
    const TYPE_W8_BEN = 'W8Ben';
    const TYPE_W8_BEN_E = 'W8BenE';
    const TYPE_W8_IMY = 'W8Imy';
    const TYPE_W9 = 'W9';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_W4,
            self::TYPE_W8_BEN,
            self::TYPE_W8_BEN_E,
            self::TYPE_W8_IMY,
            self::TYPE_W9,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['citizenship_country'] = $data['citizenship_country'] ?? null;
        $this->container['disregarded_entity'] = $data['disregarded_entity'] ?? null;
        $this->container['entity_type'] = $data['entity_type'] ?? null;
        $this->container['making_treaty_claim'] = $data['making_treaty_claim'] ?? null;
        $this->container['fatca_status'] = $data['fatca_status'] ?? null;
        $this->container['residence_address'] = $data['residence_address'] ?? null;
        $this->container['residence_city'] = $data['residence_city'] ?? null;
        $this->container['residence_state'] = $data['residence_state'] ?? null;
        $this->container['residence_zip'] = $data['residence_zip'] ?? null;
        $this->container['residence_country'] = $data['residence_country'] ?? null;
        $this->container['residence_is_mailing'] = $data['residence_is_mailing'] ?? null;
        $this->container['mailing_address'] = $data['mailing_address'] ?? null;
        $this->container['mailing_city'] = $data['mailing_city'] ?? null;
        $this->container['mailing_state'] = $data['mailing_state'] ?? null;
        $this->container['mailing_zip'] = $data['mailing_zip'] ?? null;
        $this->container['mailing_country'] = $data['mailing_country'] ?? null;
        $this->container['tin'] = $data['tin'] ?? null;
        $this->container['giin'] = $data['giin'] ?? null;
        $this->container['foreign_tin_not_required'] = $data['foreign_tin_not_required'] ?? null;
        $this->container['foreign_tin'] = $data['foreign_tin'] ?? null;
        $this->container['reference_number'] = $data['reference_number'] ?? null;
        $this->container['disregarded_entity_fatca_status'] = $data['disregarded_entity_fatca_status'] ?? null;
        $this->container['disregarded_address'] = $data['disregarded_address'] ?? null;
        $this->container['disregarded_city'] = $data['disregarded_city'] ?? null;
        $this->container['disregarded_state'] = $data['disregarded_state'] ?? null;
        $this->container['disregarded_zip'] = $data['disregarded_zip'] ?? null;
        $this->container['disregarded_country'] = $data['disregarded_country'] ?? null;
        $this->container['disregarded_entity_giin'] = $data['disregarded_entity_giin'] ?? null;
        $this->container['treaty_country_certification'] = $data['treaty_country_certification'] ?? null;
        $this->container['treaty_country'] = $data['treaty_country'] ?? null;
        $this->container['benefit_limitation_certification'] = $data['benefit_limitation_certification'] ?? null;
        $this->container['benefit_limitation'] = $data['benefit_limitation'] ?? null;
        $this->container['qualified_resident_status_certification'] = $data['qualified_resident_status_certification'] ?? null;
        $this->container['treaty_article'] = $data['treaty_article'] ?? null;
        $this->container['withholding_rate'] = $data['withholding_rate'] ?? null;
        $this->container['income_type'] = $data['income_type'] ?? null;
        $this->container['treaty_reasons'] = $data['treaty_reasons'] ?? null;
        $this->container['ffi_sponsoring_entity'] = $data['ffi_sponsoring_entity'] ?? null;
        $this->container['investment_entity_certification'] = $data['investment_entity_certification'] ?? null;
        $this->container['controlled_foreign_corporation_certification'] = $data['controlled_foreign_corporation_certification'] ?? null;
        $this->container['compliant_nonregistering_local_bank_certification'] = $data['compliant_nonregistering_local_bank_certification'] ?? null;
        $this->container['compliant_ffi_low_value_accounts_certification'] = $data['compliant_ffi_low_value_accounts_certification'] ?? null;
        $this->container['sponsored_closely_held_entity_sponsoring_entity'] = $data['sponsored_closely_held_entity_sponsoring_entity'] ?? null;
        $this->container['sponsored_closely_held_investment_vehicle_certification'] = $data['sponsored_closely_held_investment_vehicle_certification'] ?? null;
        $this->container['compliant_limited_life_debt_entity_certification'] = $data['compliant_limited_life_debt_entity_certification'] ?? null;
        $this->container['investment_entity_no_financial_accounts_certification'] = $data['investment_entity_no_financial_accounts_certification'] ?? null;
        $this->container['owner_documented_ffi_certification'] = $data['owner_documented_ffi_certification'] ?? null;
        $this->container['owner_documented_ffi_reporting_statement_certification'] = $data['owner_documented_ffi_reporting_statement_certification'] ?? null;
        $this->container['owner_documented_ffi_auditor_letter_certification'] = $data['owner_documented_ffi_auditor_letter_certification'] ?? null;
        $this->container['owner_documented_ffi_trust_beneficiaries_certification'] = $data['owner_documented_ffi_trust_beneficiaries_certification'] ?? null;
        $this->container['restricted_distributor_certification'] = $data['restricted_distributor_certification'] ?? null;
        $this->container['restricted_distributor_agreement_certification'] = $data['restricted_distributor_agreement_certification'] ?? null;
        $this->container['restricted_distributor_preexisting_sales_compliance_certification'] = $data['restricted_distributor_preexisting_sales_compliance_certification'] ?? null;
        $this->container['nonreporting_iga_ffi_certification'] = $data['nonreporting_iga_ffi_certification'] ?? null;
        $this->container['iga_country'] = $data['iga_country'] ?? null;
        $this->container['iga_model'] = $data['iga_model'] ?? null;
        $this->container['iga_legal_status_treatment'] = $data['iga_legal_status_treatment'] ?? null;
        $this->container['iga_ffi_trustee_or_sponsor'] = $data['iga_ffi_trustee_or_sponsor'] ?? null;
        $this->container['iga_ffi_trustee_is_foreign'] = $data['iga_ffi_trustee_is_foreign'] ?? null;
        $this->container['non_commercial_financial_activity_certification'] = $data['non_commercial_financial_activity_certification'] ?? null;
        $this->container['internation_organization_certification'] = $data['internation_organization_certification'] ?? null;
        $this->container['intergovernmental_organization_certification'] = $data['intergovernmental_organization_certification'] ?? null;
        $this->container['treaty_qualified_pension_fund_certification'] = $data['treaty_qualified_pension_fund_certification'] ?? null;
        $this->container['qualified_retirement_fund_certification'] = $data['qualified_retirement_fund_certification'] ?? null;
        $this->container['narrow_participation_retirement_fund_certification'] = $data['narrow_participation_retirement_fund_certification'] ?? null;
        $this->container['section401_a_equivalent_pension_plan_certification'] = $data['section401_a_equivalent_pension_plan_certification'] ?? null;
        $this->container['investment_entity_for_retirement_funds_certification'] = $data['investment_entity_for_retirement_funds_certification'] ?? null;
        $this->container['exempt_beneficial_owner_sponsored_retirement_fund_certification'] = $data['exempt_beneficial_owner_sponsored_retirement_fund_certification'] ?? null;
        $this->container['exempt_beneficial_owner_owned_investment_entity_certification'] = $data['exempt_beneficial_owner_owned_investment_entity_certification'] ?? null;
        $this->container['territory_financial_institution_certification'] = $data['territory_financial_institution_certification'] ?? null;
        $this->container['excepted_nonfinancial_group_entity_certification'] = $data['excepted_nonfinancial_group_entity_certification'] ?? null;
        $this->container['excepted_nonfinancial_start_up_certification'] = $data['excepted_nonfinancial_start_up_certification'] ?? null;
        $this->container['startup_formation_or_resolution_date'] = $data['startup_formation_or_resolution_date'] ?? null;
        $this->container['excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification'] = $data['excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification'] ?? null;
        $this->container['nonfinancial_entity_filing_date'] = $data['nonfinancial_entity_filing_date'] ?? null;
        $this->container['section501_c_organization_certification'] = $data['section501_c_organization_certification'] ?? null;
        $this->container['determination_letter_date'] = $data['determination_letter_date'] ?? null;
        $this->container['nonprofit_organization_certification'] = $data['nonprofit_organization_certification'] ?? null;
        $this->container['publicly_traded_nffe_certification'] = $data['publicly_traded_nffe_certification'] ?? null;
        $this->container['publicly_traded_nffe_securities_market'] = $data['publicly_traded_nffe_securities_market'] ?? null;
        $this->container['nffe_affiliate_of_publicly_traded_entity_certification'] = $data['nffe_affiliate_of_publicly_traded_entity_certification'] ?? null;
        $this->container['publicly_traded_entity'] = $data['publicly_traded_entity'] ?? null;
        $this->container['nffe_affiliate_of_publicly_traded_entity_securities_market'] = $data['nffe_affiliate_of_publicly_traded_entity_securities_market'] ?? null;
        $this->container['excepted_territory_nffe_certification'] = $data['excepted_territory_nffe_certification'] ?? null;
        $this->container['active_nffe_certification'] = $data['active_nffe_certification'] ?? null;
        $this->container['passive_nffe_certification'] = $data['passive_nffe_certification'] ?? null;
        $this->container['passive_nffe_no_substantial_us_owners_certification'] = $data['passive_nffe_no_substantial_us_owners_certification'] ?? null;
        $this->container['passive_nffe_substantial_us_owners_provided_certification'] = $data['passive_nffe_substantial_us_owners_provided_certification'] ?? null;
        $this->container['excepted_inter_affiliate_ffi_certification'] = $data['excepted_inter_affiliate_ffi_certification'] ?? null;
        $this->container['sponsored_direct_reporting_nffe_certification'] = $data['sponsored_direct_reporting_nffe_certification'] ?? null;
        $this->container['direct_reporting_nffe_sponsoring_entity'] = $data['direct_reporting_nffe_sponsoring_entity'] ?? null;
        $this->container['substantial_us_owners'] = $data['substantial_us_owners'] ?? null;
        $this->container['signer_name'] = $data['signer_name'] ?? null;
        $this->container['capacity_to_sign_certification'] = $data['capacity_to_sign_certification'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['e_delivery_consented_at'] = $data['e_delivery_consented_at'] ?? null;
        $this->container['signature'] = $data['signature'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The form type (always \"w8bene\" for this model).
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the individual or entity associated with the form.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets citizenship_country
     *
     * @return string|null
     */
    public function getCitizenshipCountry()
    {
        return $this->container['citizenship_country'];
    }

    /**
     * Sets citizenship_country
     *
     * @param string|null $citizenship_country The country of citizenship.
     *
     * @return self
     */
    public function setCitizenshipCountry($citizenship_country)
    {
        $this->container['citizenship_country'] = $citizenship_country;

        return $this;
    }

    /**
     * Gets disregarded_entity
     *
     * @return string|null
     */
    public function getDisregardedEntity()
    {
        return $this->container['disregarded_entity'];
    }

    /**
     * Sets disregarded_entity
     *
     * @param string|null $disregarded_entity The name of the disregarded entity receiving the payment (if applicable).
     *
     * @return self
     */
    public function setDisregardedEntity($disregarded_entity)
    {
        $this->container['disregarded_entity'] = $disregarded_entity;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string|null
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string|null $entity_type The entity type.
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets making_treaty_claim
     *
     * @return bool|null
     */
    public function getMakingTreatyClaim()
    {
        return $this->container['making_treaty_claim'];
    }

    /**
     * Sets making_treaty_claim
     *
     * @param bool|null $making_treaty_claim Indicates whether the entity is making a treaty claim.
     *
     * @return self
     */
    public function setMakingTreatyClaim($making_treaty_claim)
    {
        $this->container['making_treaty_claim'] = $making_treaty_claim;

        return $this;
    }

    /**
     * Gets fatca_status
     *
     * @return string|null
     */
    public function getFatcaStatus()
    {
        return $this->container['fatca_status'];
    }

    /**
     * Sets fatca_status
     *
     * @param string|null $fatca_status The FATCA status.
     *
     * @return self
     */
    public function setFatcaStatus($fatca_status)
    {
        $this->container['fatca_status'] = $fatca_status;

        return $this;
    }

    /**
     * Gets residence_address
     *
     * @return string|null
     */
    public function getResidenceAddress()
    {
        return $this->container['residence_address'];
    }

    /**
     * Sets residence_address
     *
     * @param string|null $residence_address The residential address of the individual or entity.
     *
     * @return self
     */
    public function setResidenceAddress($residence_address)
    {
        $this->container['residence_address'] = $residence_address;

        return $this;
    }

    /**
     * Gets residence_city
     *
     * @return string|null
     */
    public function getResidenceCity()
    {
        return $this->container['residence_city'];
    }

    /**
     * Sets residence_city
     *
     * @param string|null $residence_city The city of residence.
     *
     * @return self
     */
    public function setResidenceCity($residence_city)
    {
        $this->container['residence_city'] = $residence_city;

        return $this;
    }

    /**
     * Gets residence_state
     *
     * @return string|null
     */
    public function getResidenceState()
    {
        return $this->container['residence_state'];
    }

    /**
     * Sets residence_state
     *
     * @param string|null $residence_state The state of residence.
     *
     * @return self
     */
    public function setResidenceState($residence_state)
    {
        $this->container['residence_state'] = $residence_state;

        return $this;
    }

    /**
     * Gets residence_zip
     *
     * @return string|null
     */
    public function getResidenceZip()
    {
        return $this->container['residence_zip'];
    }

    /**
     * Sets residence_zip
     *
     * @param string|null $residence_zip The ZIP code of the residence.
     *
     * @return self
     */
    public function setResidenceZip($residence_zip)
    {
        $this->container['residence_zip'] = $residence_zip;

        return $this;
    }

    /**
     * Gets residence_country
     *
     * @return string|null
     */
    public function getResidenceCountry()
    {
        return $this->container['residence_country'];
    }

    /**
     * Sets residence_country
     *
     * @param string|null $residence_country The country of residence.
     *
     * @return self
     */
    public function setResidenceCountry($residence_country)
    {
        $this->container['residence_country'] = $residence_country;

        return $this;
    }

    /**
     * Gets residence_is_mailing
     *
     * @return bool|null
     */
    public function getResidenceIsMailing()
    {
        return $this->container['residence_is_mailing'];
    }

    /**
     * Sets residence_is_mailing
     *
     * @param bool|null $residence_is_mailing Indicates whether the residence address is also the mailing address.
     *
     * @return self
     */
    public function setResidenceIsMailing($residence_is_mailing)
    {
        $this->container['residence_is_mailing'] = $residence_is_mailing;

        return $this;
    }

    /**
     * Gets mailing_address
     *
     * @return string|null
     */
    public function getMailingAddress()
    {
        return $this->container['mailing_address'];
    }

    /**
     * Sets mailing_address
     *
     * @param string|null $mailing_address The mailing address.
     *
     * @return self
     */
    public function setMailingAddress($mailing_address)
    {
        $this->container['mailing_address'] = $mailing_address;

        return $this;
    }

    /**
     * Gets mailing_city
     *
     * @return string|null
     */
    public function getMailingCity()
    {
        return $this->container['mailing_city'];
    }

    /**
     * Sets mailing_city
     *
     * @param string|null $mailing_city The city of the mailing address.
     *
     * @return self
     */
    public function setMailingCity($mailing_city)
    {
        $this->container['mailing_city'] = $mailing_city;

        return $this;
    }

    /**
     * Gets mailing_state
     *
     * @return string|null
     */
    public function getMailingState()
    {
        return $this->container['mailing_state'];
    }

    /**
     * Sets mailing_state
     *
     * @param string|null $mailing_state The state of the mailing address.
     *
     * @return self
     */
    public function setMailingState($mailing_state)
    {
        $this->container['mailing_state'] = $mailing_state;

        return $this;
    }

    /**
     * Gets mailing_zip
     *
     * @return string|null
     */
    public function getMailingZip()
    {
        return $this->container['mailing_zip'];
    }

    /**
     * Sets mailing_zip
     *
     * @param string|null $mailing_zip The ZIP code of the mailing address.
     *
     * @return self
     */
    public function setMailingZip($mailing_zip)
    {
        $this->container['mailing_zip'] = $mailing_zip;

        return $this;
    }

    /**
     * Gets mailing_country
     *
     * @return string|null
     */
    public function getMailingCountry()
    {
        return $this->container['mailing_country'];
    }

    /**
     * Sets mailing_country
     *
     * @param string|null $mailing_country The country of the mailing address.
     *
     * @return self
     */
    public function setMailingCountry($mailing_country)
    {
        $this->container['mailing_country'] = $mailing_country;

        return $this;
    }

    /**
     * Gets tin
     *
     * @return string|null
     */
    public function getTin()
    {
        return $this->container['tin'];
    }

    /**
     * Sets tin
     *
     * @param string|null $tin The taxpayer identification number (TIN).
     *
     * @return self
     */
    public function setTin($tin)
    {
        $this->container['tin'] = $tin;

        return $this;
    }

    /**
     * Gets giin
     *
     * @return string|null
     */
    public function getGiin()
    {
        return $this->container['giin'];
    }

    /**
     * Sets giin
     *
     * @param string|null $giin The global intermediary identification number (GIIN).
     *
     * @return self
     */
    public function setGiin($giin)
    {
        $this->container['giin'] = $giin;

        return $this;
    }

    /**
     * Gets foreign_tin_not_required
     *
     * @return bool|null
     */
    public function getForeignTinNotRequired()
    {
        return $this->container['foreign_tin_not_required'];
    }

    /**
     * Sets foreign_tin_not_required
     *
     * @param bool|null $foreign_tin_not_required Indicates whether a foreign TIN is not required.
     *
     * @return self
     */
    public function setForeignTinNotRequired($foreign_tin_not_required)
    {
        $this->container['foreign_tin_not_required'] = $foreign_tin_not_required;

        return $this;
    }

    /**
     * Gets foreign_tin
     *
     * @return string|null
     */
    public function getForeignTin()
    {
        return $this->container['foreign_tin'];
    }

    /**
     * Sets foreign_tin
     *
     * @param string|null $foreign_tin The foreign taxpayer identification number (TIN).
     *
     * @return self
     */
    public function setForeignTin($foreign_tin)
    {
        $this->container['foreign_tin'] = $foreign_tin;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number A reference number for the form.
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets disregarded_entity_fatca_status
     *
     * @return string|null
     */
    public function getDisregardedEntityFatcaStatus()
    {
        return $this->container['disregarded_entity_fatca_status'];
    }

    /**
     * Sets disregarded_entity_fatca_status
     *
     * @param string|null $disregarded_entity_fatca_status The FATCA status of disregarded entity or branch receiving payment.
     *
     * @return self
     */
    public function setDisregardedEntityFatcaStatus($disregarded_entity_fatca_status)
    {
        $this->container['disregarded_entity_fatca_status'] = $disregarded_entity_fatca_status;

        return $this;
    }

    /**
     * Gets disregarded_address
     *
     * @return string|null
     */
    public function getDisregardedAddress()
    {
        return $this->container['disregarded_address'];
    }

    /**
     * Sets disregarded_address
     *
     * @param string|null $disregarded_address The address for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedAddress($disregarded_address)
    {
        $this->container['disregarded_address'] = $disregarded_address;

        return $this;
    }

    /**
     * Gets disregarded_city
     *
     * @return string|null
     */
    public function getDisregardedCity()
    {
        return $this->container['disregarded_city'];
    }

    /**
     * Sets disregarded_city
     *
     * @param string|null $disregarded_city The city for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedCity($disregarded_city)
    {
        $this->container['disregarded_city'] = $disregarded_city;

        return $this;
    }

    /**
     * Gets disregarded_state
     *
     * @return string|null
     */
    public function getDisregardedState()
    {
        return $this->container['disregarded_state'];
    }

    /**
     * Sets disregarded_state
     *
     * @param string|null $disregarded_state The state for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedState($disregarded_state)
    {
        $this->container['disregarded_state'] = $disregarded_state;

        return $this;
    }

    /**
     * Gets disregarded_zip
     *
     * @return string|null
     */
    public function getDisregardedZip()
    {
        return $this->container['disregarded_zip'];
    }

    /**
     * Sets disregarded_zip
     *
     * @param string|null $disregarded_zip The ZIP code for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedZip($disregarded_zip)
    {
        $this->container['disregarded_zip'] = $disregarded_zip;

        return $this;
    }

    /**
     * Gets disregarded_country
     *
     * @return string|null
     */
    public function getDisregardedCountry()
    {
        return $this->container['disregarded_country'];
    }

    /**
     * Sets disregarded_country
     *
     * @param string|null $disregarded_country The country for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedCountry($disregarded_country)
    {
        $this->container['disregarded_country'] = $disregarded_country;

        return $this;
    }

    /**
     * Gets disregarded_entity_giin
     *
     * @return string|null
     */
    public function getDisregardedEntityGiin()
    {
        return $this->container['disregarded_entity_giin'];
    }

    /**
     * Sets disregarded_entity_giin
     *
     * @param string|null $disregarded_entity_giin The GIIN for disregarded entities.
     *
     * @return self
     */
    public function setDisregardedEntityGiin($disregarded_entity_giin)
    {
        $this->container['disregarded_entity_giin'] = $disregarded_entity_giin;

        return $this;
    }

    /**
     * Gets treaty_country_certification
     *
     * @return bool|null
     */
    public function getTreatyCountryCertification()
    {
        return $this->container['treaty_country_certification'];
    }

    /**
     * Sets treaty_country_certification
     *
     * @param bool|null $treaty_country_certification Certifies the beneficial owner's country under the U.S. tax treaty.
     *
     * @return self
     */
    public function setTreatyCountryCertification($treaty_country_certification)
    {
        $this->container['treaty_country_certification'] = $treaty_country_certification;

        return $this;
    }

    /**
     * Gets treaty_country
     *
     * @return string|null
     */
    public function getTreatyCountry()
    {
        return $this->container['treaty_country'];
    }

    /**
     * Sets treaty_country
     *
     * @param string|null $treaty_country The treaty country of the beneficial owner.
     *
     * @return self
     */
    public function setTreatyCountry($treaty_country)
    {
        $this->container['treaty_country'] = $treaty_country;

        return $this;
    }

    /**
     * Gets benefit_limitation_certification
     *
     * @return bool|null
     */
    public function getBenefitLimitationCertification()
    {
        return $this->container['benefit_limitation_certification'];
    }

    /**
     * Sets benefit_limitation_certification
     *
     * @param bool|null $benefit_limitation_certification Certifies that the beneficial owner is eligible for treaty benefits and meets any limitation on benefits requirements.
     *
     * @return self
     */
    public function setBenefitLimitationCertification($benefit_limitation_certification)
    {
        $this->container['benefit_limitation_certification'] = $benefit_limitation_certification;

        return $this;
    }

    /**
     * Gets benefit_limitation
     *
     * @return string|null
     */
    public function getBenefitLimitation()
    {
        return $this->container['benefit_limitation'];
    }

    /**
     * Sets benefit_limitation
     *
     * @param string|null $benefit_limitation The benefit limitation for tax treaty claims.
     *
     * @return self
     */
    public function setBenefitLimitation($benefit_limitation)
    {
        $this->container['benefit_limitation'] = $benefit_limitation;

        return $this;
    }

    /**
     * Gets qualified_resident_status_certification
     *
     * @return bool|null
     */
    public function getQualifiedResidentStatusCertification()
    {
        return $this->container['qualified_resident_status_certification'];
    }

    /**
     * Sets qualified_resident_status_certification
     *
     * @param bool|null $qualified_resident_status_certification Certifies that the beneficial owner claims treaty benefits and meets the qualified resident status for specific U.S. source income.
     *
     * @return self
     */
    public function setQualifiedResidentStatusCertification($qualified_resident_status_certification)
    {
        $this->container['qualified_resident_status_certification'] = $qualified_resident_status_certification;

        return $this;
    }

    /**
     * Gets treaty_article
     *
     * @return string|null
     */
    public function getTreatyArticle()
    {
        return $this->container['treaty_article'];
    }

    /**
     * Sets treaty_article
     *
     * @param string|null $treaty_article Indicates the specific article and paragraph of the tax treaty under which the beneficial owner is claiming benefits.
     *
     * @return self
     */
    public function setTreatyArticle($treaty_article)
    {
        $this->container['treaty_article'] = $treaty_article;

        return $this;
    }

    /**
     * Gets withholding_rate
     *
     * @return string|null
     */
    public function getWithholdingRate()
    {
        return $this->container['withholding_rate'];
    }

    /**
     * Sets withholding_rate
     *
     * @param string|null $withholding_rate Specifies the reduced withholding rate claimed under the applicable tax treaty.
     *
     * @return self
     */
    public function setWithholdingRate($withholding_rate)
    {
        $this->container['withholding_rate'] = $withholding_rate;

        return $this;
    }

    /**
     * Gets income_type
     *
     * @return string|null
     */
    public function getIncomeType()
    {
        return $this->container['income_type'];
    }

    /**
     * Sets income_type
     *
     * @param string|null $income_type Specifies the type of income for which the reduced treaty withholding rate is being claimed.
     *
     * @return self
     */
    public function setIncomeType($income_type)
    {
        $this->container['income_type'] = $income_type;

        return $this;
    }

    /**
     * Gets treaty_reasons
     *
     * @return string|null
     */
    public function getTreatyReasons()
    {
        return $this->container['treaty_reasons'];
    }

    /**
     * Sets treaty_reasons
     *
     * @param string|null $treaty_reasons The additional conditions in the article the beneficial owner meets to be eligible for the rate of withholding.
     *
     * @return self
     */
    public function setTreatyReasons($treaty_reasons)
    {
        $this->container['treaty_reasons'] = $treaty_reasons;

        return $this;
    }

    /**
     * Gets ffi_sponsoring_entity
     *
     * @return string|null
     */
    public function getFfiSponsoringEntity()
    {
        return $this->container['ffi_sponsoring_entity'];
    }

    /**
     * Sets ffi_sponsoring_entity
     *
     * @param string|null $ffi_sponsoring_entity The name of the entity that sponsors the foreign financial institution (FFI).
     *
     * @return self
     */
    public function setFfiSponsoringEntity($ffi_sponsoring_entity)
    {
        $this->container['ffi_sponsoring_entity'] = $ffi_sponsoring_entity;

        return $this;
    }

    /**
     * Gets investment_entity_certification
     *
     * @return bool|null
     */
    public function getInvestmentEntityCertification()
    {
        return $this->container['investment_entity_certification'];
    }

    /**
     * Sets investment_entity_certification
     *
     * @param bool|null $investment_entity_certification Certifies that the entity is an investment entity, not a QI, WP, or WT, and has an agreement with a sponsoring entity.
     *
     * @return self
     */
    public function setInvestmentEntityCertification($investment_entity_certification)
    {
        $this->container['investment_entity_certification'] = $investment_entity_certification;

        return $this;
    }

    /**
     * Gets controlled_foreign_corporation_certification
     *
     * @return bool|null
     */
    public function getControlledForeignCorporationCertification()
    {
        return $this->container['controlled_foreign_corporation_certification'];
    }

    /**
     * Sets controlled_foreign_corporation_certification
     *
     * @param bool|null $controlled_foreign_corporation_certification Certifies that the entity is a controlled foreign corporation sponsored by a U.S. financial institution, not a QI, WP, or WT,  and shares a common electronic account system for full transparency.
     *
     * @return self
     */
    public function setControlledForeignCorporationCertification($controlled_foreign_corporation_certification)
    {
        $this->container['controlled_foreign_corporation_certification'] = $controlled_foreign_corporation_certification;

        return $this;
    }

    /**
     * Gets compliant_nonregistering_local_bank_certification
     *
     * @return bool|null
     */
    public function getCompliantNonregisteringLocalBankCertification()
    {
        return $this->container['compliant_nonregistering_local_bank_certification'];
    }

    /**
     * Sets compliant_nonregistering_local_bank_certification
     *
     * @param bool|null $compliant_nonregistering_local_bank_certification Certifies that the FFI operates solely as a limited bank or credit union within its country, meets asset thresholds,  and has no foreign operations or affiliations outside its country of organization.
     *
     * @return self
     */
    public function setCompliantNonregisteringLocalBankCertification($compliant_nonregistering_local_bank_certification)
    {
        $this->container['compliant_nonregistering_local_bank_certification'] = $compliant_nonregistering_local_bank_certification;

        return $this;
    }

    /**
     * Gets compliant_ffi_low_value_accounts_certification
     *
     * @return bool|null
     */
    public function getCompliantFfiLowValueAccountsCertification()
    {
        return $this->container['compliant_ffi_low_value_accounts_certification'];
    }

    /**
     * Sets compliant_ffi_low_value_accounts_certification
     *
     * @param bool|null $compliant_ffi_low_value_accounts_certification Certifies that the FFI is not primarily engaged in investment activities, maintains only low-value accounts,  and has limited total assets within its group.
     *
     * @return self
     */
    public function setCompliantFfiLowValueAccountsCertification($compliant_ffi_low_value_accounts_certification)
    {
        $this->container['compliant_ffi_low_value_accounts_certification'] = $compliant_ffi_low_value_accounts_certification;

        return $this;
    }

    /**
     * Gets sponsored_closely_held_entity_sponsoring_entity
     *
     * @return string|null
     */
    public function getSponsoredCloselyHeldEntitySponsoringEntity()
    {
        return $this->container['sponsored_closely_held_entity_sponsoring_entity'];
    }

    /**
     * Sets sponsored_closely_held_entity_sponsoring_entity
     *
     * @param string|null $sponsored_closely_held_entity_sponsoring_entity The name of sponsoring entity for a certified deemed-compliant, closely held investment vehicle.
     *
     * @return self
     */
    public function setSponsoredCloselyHeldEntitySponsoringEntity($sponsored_closely_held_entity_sponsoring_entity)
    {
        $this->container['sponsored_closely_held_entity_sponsoring_entity'] = $sponsored_closely_held_entity_sponsoring_entity;

        return $this;
    }

    /**
     * Gets sponsored_closely_held_investment_vehicle_certification
     *
     * @return bool|null
     */
    public function getSponsoredCloselyHeldInvestmentVehicleCertification()
    {
        return $this->container['sponsored_closely_held_investment_vehicle_certification'];
    }

    /**
     * Sets sponsored_closely_held_investment_vehicle_certification
     *
     * @param bool|null $sponsored_closely_held_investment_vehicle_certification Certifies that the entity is a sponsored investment entity with 20 or fewer individual owners,  and that all compliance obligations are fulfilled by the sponsoring entity.
     *
     * @return self
     */
    public function setSponsoredCloselyHeldInvestmentVehicleCertification($sponsored_closely_held_investment_vehicle_certification)
    {
        $this->container['sponsored_closely_held_investment_vehicle_certification'] = $sponsored_closely_held_investment_vehicle_certification;

        return $this;
    }

    /**
     * Gets compliant_limited_life_debt_entity_certification
     *
     * @return bool|null
     */
    public function getCompliantLimitedLifeDebtEntityCertification()
    {
        return $this->container['compliant_limited_life_debt_entity_certification'];
    }

    /**
     * Sets compliant_limited_life_debt_entity_certification
     *
     * @param bool|null $compliant_limited_life_debt_entity_certification Certifies that the entity qualifies as a limited life debt investment entity based on its formation date, issuance terms,  and compliance with regulatory requirements.
     *
     * @return self
     */
    public function setCompliantLimitedLifeDebtEntityCertification($compliant_limited_life_debt_entity_certification)
    {
        $this->container['compliant_limited_life_debt_entity_certification'] = $compliant_limited_life_debt_entity_certification;

        return $this;
    }

    /**
     * Gets investment_entity_no_financial_accounts_certification
     *
     * @return bool|null
     */
    public function getInvestmentEntityNoFinancialAccountsCertification()
    {
        return $this->container['investment_entity_no_financial_accounts_certification'];
    }

    /**
     * Sets investment_entity_no_financial_accounts_certification
     *
     * @param bool|null $investment_entity_no_financial_accounts_certification Certifies that the entity is a financial institution solely because it is an investment entity under regulations  and the entity does not maintain financial accounts.
     *
     * @return self
     */
    public function setInvestmentEntityNoFinancialAccountsCertification($investment_entity_no_financial_accounts_certification)
    {
        $this->container['investment_entity_no_financial_accounts_certification'] = $investment_entity_no_financial_accounts_certification;

        return $this;
    }

    /**
     * Gets owner_documented_ffi_certification
     *
     * @return bool|null
     */
    public function getOwnerDocumentedFfiCertification()
    {
        return $this->container['owner_documented_ffi_certification'];
    }

    /**
     * Sets owner_documented_ffi_certification
     *
     * @param bool|null $owner_documented_ffi_certification Certifies that the FFI meets all requirements to qualify as an owner-documented FFI, including restrictions on activities,  ownership, and account relationships.
     *
     * @return self
     */
    public function setOwnerDocumentedFfiCertification($owner_documented_ffi_certification)
    {
        $this->container['owner_documented_ffi_certification'] = $owner_documented_ffi_certification;

        return $this;
    }

    /**
     * Gets owner_documented_ffi_reporting_statement_certification
     *
     * @return bool|null
     */
    public function getOwnerDocumentedFfiReportingStatementCertification()
    {
        return $this->container['owner_documented_ffi_reporting_statement_certification'];
    }

    /**
     * Sets owner_documented_ffi_reporting_statement_certification
     *
     * @param bool|null $owner_documented_ffi_reporting_statement_certification Certifies that the FFI will provide a complete owner reporting statement  and required documentation for each relevant owner or debt holder.
     *
     * @return self
     */
    public function setOwnerDocumentedFfiReportingStatementCertification($owner_documented_ffi_reporting_statement_certification)
    {
        $this->container['owner_documented_ffi_reporting_statement_certification'] = $owner_documented_ffi_reporting_statement_certification;

        return $this;
    }

    /**
     * Gets owner_documented_ffi_auditor_letter_certification
     *
     * @return bool|null
     */
    public function getOwnerDocumentedFfiAuditorLetterCertification()
    {
        return $this->container['owner_documented_ffi_auditor_letter_certification'];
    }

    /**
     * Sets owner_documented_ffi_auditor_letter_certification
     *
     * @param bool|null $owner_documented_ffi_auditor_letter_certification Certifies that the FFI will provide an auditor’s letter and required owner reporting documentation  to confirm its status as an owner-documented FFI.
     *
     * @return self
     */
    public function setOwnerDocumentedFfiAuditorLetterCertification($owner_documented_ffi_auditor_letter_certification)
    {
        $this->container['owner_documented_ffi_auditor_letter_certification'] = $owner_documented_ffi_auditor_letter_certification;

        return $this;
    }

    /**
     * Gets owner_documented_ffi_trust_beneficiaries_certification
     *
     * @return bool|null
     */
    public function getOwnerDocumentedFfiTrustBeneficiariesCertification()
    {
        return $this->container['owner_documented_ffi_trust_beneficiaries_certification'];
    }

    /**
     * Sets owner_documented_ffi_trust_beneficiaries_certification
     *
     * @param bool|null $owner_documented_ffi_trust_beneficiaries_certification Certifies that the trust has no contingent or unidentified beneficiaries or designated classes of beneficiaries.
     *
     * @return self
     */
    public function setOwnerDocumentedFfiTrustBeneficiariesCertification($owner_documented_ffi_trust_beneficiaries_certification)
    {
        $this->container['owner_documented_ffi_trust_beneficiaries_certification'] = $owner_documented_ffi_trust_beneficiaries_certification;

        return $this;
    }

    /**
     * Gets restricted_distributor_certification
     *
     * @return bool|null
     */
    public function getRestrictedDistributorCertification()
    {
        return $this->container['restricted_distributor_certification'];
    }

    /**
     * Sets restricted_distributor_certification
     *
     * @param bool|null $restricted_distributor_certification Certifies that the entity qualifies as a restricted distributor based on its operations, customer base, regulatory compliance,  and financial and geographic limitations.
     *
     * @return self
     */
    public function setRestrictedDistributorCertification($restricted_distributor_certification)
    {
        $this->container['restricted_distributor_certification'] = $restricted_distributor_certification;

        return $this;
    }

    /**
     * Gets restricted_distributor_agreement_certification
     *
     * @return bool|null
     */
    public function getRestrictedDistributorAgreementCertification()
    {
        return $this->container['restricted_distributor_agreement_certification'];
    }

    /**
     * Sets restricted_distributor_agreement_certification
     *
     * @param bool|null $restricted_distributor_agreement_certification Certifies that the entity is, and has been, bound by distribution agreements prohibiting sales of fund interests to  specified U.S. persons and certain non-U.S. entities.
     *
     * @return self
     */
    public function setRestrictedDistributorAgreementCertification($restricted_distributor_agreement_certification)
    {
        $this->container['restricted_distributor_agreement_certification'] = $restricted_distributor_agreement_certification;

        return $this;
    }

    /**
     * Gets restricted_distributor_preexisting_sales_compliance_certification
     *
     * @return bool|null
     */
    public function getRestrictedDistributorPreexistingSalesComplianceCertification()
    {
        return $this->container['restricted_distributor_preexisting_sales_compliance_certification'];
    }

    /**
     * Sets restricted_distributor_preexisting_sales_compliance_certification
     *
     * @param bool|null $restricted_distributor_preexisting_sales_compliance_certification Certifies that the entity complies with distribution restrictions for U.S.-linked investors  and has addressed any preexisting sales in accordance with FATCA regulations.
     *
     * @return self
     */
    public function setRestrictedDistributorPreexistingSalesComplianceCertification($restricted_distributor_preexisting_sales_compliance_certification)
    {
        $this->container['restricted_distributor_preexisting_sales_compliance_certification'] = $restricted_distributor_preexisting_sales_compliance_certification;

        return $this;
    }

    /**
     * Gets nonreporting_iga_ffi_certification
     *
     * @return bool|null
     */
    public function getNonreportingIgaFfiCertification()
    {
        return $this->container['nonreporting_iga_ffi_certification'];
    }

    /**
     * Sets nonreporting_iga_ffi_certification
     *
     * @param bool|null $nonreporting_iga_ffi_certification Certifies that the entity meets the requirements to be considered a nonreporting financial institution to an applicable IGA.
     *
     * @return self
     */
    public function setNonreportingIgaFfiCertification($nonreporting_iga_ffi_certification)
    {
        $this->container['nonreporting_iga_ffi_certification'] = $nonreporting_iga_ffi_certification;

        return $this;
    }

    /**
     * Gets iga_country
     *
     * @return string|null
     */
    public function getIgaCountry()
    {
        return $this->container['iga_country'];
    }

    /**
     * Sets iga_country
     *
     * @param string|null $iga_country The country for the applicable IGA with the United States.
     *
     * @return self
     */
    public function setIgaCountry($iga_country)
    {
        $this->container['iga_country'] = $iga_country;

        return $this;
    }

    /**
     * Gets iga_model
     *
     * @return string|null
     */
    public function getIgaModel()
    {
        return $this->container['iga_model'];
    }

    /**
     * Sets iga_model
     *
     * @param string|null $iga_model The applicable IGA model.
     *
     * @return self
     */
    public function setIgaModel($iga_model)
    {
        $this->container['iga_model'] = $iga_model;

        return $this;
    }

    /**
     * Gets iga_legal_status_treatment
     *
     * @return string|null
     */
    public function getIgaLegalStatusTreatment()
    {
        return $this->container['iga_legal_status_treatment'];
    }

    /**
     * Sets iga_legal_status_treatment
     *
     * @param string|null $iga_legal_status_treatment Specifies how the applicable IGA is treated under the IGA provisions or Treasury regulations.
     *
     * @return self
     */
    public function setIgaLegalStatusTreatment($iga_legal_status_treatment)
    {
        $this->container['iga_legal_status_treatment'] = $iga_legal_status_treatment;

        return $this;
    }

    /**
     * Gets iga_ffi_trustee_or_sponsor
     *
     * @return string|null
     */
    public function getIgaFfiTrusteeOrSponsor()
    {
        return $this->container['iga_ffi_trustee_or_sponsor'];
    }

    /**
     * Sets iga_ffi_trustee_or_sponsor
     *
     * @param string|null $iga_ffi_trustee_or_sponsor The trustee or sponsor name for the nonreporting IGA FFI.
     *
     * @return self
     */
    public function setIgaFfiTrusteeOrSponsor($iga_ffi_trustee_or_sponsor)
    {
        $this->container['iga_ffi_trustee_or_sponsor'] = $iga_ffi_trustee_or_sponsor;

        return $this;
    }

    /**
     * Gets iga_ffi_trustee_is_foreign
     *
     * @return bool|null
     */
    public function getIgaFfiTrusteeIsForeign()
    {
        return $this->container['iga_ffi_trustee_is_foreign'];
    }

    /**
     * Sets iga_ffi_trustee_is_foreign
     *
     * @param bool|null $iga_ffi_trustee_is_foreign Indicates whether the trustee for the nonreporting IGA FFI is foreign.
     *
     * @return self
     */
    public function setIgaFfiTrusteeIsForeign($iga_ffi_trustee_is_foreign)
    {
        $this->container['iga_ffi_trustee_is_foreign'] = $iga_ffi_trustee_is_foreign;

        return $this;
    }

    /**
     * Gets non_commercial_financial_activity_certification
     *
     * @return bool|null
     */
    public function getNonCommercialFinancialActivityCertification()
    {
        return $this->container['non_commercial_financial_activity_certification'];
    }

    /**
     * Sets non_commercial_financial_activity_certification
     *
     * @param bool|null $non_commercial_financial_activity_certification Certifies that the entity is the beneficial owner and is not engaged in commercial financial activities related  to the specified payments, accounts or obligations for which this form is submitted.
     *
     * @return self
     */
    public function setNonCommercialFinancialActivityCertification($non_commercial_financial_activity_certification)
    {
        $this->container['non_commercial_financial_activity_certification'] = $non_commercial_financial_activity_certification;

        return $this;
    }

    /**
     * Gets internation_organization_certification
     *
     * @return bool|null
     */
    public function getInternationOrganizationCertification()
    {
        return $this->container['internation_organization_certification'];
    }

    /**
     * Sets internation_organization_certification
     *
     * @param bool|null $internation_organization_certification Certifies that the entity is an international organization described in section 7701(a)(18).
     *
     * @return self
     */
    public function setInternationOrganizationCertification($internation_organization_certification)
    {
        $this->container['internation_organization_certification'] = $internation_organization_certification;

        return $this;
    }

    /**
     * Gets intergovernmental_organization_certification
     *
     * @return bool|null
     */
    public function getIntergovernmentalOrganizationCertification()
    {
        return $this->container['intergovernmental_organization_certification'];
    }

    /**
     * Sets intergovernmental_organization_certification
     *
     * @param bool|null $intergovernmental_organization_certification Certifies that the entity is an intergovernmental or supranational organization primarily comprised of foreign governments,  is the beneficial owner, and is not engaged in commercial financial activities.
     *
     * @return self
     */
    public function setIntergovernmentalOrganizationCertification($intergovernmental_organization_certification)
    {
        $this->container['intergovernmental_organization_certification'] = $intergovernmental_organization_certification;

        return $this;
    }

    /**
     * Gets treaty_qualified_pension_fund_certification
     *
     * @return bool|null
     */
    public function getTreatyQualifiedPensionFundCertification()
    {
        return $this->container['treaty_qualified_pension_fund_certification'];
    }

    /**
     * Sets treaty_qualified_pension_fund_certification
     *
     * @param bool|null $treaty_qualified_pension_fund_certification Certifies that the entity is a pension or retirement fund established in a treaty country  and is entitled to treaty benefits on U.S. source income.
     *
     * @return self
     */
    public function setTreatyQualifiedPensionFundCertification($treaty_qualified_pension_fund_certification)
    {
        $this->container['treaty_qualified_pension_fund_certification'] = $treaty_qualified_pension_fund_certification;

        return $this;
    }

    /**
     * Gets qualified_retirement_fund_certification
     *
     * @return bool|null
     */
    public function getQualifiedRetirementFundCertification()
    {
        return $this->container['qualified_retirement_fund_certification'];
    }

    /**
     * Sets qualified_retirement_fund_certification
     *
     * @param bool|null $qualified_retirement_fund_certification Certifies that the entity is a government-regulated retirement fund meeting specific requirements for contributions, tax exemption,  beneficiary limits, and distribution restrictions.
     *
     * @return self
     */
    public function setQualifiedRetirementFundCertification($qualified_retirement_fund_certification)
    {
        $this->container['qualified_retirement_fund_certification'] = $qualified_retirement_fund_certification;

        return $this;
    }

    /**
     * Gets narrow_participation_retirement_fund_certification
     *
     * @return bool|null
     */
    public function getNarrowParticipationRetirementFundCertification()
    {
        return $this->container['narrow_participation_retirement_fund_certification'];
    }

    /**
     * Sets narrow_participation_retirement_fund_certification
     *
     * @param bool|null $narrow_participation_retirement_fund_certification Certifies that the entity is a government-regulated retirement fund with fewer than 50 participants, limited foreign ownership,  and employer sponsorship that is not from investment entities or passive NFFEs.
     *
     * @return self
     */
    public function setNarrowParticipationRetirementFundCertification($narrow_participation_retirement_fund_certification)
    {
        $this->container['narrow_participation_retirement_fund_certification'] = $narrow_participation_retirement_fund_certification;

        return $this;
    }

    /**
     * Gets section401_a_equivalent_pension_plan_certification
     *
     * @return bool|null
     */
    public function getSection401AEquivalentPensionPlanCertification()
    {
        return $this->container['section401_a_equivalent_pension_plan_certification'];
    }

    /**
     * Sets section401_a_equivalent_pension_plan_certification
     *
     * @param bool|null $section401_a_equivalent_pension_plan_certification Certifies that the entity is formed under a pension plan meeting section 401(a) requirements, except for being U.S.-trust funded.
     *
     * @return self
     */
    public function setSection401AEquivalentPensionPlanCertification($section401_a_equivalent_pension_plan_certification)
    {
        $this->container['section401_a_equivalent_pension_plan_certification'] = $section401_a_equivalent_pension_plan_certification;

        return $this;
    }

    /**
     * Gets investment_entity_for_retirement_funds_certification
     *
     * @return bool|null
     */
    public function getInvestmentEntityForRetirementFundsCertification()
    {
        return $this->container['investment_entity_for_retirement_funds_certification'];
    }

    /**
     * Sets investment_entity_for_retirement_funds_certification
     *
     * @param bool|null $investment_entity_for_retirement_funds_certification Certifies that the entity is established solely to earn income for the benefit of qualifying retirement funds  or accounts under applicable FATCA regulations or IGAs.
     *
     * @return self
     */
    public function setInvestmentEntityForRetirementFundsCertification($investment_entity_for_retirement_funds_certification)
    {
        $this->container['investment_entity_for_retirement_funds_certification'] = $investment_entity_for_retirement_funds_certification;

        return $this;
    }

    /**
     * Gets exempt_beneficial_owner_sponsored_retirement_fund_certification
     *
     * @return bool|null
     */
    public function getExemptBeneficialOwnerSponsoredRetirementFundCertification()
    {
        return $this->container['exempt_beneficial_owner_sponsored_retirement_fund_certification'];
    }

    /**
     * Sets exempt_beneficial_owner_sponsored_retirement_fund_certification
     *
     * @param bool|null $exempt_beneficial_owner_sponsored_retirement_fund_certification Certifies that the entity is established and sponsored by a qualifying exempt beneficial owner to provide retirement, disability,  or death benefits to individuals based on services performed for the sponsor.
     *
     * @return self
     */
    public function setExemptBeneficialOwnerSponsoredRetirementFundCertification($exempt_beneficial_owner_sponsored_retirement_fund_certification)
    {
        $this->container['exempt_beneficial_owner_sponsored_retirement_fund_certification'] = $exempt_beneficial_owner_sponsored_retirement_fund_certification;

        return $this;
    }

    /**
     * Gets exempt_beneficial_owner_owned_investment_entity_certification
     *
     * @return bool|null
     */
    public function getExemptBeneficialOwnerOwnedInvestmentEntityCertification()
    {
        return $this->container['exempt_beneficial_owner_owned_investment_entity_certification'];
    }

    /**
     * Sets exempt_beneficial_owner_owned_investment_entity_certification
     *
     * @param bool|null $exempt_beneficial_owner_owned_investment_entity_certification Certifies that the entity is an investment entity wholly owned by exempt beneficial owners and has provided complete ownership  and documentation details as required under FATCA regulations.
     *
     * @return self
     */
    public function setExemptBeneficialOwnerOwnedInvestmentEntityCertification($exempt_beneficial_owner_owned_investment_entity_certification)
    {
        $this->container['exempt_beneficial_owner_owned_investment_entity_certification'] = $exempt_beneficial_owner_owned_investment_entity_certification;

        return $this;
    }

    /**
     * Gets territory_financial_institution_certification
     *
     * @return bool|null
     */
    public function getTerritoryFinancialInstitutionCertification()
    {
        return $this->container['territory_financial_institution_certification'];
    }

    /**
     * Sets territory_financial_institution_certification
     *
     * @param bool|null $territory_financial_institution_certification Certifies that the entity is a financial institution (other than an investment entity) that is incorporated  or organized under the laws of a possession of the United States.
     *
     * @return self
     */
    public function setTerritoryFinancialInstitutionCertification($territory_financial_institution_certification)
    {
        $this->container['territory_financial_institution_certification'] = $territory_financial_institution_certification;

        return $this;
    }

    /**
     * Gets excepted_nonfinancial_group_entity_certification
     *
     * @return bool|null
     */
    public function getExceptedNonfinancialGroupEntityCertification()
    {
        return $this->container['excepted_nonfinancial_group_entity_certification'];
    }

    /**
     * Sets excepted_nonfinancial_group_entity_certification
     *
     * @param bool|null $excepted_nonfinancial_group_entity_certification Certifies that the entity is a holding company, treasury center, or captive finance company operating within a nonfinancial group  and not functioning as an investment or financial institution.
     *
     * @return self
     */
    public function setExceptedNonfinancialGroupEntityCertification($excepted_nonfinancial_group_entity_certification)
    {
        $this->container['excepted_nonfinancial_group_entity_certification'] = $excepted_nonfinancial_group_entity_certification;

        return $this;
    }

    /**
     * Gets excepted_nonfinancial_start_up_certification
     *
     * @return bool|null
     */
    public function getExceptedNonfinancialStartUpCertification()
    {
        return $this->container['excepted_nonfinancial_start_up_certification'];
    }

    /**
     * Sets excepted_nonfinancial_start_up_certification
     *
     * @param bool|null $excepted_nonfinancial_start_up_certification Certifies that the entity is a recently formed startup NFFE investing in a non-financial business  and is not operating as or presenting itself as an investment fund.
     *
     * @return self
     */
    public function setExceptedNonfinancialStartUpCertification($excepted_nonfinancial_start_up_certification)
    {
        $this->container['excepted_nonfinancial_start_up_certification'] = $excepted_nonfinancial_start_up_certification;

        return $this;
    }

    /**
     * Gets startup_formation_or_resolution_date
     *
     * @return \DateTime|null
     */
    public function getStartupFormationOrResolutionDate()
    {
        return $this->container['startup_formation_or_resolution_date'];
    }

    /**
     * Sets startup_formation_or_resolution_date
     *
     * @param \DateTime|null $startup_formation_or_resolution_date The date the start-up company was formed on (or, in case of new line of business, the date of board resolution approving the  new line of business).
     *
     * @return self
     */
    public function setStartupFormationOrResolutionDate($startup_formation_or_resolution_date)
    {
        $this->container['startup_formation_or_resolution_date'] = $startup_formation_or_resolution_date;

        return $this;
    }

    /**
     * Gets excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification
     *
     * @return bool|null
     */
    public function getExceptedNonfinancialEntityInLiquidationOrBankruptcyCertification()
    {
        return $this->container['excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification'];
    }

    /**
     * Sets excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification
     *
     * @param bool|null $excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification Certifies that the entity is in liquidation, reorganization, or bankruptcy and intends to operate as a nonfinancial entity,  with supporting documentation available if the process exceeds three years.
     *
     * @return self
     */
    public function setExceptedNonfinancialEntityInLiquidationOrBankruptcyCertification($excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification)
    {
        $this->container['excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification'] = $excepted_nonfinancial_entity_in_liquidation_or_bankruptcy_certification;

        return $this;
    }

    /**
     * Gets nonfinancial_entity_filing_date
     *
     * @return \DateTime|null
     */
    public function getNonfinancialEntityFilingDate()
    {
        return $this->container['nonfinancial_entity_filing_date'];
    }

    /**
     * Sets nonfinancial_entity_filing_date
     *
     * @param \DateTime|null $nonfinancial_entity_filing_date The filed date for a plan of reorganization, liquidation or bankruptcy.
     *
     * @return self
     */
    public function setNonfinancialEntityFilingDate($nonfinancial_entity_filing_date)
    {
        $this->container['nonfinancial_entity_filing_date'] = $nonfinancial_entity_filing_date;

        return $this;
    }

    /**
     * Gets section501_c_organization_certification
     *
     * @return bool|null
     */
    public function getSection501COrganizationCertification()
    {
        return $this->container['section501_c_organization_certification'];
    }

    /**
     * Sets section501_c_organization_certification
     *
     * @param bool|null $section501_c_organization_certification Certifies that the entity is a section 501(c) organization based on a valid IRS determination letter  or a legal opinion from U.S. counsel.
     *
     * @return self
     */
    public function setSection501COrganizationCertification($section501_c_organization_certification)
    {
        $this->container['section501_c_organization_certification'] = $section501_c_organization_certification;

        return $this;
    }

    /**
     * Gets determination_letter_date
     *
     * @return \DateTime|null
     */
    public function getDeterminationLetterDate()
    {
        return $this->container['determination_letter_date'];
    }

    /**
     * Sets determination_letter_date
     *
     * @param \DateTime|null $determination_letter_date The date of the IRS determination letter confirming the entity’s section 501(c) status.
     *
     * @return self
     */
    public function setDeterminationLetterDate($determination_letter_date)
    {
        $this->container['determination_letter_date'] = $determination_letter_date;

        return $this;
    }

    /**
     * Gets nonprofit_organization_certification
     *
     * @return bool|null
     */
    public function getNonprofitOrganizationCertification()
    {
        return $this->container['nonprofit_organization_certification'];
    }

    /**
     * Sets nonprofit_organization_certification
     *
     * @param bool|null $nonprofit_organization_certification Certifies that the entity is a nonprofit organization established for charitable or similar purposes, exempt from income tax,  and restricted in the use and distribution of its assets under applicable law.
     *
     * @return self
     */
    public function setNonprofitOrganizationCertification($nonprofit_organization_certification)
    {
        $this->container['nonprofit_organization_certification'] = $nonprofit_organization_certification;

        return $this;
    }

    /**
     * Gets publicly_traded_nffe_certification
     *
     * @return bool|null
     */
    public function getPubliclyTradedNffeCertification()
    {
        return $this->container['publicly_traded_nffe_certification'];
    }

    /**
     * Sets publicly_traded_nffe_certification
     *
     * @param bool|null $publicly_traded_nffe_certification Certifies that the entity is a foreign corporation that is not a financial institution  and whose stock is regularly traded on an established securities market.
     *
     * @return self
     */
    public function setPubliclyTradedNffeCertification($publicly_traded_nffe_certification)
    {
        $this->container['publicly_traded_nffe_certification'] = $publicly_traded_nffe_certification;

        return $this;
    }

    /**
     * Gets publicly_traded_nffe_securities_market
     *
     * @return string|null
     */
    public function getPubliclyTradedNffeSecuritiesMarket()
    {
        return $this->container['publicly_traded_nffe_securities_market'];
    }

    /**
     * Sets publicly_traded_nffe_securities_market
     *
     * @param string|null $publicly_traded_nffe_securities_market The name of the securities market where the corporation's stock is regularly traded.
     *
     * @return self
     */
    public function setPubliclyTradedNffeSecuritiesMarket($publicly_traded_nffe_securities_market)
    {
        $this->container['publicly_traded_nffe_securities_market'] = $publicly_traded_nffe_securities_market;

        return $this;
    }

    /**
     * Gets nffe_affiliate_of_publicly_traded_entity_certification
     *
     * @return bool|null
     */
    public function getNffeAffiliateOfPubliclyTradedEntityCertification()
    {
        return $this->container['nffe_affiliate_of_publicly_traded_entity_certification'];
    }

    /**
     * Sets nffe_affiliate_of_publicly_traded_entity_certification
     *
     * @param bool|null $nffe_affiliate_of_publicly_traded_entity_certification Certifies that the entity is a foreign corporation that is not a financial institution  and is affiliated with a publicly traded entity within the same expanded affiliated group.
     *
     * @return self
     */
    public function setNffeAffiliateOfPubliclyTradedEntityCertification($nffe_affiliate_of_publicly_traded_entity_certification)
    {
        $this->container['nffe_affiliate_of_publicly_traded_entity_certification'] = $nffe_affiliate_of_publicly_traded_entity_certification;

        return $this;
    }

    /**
     * Gets publicly_traded_entity
     *
     * @return string|null
     */
    public function getPubliclyTradedEntity()
    {
        return $this->container['publicly_traded_entity'];
    }

    /**
     * Sets publicly_traded_entity
     *
     * @param string|null $publicly_traded_entity The name of the affiliated entity whose stock is regularly traded on an established securities market.
     *
     * @return self
     */
    public function setPubliclyTradedEntity($publicly_traded_entity)
    {
        $this->container['publicly_traded_entity'] = $publicly_traded_entity;

        return $this;
    }

    /**
     * Gets nffe_affiliate_of_publicly_traded_entity_securities_market
     *
     * @return string|null
     */
    public function getNffeAffiliateOfPubliclyTradedEntitySecuritiesMarket()
    {
        return $this->container['nffe_affiliate_of_publicly_traded_entity_securities_market'];
    }

    /**
     * Sets nffe_affiliate_of_publicly_traded_entity_securities_market
     *
     * @param string|null $nffe_affiliate_of_publicly_traded_entity_securities_market The name of the established securities market where the affiliated entity's stock is traded.
     *
     * @return self
     */
    public function setNffeAffiliateOfPubliclyTradedEntitySecuritiesMarket($nffe_affiliate_of_publicly_traded_entity_securities_market)
    {
        $this->container['nffe_affiliate_of_publicly_traded_entity_securities_market'] = $nffe_affiliate_of_publicly_traded_entity_securities_market;

        return $this;
    }

    /**
     * Gets excepted_territory_nffe_certification
     *
     * @return bool|null
     */
    public function getExceptedTerritoryNffeCertification()
    {
        return $this->container['excepted_territory_nffe_certification'];
    }

    /**
     * Sets excepted_territory_nffe_certification
     *
     * @param bool|null $excepted_territory_nffe_certification Certifies that the entity is organized in a U.S. possession, is not engaged in financial activities,  and is entirely owned by bona fide residents of that possession.
     *
     * @return self
     */
    public function setExceptedTerritoryNffeCertification($excepted_territory_nffe_certification)
    {
        $this->container['excepted_territory_nffe_certification'] = $excepted_territory_nffe_certification;

        return $this;
    }

    /**
     * Gets active_nffe_certification
     *
     * @return bool|null
     */
    public function getActiveNffeCertification()
    {
        return $this->container['active_nffe_certification'];
    }

    /**
     * Sets active_nffe_certification
     *
     * @param bool|null $active_nffe_certification Certifies that the entity is a foreign non-financial institution with less than 50% passive income  and less than 50% of its assets producing or held to produce passive income.
     *
     * @return self
     */
    public function setActiveNffeCertification($active_nffe_certification)
    {
        $this->container['active_nffe_certification'] = $active_nffe_certification;

        return $this;
    }

    /**
     * Gets passive_nffe_certification
     *
     * @return bool|null
     */
    public function getPassiveNffeCertification()
    {
        return $this->container['passive_nffe_certification'];
    }

    /**
     * Sets passive_nffe_certification
     *
     * @param bool|null $passive_nffe_certification Certifies that the entity is a foreign non-financial entity that does not qualify for any other NFFE category  and is not a financial institution.
     *
     * @return self
     */
    public function setPassiveNffeCertification($passive_nffe_certification)
    {
        $this->container['passive_nffe_certification'] = $passive_nffe_certification;

        return $this;
    }

    /**
     * Gets passive_nffe_no_substantial_us_owners_certification
     *
     * @return bool|null
     */
    public function getPassiveNffeNoSubstantialUsOwnersCertification()
    {
        return $this->container['passive_nffe_no_substantial_us_owners_certification'];
    }

    /**
     * Sets passive_nffe_no_substantial_us_owners_certification
     *
     * @param bool|null $passive_nffe_no_substantial_us_owners_certification Certifies that the passive NFFE has no substantial U.S. owners or controlling U.S. persons.
     *
     * @return self
     */
    public function setPassiveNffeNoSubstantialUsOwnersCertification($passive_nffe_no_substantial_us_owners_certification)
    {
        $this->container['passive_nffe_no_substantial_us_owners_certification'] = $passive_nffe_no_substantial_us_owners_certification;

        return $this;
    }

    /**
     * Gets passive_nffe_substantial_us_owners_provided_certification
     *
     * @return bool|null
     */
    public function getPassiveNffeSubstantialUsOwnersProvidedCertification()
    {
        return $this->container['passive_nffe_substantial_us_owners_provided_certification'];
    }

    /**
     * Sets passive_nffe_substantial_us_owners_provided_certification
     *
     * @param bool|null $passive_nffe_substantial_us_owners_provided_certification Certifies that the passive NFFE has provided the name, address, and TIN of each substantial U.S. owner or controlling U.S. person.
     *
     * @return self
     */
    public function setPassiveNffeSubstantialUsOwnersProvidedCertification($passive_nffe_substantial_us_owners_provided_certification)
    {
        $this->container['passive_nffe_substantial_us_owners_provided_certification'] = $passive_nffe_substantial_us_owners_provided_certification;

        return $this;
    }

    /**
     * Gets excepted_inter_affiliate_ffi_certification
     *
     * @return bool|null
     */
    public function getExceptedInterAffiliateFfiCertification()
    {
        return $this->container['excepted_inter_affiliate_ffi_certification'];
    }

    /**
     * Sets excepted_inter_affiliate_ffi_certification
     *
     * @param bool|null $excepted_inter_affiliate_ffi_certification Certifies that the entity is an inter-affiliate FFI meeting all conditions for exemption,  including limited account activity and payment interactions within its expanded affiliated group.
     *
     * @return self
     */
    public function setExceptedInterAffiliateFfiCertification($excepted_inter_affiliate_ffi_certification)
    {
        $this->container['excepted_inter_affiliate_ffi_certification'] = $excepted_inter_affiliate_ffi_certification;

        return $this;
    }

    /**
     * Gets sponsored_direct_reporting_nffe_certification
     *
     * @return bool|null
     */
    public function getSponsoredDirectReportingNffeCertification()
    {
        return $this->container['sponsored_direct_reporting_nffe_certification'];
    }

    /**
     * Sets sponsored_direct_reporting_nffe_certification
     *
     * @param bool|null $sponsored_direct_reporting_nffe_certification Certifies that the entity is a sponsored direct reporting NFFE.
     *
     * @return self
     */
    public function setSponsoredDirectReportingNffeCertification($sponsored_direct_reporting_nffe_certification)
    {
        $this->container['sponsored_direct_reporting_nffe_certification'] = $sponsored_direct_reporting_nffe_certification;

        return $this;
    }

    /**
     * Gets direct_reporting_nffe_sponsoring_entity
     *
     * @return string|null
     */
    public function getDirectReportingNffeSponsoringEntity()
    {
        return $this->container['direct_reporting_nffe_sponsoring_entity'];
    }

    /**
     * Sets direct_reporting_nffe_sponsoring_entity
     *
     * @param string|null $direct_reporting_nffe_sponsoring_entity The name of the entity that sponsors the direct reporting NFFE.
     *
     * @return self
     */
    public function setDirectReportingNffeSponsoringEntity($direct_reporting_nffe_sponsoring_entity)
    {
        $this->container['direct_reporting_nffe_sponsoring_entity'] = $direct_reporting_nffe_sponsoring_entity;

        return $this;
    }

    /**
     * Gets substantial_us_owners
     *
     * @return \Avalara\SDK\Model\A1099\V2\SubstantialUsOwnerRequest[]|null
     */
    public function getSubstantialUsOwners()
    {
        return $this->container['substantial_us_owners'];
    }

    /**
     * Sets substantial_us_owners
     *
     * @param \Avalara\SDK\Model\A1099\V2\SubstantialUsOwnerRequest[]|null $substantial_us_owners The list of substantial U.S. owners of passive NFFE.
     *
     * @return self
     */
    public function setSubstantialUsOwners($substantial_us_owners)
    {
        $this->container['substantial_us_owners'] = $substantial_us_owners;

        return $this;
    }

    /**
     * Gets signer_name
     *
     * @return string|null
     */
    public function getSignerName()
    {
        return $this->container['signer_name'];
    }

    /**
     * Sets signer_name
     *
     * @param string|null $signer_name The name of the signer.
     *
     * @return self
     */
    public function setSignerName($signer_name)
    {
        $this->container['signer_name'] = $signer_name;

        return $this;
    }

    /**
     * Gets capacity_to_sign_certification
     *
     * @return bool|null
     */
    public function getCapacityToSignCertification()
    {
        return $this->container['capacity_to_sign_certification'];
    }

    /**
     * Sets capacity_to_sign_certification
     *
     * @param bool|null $capacity_to_sign_certification Certifies signer has the capacity to sign for the beneficial owner.
     *
     * @return self
     */
    public function setCapacityToSignCertification($capacity_to_sign_certification)
    {
        $this->container['capacity_to_sign_certification'] = $capacity_to_sign_certification;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string|null $company_id The ID of the associated company.
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id A reference identifier for the form.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of the individual associated with the form.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets e_delivery_consented_at
     *
     * @return \DateTime|null
     */
    public function getEDeliveryConsentedAt()
    {
        return $this->container['e_delivery_consented_at'];
    }

    /**
     * Sets e_delivery_consented_at
     *
     * @param \DateTime|null $e_delivery_consented_at The date when e-delivery was consented.
     *
     * @return self
     */
    public function setEDeliveryConsentedAt($e_delivery_consented_at)
    {
        $this->container['e_delivery_consented_at'] = $e_delivery_consented_at;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature The signature of the form.
     *
     * @return self
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


