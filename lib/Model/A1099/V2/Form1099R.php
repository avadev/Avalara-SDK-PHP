<?php
/**
 * Form1099R
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * Form1099R Class Doc Comment
 *
 * @category Class
 * @description Form 1099-R: Distributions From Pensions, Annuities, Retirement or Profit-Sharing Plans, IRAs, Insurance Contracts, etc.                *At least one of the following amounts must be provided:*   Gross distribution, Taxable amount, Capital gain, Employee contributions/Designated Roth contributions or insurance premiums,  Net unrealized appreciation in employer&#39;s securities, Other amount, Total employee contributions,  Traditional IRA/SEP/SIMPLE or Roth conversion amount, or Amount allocable to IRR within 5 years
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Form1099R implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Form1099R';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gross_distribution' => 'float',
        'taxable_amount' => 'float',
        'taxable_amount_not_determined' => 'bool',
        'total_distribution_determined' => 'bool',
        'capital_gain' => 'float',
        'federal_income_tax_withheld' => 'float',
        'employee_contributions_or_designated_roth_or_insurance_premiums' => 'float',
        'net_unrealized_appreciation_in_employer_securities' => 'float',
        'distribution_code' => 'string',
        'second_distribution_code' => 'string',
        'ira_sep_simple' => 'bool',
        'traditional_ira_sep_simple_or_roth_conversion_amount' => 'float',
        'other_amount' => 'float',
        'other_percentage' => 'string',
        'total_distribution_percentage' => 'string',
        'total_employee_contributions' => 'float',
        'amount_allocable_to_irr_within5_years' => 'float',
        'first_year_of_designated_roth_contribution' => 'string',
        'date_of_payment' => '\DateTime',
        'fatca_filing_requirement' => 'bool',
        'type' => 'string',
        'id' => 'string',
        'issuer_id' => 'string',
        'issuer_reference_id' => 'string',
        'issuer_tin' => 'string',
        'tax_year' => 'int',
        'reference_id' => 'string',
        'tin' => 'string',
        'recipient_name' => 'string',
        'tin_type' => 'string',
        'recipient_second_name' => 'string',
        'address' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'email' => 'string',
        'account_number' => 'string',
        'office_code' => 'string',
        'non_us_province' => 'string',
        'country_code' => 'string',
        'federal_efile_date' => '\DateTime',
        'postal_mail' => 'bool',
        'state_efile_date' => '\DateTime',
        'recipient_edelivery_date' => '\DateTime',
        'tin_match' => 'bool',
        'no_tin' => 'bool',
        'address_verification' => 'bool',
        'state_and_local_withholding' => '\Avalara\SDK\Model\A1099\V2\StateAndLocalWithholding',
        'second_tin_notice' => 'bool',
        'federal_efile_status' => '\Avalara\SDK\Model\A1099\V2\Form1099StatusDetail',
        'state_efile_status' => '\Avalara\SDK\Model\A1099\V2\StateEfileStatusDetail[]',
        'postal_mail_status' => '\Avalara\SDK\Model\A1099\V2\Form1099StatusDetail',
        'tin_match_status' => '\Avalara\SDK\Model\A1099\V2\Form1099StatusDetail',
        'address_verification_status' => '\Avalara\SDK\Model\A1099\V2\Form1099StatusDetail',
        'e_delivery_status' => '\Avalara\SDK\Model\A1099\V2\Form1099StatusDetail',
        'validation_errors' => '\Avalara\SDK\Model\A1099\V2\ValidationError[]',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gross_distribution' => 'double',
        'taxable_amount' => 'double',
        'taxable_amount_not_determined' => null,
        'total_distribution_determined' => null,
        'capital_gain' => 'double',
        'federal_income_tax_withheld' => 'double',
        'employee_contributions_or_designated_roth_or_insurance_premiums' => 'double',
        'net_unrealized_appreciation_in_employer_securities' => 'double',
        'distribution_code' => null,
        'second_distribution_code' => null,
        'ira_sep_simple' => null,
        'traditional_ira_sep_simple_or_roth_conversion_amount' => 'double',
        'other_amount' => 'double',
        'other_percentage' => null,
        'total_distribution_percentage' => null,
        'total_employee_contributions' => 'double',
        'amount_allocable_to_irr_within5_years' => 'double',
        'first_year_of_designated_roth_contribution' => null,
        'date_of_payment' => 'date',
        'fatca_filing_requirement' => null,
        'type' => null,
        'id' => null,
        'issuer_id' => null,
        'issuer_reference_id' => null,
        'issuer_tin' => null,
        'tax_year' => 'int32',
        'reference_id' => null,
        'tin' => null,
        'recipient_name' => null,
        'tin_type' => null,
        'recipient_second_name' => null,
        'address' => null,
        'address2' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'email' => null,
        'account_number' => null,
        'office_code' => null,
        'non_us_province' => null,
        'country_code' => null,
        'federal_efile_date' => 'date',
        'postal_mail' => null,
        'state_efile_date' => 'date',
        'recipient_edelivery_date' => 'date',
        'tin_match' => null,
        'no_tin' => null,
        'address_verification' => null,
        'state_and_local_withholding' => null,
        'second_tin_notice' => null,
        'federal_efile_status' => null,
        'state_efile_status' => null,
        'postal_mail_status' => null,
        'tin_match_status' => null,
        'address_verification_status' => null,
        'e_delivery_status' => null,
        'validation_errors' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gross_distribution' => 'grossDistribution',
        'taxable_amount' => 'taxableAmount',
        'taxable_amount_not_determined' => 'taxableAmountNotDetermined',
        'total_distribution_determined' => 'totalDistributionDetermined',
        'capital_gain' => 'capitalGain',
        'federal_income_tax_withheld' => 'federalIncomeTaxWithheld',
        'employee_contributions_or_designated_roth_or_insurance_premiums' => 'employeeContributionsOrDesignatedRothOrInsurancePremiums',
        'net_unrealized_appreciation_in_employer_securities' => 'netUnrealizedAppreciationInEmployerSecurities',
        'distribution_code' => 'distributionCode',
        'second_distribution_code' => 'secondDistributionCode',
        'ira_sep_simple' => 'iraSepSimple',
        'traditional_ira_sep_simple_or_roth_conversion_amount' => 'traditionalIraSepSimpleOrRothConversionAmount',
        'other_amount' => 'otherAmount',
        'other_percentage' => 'otherPercentage',
        'total_distribution_percentage' => 'totalDistributionPercentage',
        'total_employee_contributions' => 'totalEmployeeContributions',
        'amount_allocable_to_irr_within5_years' => 'amountAllocableToIrrWithin5Years',
        'first_year_of_designated_roth_contribution' => 'firstYearOfDesignatedRothContribution',
        'date_of_payment' => 'dateOfPayment',
        'fatca_filing_requirement' => 'fatcaFilingRequirement',
        'type' => 'type',
        'id' => 'id',
        'issuer_id' => 'issuerId',
        'issuer_reference_id' => 'issuerReferenceId',
        'issuer_tin' => 'issuerTin',
        'tax_year' => 'taxYear',
        'reference_id' => 'referenceId',
        'tin' => 'tin',
        'recipient_name' => 'recipientName',
        'tin_type' => 'tinType',
        'recipient_second_name' => 'recipientSecondName',
        'address' => 'address',
        'address2' => 'address2',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'email' => 'email',
        'account_number' => 'accountNumber',
        'office_code' => 'officeCode',
        'non_us_province' => 'nonUsProvince',
        'country_code' => 'countryCode',
        'federal_efile_date' => 'federalEfileDate',
        'postal_mail' => 'postalMail',
        'state_efile_date' => 'stateEfileDate',
        'recipient_edelivery_date' => 'recipientEdeliveryDate',
        'tin_match' => 'tinMatch',
        'no_tin' => 'noTin',
        'address_verification' => 'addressVerification',
        'state_and_local_withholding' => 'stateAndLocalWithholding',
        'second_tin_notice' => 'secondTinNotice',
        'federal_efile_status' => 'federalEfileStatus',
        'state_efile_status' => 'stateEfileStatus',
        'postal_mail_status' => 'postalMailStatus',
        'tin_match_status' => 'tinMatchStatus',
        'address_verification_status' => 'addressVerificationStatus',
        'e_delivery_status' => 'eDeliveryStatus',
        'validation_errors' => 'validationErrors',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gross_distribution' => 'setGrossDistribution',
        'taxable_amount' => 'setTaxableAmount',
        'taxable_amount_not_determined' => 'setTaxableAmountNotDetermined',
        'total_distribution_determined' => 'setTotalDistributionDetermined',
        'capital_gain' => 'setCapitalGain',
        'federal_income_tax_withheld' => 'setFederalIncomeTaxWithheld',
        'employee_contributions_or_designated_roth_or_insurance_premiums' => 'setEmployeeContributionsOrDesignatedRothOrInsurancePremiums',
        'net_unrealized_appreciation_in_employer_securities' => 'setNetUnrealizedAppreciationInEmployerSecurities',
        'distribution_code' => 'setDistributionCode',
        'second_distribution_code' => 'setSecondDistributionCode',
        'ira_sep_simple' => 'setIraSepSimple',
        'traditional_ira_sep_simple_or_roth_conversion_amount' => 'setTraditionalIraSepSimpleOrRothConversionAmount',
        'other_amount' => 'setOtherAmount',
        'other_percentage' => 'setOtherPercentage',
        'total_distribution_percentage' => 'setTotalDistributionPercentage',
        'total_employee_contributions' => 'setTotalEmployeeContributions',
        'amount_allocable_to_irr_within5_years' => 'setAmountAllocableToIrrWithin5Years',
        'first_year_of_designated_roth_contribution' => 'setFirstYearOfDesignatedRothContribution',
        'date_of_payment' => 'setDateOfPayment',
        'fatca_filing_requirement' => 'setFatcaFilingRequirement',
        'type' => 'setType',
        'id' => 'setId',
        'issuer_id' => 'setIssuerId',
        'issuer_reference_id' => 'setIssuerReferenceId',
        'issuer_tin' => 'setIssuerTin',
        'tax_year' => 'setTaxYear',
        'reference_id' => 'setReferenceId',
        'tin' => 'setTin',
        'recipient_name' => 'setRecipientName',
        'tin_type' => 'setTinType',
        'recipient_second_name' => 'setRecipientSecondName',
        'address' => 'setAddress',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'email' => 'setEmail',
        'account_number' => 'setAccountNumber',
        'office_code' => 'setOfficeCode',
        'non_us_province' => 'setNonUsProvince',
        'country_code' => 'setCountryCode',
        'federal_efile_date' => 'setFederalEfileDate',
        'postal_mail' => 'setPostalMail',
        'state_efile_date' => 'setStateEfileDate',
        'recipient_edelivery_date' => 'setRecipientEdeliveryDate',
        'tin_match' => 'setTinMatch',
        'no_tin' => 'setNoTin',
        'address_verification' => 'setAddressVerification',
        'state_and_local_withholding' => 'setStateAndLocalWithholding',
        'second_tin_notice' => 'setSecondTinNotice',
        'federal_efile_status' => 'setFederalEfileStatus',
        'state_efile_status' => 'setStateEfileStatus',
        'postal_mail_status' => 'setPostalMailStatus',
        'tin_match_status' => 'setTinMatchStatus',
        'address_verification_status' => 'setAddressVerificationStatus',
        'e_delivery_status' => 'setEDeliveryStatus',
        'validation_errors' => 'setValidationErrors',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gross_distribution' => 'getGrossDistribution',
        'taxable_amount' => 'getTaxableAmount',
        'taxable_amount_not_determined' => 'getTaxableAmountNotDetermined',
        'total_distribution_determined' => 'getTotalDistributionDetermined',
        'capital_gain' => 'getCapitalGain',
        'federal_income_tax_withheld' => 'getFederalIncomeTaxWithheld',
        'employee_contributions_or_designated_roth_or_insurance_premiums' => 'getEmployeeContributionsOrDesignatedRothOrInsurancePremiums',
        'net_unrealized_appreciation_in_employer_securities' => 'getNetUnrealizedAppreciationInEmployerSecurities',
        'distribution_code' => 'getDistributionCode',
        'second_distribution_code' => 'getSecondDistributionCode',
        'ira_sep_simple' => 'getIraSepSimple',
        'traditional_ira_sep_simple_or_roth_conversion_amount' => 'getTraditionalIraSepSimpleOrRothConversionAmount',
        'other_amount' => 'getOtherAmount',
        'other_percentage' => 'getOtherPercentage',
        'total_distribution_percentage' => 'getTotalDistributionPercentage',
        'total_employee_contributions' => 'getTotalEmployeeContributions',
        'amount_allocable_to_irr_within5_years' => 'getAmountAllocableToIrrWithin5Years',
        'first_year_of_designated_roth_contribution' => 'getFirstYearOfDesignatedRothContribution',
        'date_of_payment' => 'getDateOfPayment',
        'fatca_filing_requirement' => 'getFatcaFilingRequirement',
        'type' => 'getType',
        'id' => 'getId',
        'issuer_id' => 'getIssuerId',
        'issuer_reference_id' => 'getIssuerReferenceId',
        'issuer_tin' => 'getIssuerTin',
        'tax_year' => 'getTaxYear',
        'reference_id' => 'getReferenceId',
        'tin' => 'getTin',
        'recipient_name' => 'getRecipientName',
        'tin_type' => 'getTinType',
        'recipient_second_name' => 'getRecipientSecondName',
        'address' => 'getAddress',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'email' => 'getEmail',
        'account_number' => 'getAccountNumber',
        'office_code' => 'getOfficeCode',
        'non_us_province' => 'getNonUsProvince',
        'country_code' => 'getCountryCode',
        'federal_efile_date' => 'getFederalEfileDate',
        'postal_mail' => 'getPostalMail',
        'state_efile_date' => 'getStateEfileDate',
        'recipient_edelivery_date' => 'getRecipientEdeliveryDate',
        'tin_match' => 'getTinMatch',
        'no_tin' => 'getNoTin',
        'address_verification' => 'getAddressVerification',
        'state_and_local_withholding' => 'getStateAndLocalWithholding',
        'second_tin_notice' => 'getSecondTinNotice',
        'federal_efile_status' => 'getFederalEfileStatus',
        'state_efile_status' => 'getStateEfileStatus',
        'postal_mail_status' => 'getPostalMailStatus',
        'tin_match_status' => 'getTinMatchStatus',
        'address_verification_status' => 'getAddressVerificationStatus',
        'e_delivery_status' => 'getEDeliveryStatus',
        'validation_errors' => 'getValidationErrors',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DISTRIBUTION_CODE__1 = '1';
    const DISTRIBUTION_CODE__2 = '2';
    const DISTRIBUTION_CODE__3 = '3';
    const DISTRIBUTION_CODE__4 = '4';
    const DISTRIBUTION_CODE__5 = '5';
    const DISTRIBUTION_CODE__6 = '6';
    const DISTRIBUTION_CODE__7 = '7';
    const DISTRIBUTION_CODE__8 = '8';
    const DISTRIBUTION_CODE__9 = '9';
    const DISTRIBUTION_CODE_A = 'A';
    const DISTRIBUTION_CODE_B = 'B';
    const DISTRIBUTION_CODE_C = 'C';
    const DISTRIBUTION_CODE_D = 'D';
    const DISTRIBUTION_CODE_E = 'E';
    const DISTRIBUTION_CODE_F = 'F';
    const DISTRIBUTION_CODE_G = 'G';
    const DISTRIBUTION_CODE_H = 'H';
    const DISTRIBUTION_CODE_J = 'J';
    const DISTRIBUTION_CODE_K = 'K';
    const DISTRIBUTION_CODE_L = 'L';
    const DISTRIBUTION_CODE_M = 'M';
    const DISTRIBUTION_CODE_N = 'N';
    const DISTRIBUTION_CODE_P = 'P';
    const DISTRIBUTION_CODE_Q = 'Q';
    const DISTRIBUTION_CODE_R = 'R';
    const DISTRIBUTION_CODE_S = 'S';
    const DISTRIBUTION_CODE_T = 'T';
    const DISTRIBUTION_CODE_U = 'U';
    const DISTRIBUTION_CODE_W = 'W';
    const SECOND_DISTRIBUTION_CODE__1 = '1';
    const SECOND_DISTRIBUTION_CODE__2 = '2';
    const SECOND_DISTRIBUTION_CODE__3 = '3';
    const SECOND_DISTRIBUTION_CODE__4 = '4';
    const SECOND_DISTRIBUTION_CODE__5 = '5';
    const SECOND_DISTRIBUTION_CODE__6 = '6';
    const SECOND_DISTRIBUTION_CODE__7 = '7';
    const SECOND_DISTRIBUTION_CODE__8 = '8';
    const SECOND_DISTRIBUTION_CODE__9 = '9';
    const SECOND_DISTRIBUTION_CODE_A = 'A';
    const SECOND_DISTRIBUTION_CODE_B = 'B';
    const SECOND_DISTRIBUTION_CODE_C = 'C';
    const SECOND_DISTRIBUTION_CODE_D = 'D';
    const SECOND_DISTRIBUTION_CODE_E = 'E';
    const SECOND_DISTRIBUTION_CODE_F = 'F';
    const SECOND_DISTRIBUTION_CODE_G = 'G';
    const SECOND_DISTRIBUTION_CODE_H = 'H';
    const SECOND_DISTRIBUTION_CODE_J = 'J';
    const SECOND_DISTRIBUTION_CODE_K = 'K';
    const SECOND_DISTRIBUTION_CODE_L = 'L';
    const SECOND_DISTRIBUTION_CODE_M = 'M';
    const SECOND_DISTRIBUTION_CODE_N = 'N';
    const SECOND_DISTRIBUTION_CODE_P = 'P';
    const SECOND_DISTRIBUTION_CODE_Q = 'Q';
    const SECOND_DISTRIBUTION_CODE_R = 'R';
    const SECOND_DISTRIBUTION_CODE_S = 'S';
    const SECOND_DISTRIBUTION_CODE_T = 'T';
    const SECOND_DISTRIBUTION_CODE_U = 'U';
    const SECOND_DISTRIBUTION_CODE_W = 'W';
    const TYPE_FORM1099_NEC = 'Form1099Nec';
    const TYPE_FORM1099_MISC = 'Form1099Misc';
    const TYPE_FORM1099_DIV = 'Form1099Div';
    const TYPE_FORM1099_R = 'Form1099R';
    const TYPE_FORM1099_K = 'Form1099K';
    const TYPE_FORM1095_B = 'Form1095B';
    const TYPE_FORM1042_S = 'Form1042S';
    const TYPE_FORM1095_C = 'Form1095C';
    const TYPE_FORM1099_INT = 'Form1099Int';
    const TIN_TYPE_EIN = 'EIN';
    const TIN_TYPE_SSN = 'SSN';
    const TIN_TYPE_ITIN = 'ITIN';
    const TIN_TYPE_ATIN = 'ATIN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDistributionCodeAllowableValues()
    {
        return [
            self::DISTRIBUTION_CODE__1,
            self::DISTRIBUTION_CODE__2,
            self::DISTRIBUTION_CODE__3,
            self::DISTRIBUTION_CODE__4,
            self::DISTRIBUTION_CODE__5,
            self::DISTRIBUTION_CODE__6,
            self::DISTRIBUTION_CODE__7,
            self::DISTRIBUTION_CODE__8,
            self::DISTRIBUTION_CODE__9,
            self::DISTRIBUTION_CODE_A,
            self::DISTRIBUTION_CODE_B,
            self::DISTRIBUTION_CODE_C,
            self::DISTRIBUTION_CODE_D,
            self::DISTRIBUTION_CODE_E,
            self::DISTRIBUTION_CODE_F,
            self::DISTRIBUTION_CODE_G,
            self::DISTRIBUTION_CODE_H,
            self::DISTRIBUTION_CODE_J,
            self::DISTRIBUTION_CODE_K,
            self::DISTRIBUTION_CODE_L,
            self::DISTRIBUTION_CODE_M,
            self::DISTRIBUTION_CODE_N,
            self::DISTRIBUTION_CODE_P,
            self::DISTRIBUTION_CODE_Q,
            self::DISTRIBUTION_CODE_R,
            self::DISTRIBUTION_CODE_S,
            self::DISTRIBUTION_CODE_T,
            self::DISTRIBUTION_CODE_U,
            self::DISTRIBUTION_CODE_W,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecondDistributionCodeAllowableValues()
    {
        return [
            self::SECOND_DISTRIBUTION_CODE__1,
            self::SECOND_DISTRIBUTION_CODE__2,
            self::SECOND_DISTRIBUTION_CODE__3,
            self::SECOND_DISTRIBUTION_CODE__4,
            self::SECOND_DISTRIBUTION_CODE__5,
            self::SECOND_DISTRIBUTION_CODE__6,
            self::SECOND_DISTRIBUTION_CODE__7,
            self::SECOND_DISTRIBUTION_CODE__8,
            self::SECOND_DISTRIBUTION_CODE__9,
            self::SECOND_DISTRIBUTION_CODE_A,
            self::SECOND_DISTRIBUTION_CODE_B,
            self::SECOND_DISTRIBUTION_CODE_C,
            self::SECOND_DISTRIBUTION_CODE_D,
            self::SECOND_DISTRIBUTION_CODE_E,
            self::SECOND_DISTRIBUTION_CODE_F,
            self::SECOND_DISTRIBUTION_CODE_G,
            self::SECOND_DISTRIBUTION_CODE_H,
            self::SECOND_DISTRIBUTION_CODE_J,
            self::SECOND_DISTRIBUTION_CODE_K,
            self::SECOND_DISTRIBUTION_CODE_L,
            self::SECOND_DISTRIBUTION_CODE_M,
            self::SECOND_DISTRIBUTION_CODE_N,
            self::SECOND_DISTRIBUTION_CODE_P,
            self::SECOND_DISTRIBUTION_CODE_Q,
            self::SECOND_DISTRIBUTION_CODE_R,
            self::SECOND_DISTRIBUTION_CODE_S,
            self::SECOND_DISTRIBUTION_CODE_T,
            self::SECOND_DISTRIBUTION_CODE_U,
            self::SECOND_DISTRIBUTION_CODE_W,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FORM1099_NEC,
            self::TYPE_FORM1099_MISC,
            self::TYPE_FORM1099_DIV,
            self::TYPE_FORM1099_R,
            self::TYPE_FORM1099_K,
            self::TYPE_FORM1095_B,
            self::TYPE_FORM1042_S,
            self::TYPE_FORM1095_C,
            self::TYPE_FORM1099_INT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTinTypeAllowableValues()
    {
        return [
            self::TIN_TYPE_EIN,
            self::TIN_TYPE_SSN,
            self::TIN_TYPE_ITIN,
            self::TIN_TYPE_ATIN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gross_distribution'] = $data['gross_distribution'] ?? null;
        $this->container['taxable_amount'] = $data['taxable_amount'] ?? null;
        $this->container['taxable_amount_not_determined'] = $data['taxable_amount_not_determined'] ?? null;
        $this->container['total_distribution_determined'] = $data['total_distribution_determined'] ?? null;
        $this->container['capital_gain'] = $data['capital_gain'] ?? null;
        $this->container['federal_income_tax_withheld'] = $data['federal_income_tax_withheld'] ?? null;
        $this->container['employee_contributions_or_designated_roth_or_insurance_premiums'] = $data['employee_contributions_or_designated_roth_or_insurance_premiums'] ?? null;
        $this->container['net_unrealized_appreciation_in_employer_securities'] = $data['net_unrealized_appreciation_in_employer_securities'] ?? null;
        $this->container['distribution_code'] = $data['distribution_code'] ?? null;
        $this->container['second_distribution_code'] = $data['second_distribution_code'] ?? null;
        $this->container['ira_sep_simple'] = $data['ira_sep_simple'] ?? null;
        $this->container['traditional_ira_sep_simple_or_roth_conversion_amount'] = $data['traditional_ira_sep_simple_or_roth_conversion_amount'] ?? null;
        $this->container['other_amount'] = $data['other_amount'] ?? null;
        $this->container['other_percentage'] = $data['other_percentage'] ?? null;
        $this->container['total_distribution_percentage'] = $data['total_distribution_percentage'] ?? null;
        $this->container['total_employee_contributions'] = $data['total_employee_contributions'] ?? null;
        $this->container['amount_allocable_to_irr_within5_years'] = $data['amount_allocable_to_irr_within5_years'] ?? null;
        $this->container['first_year_of_designated_roth_contribution'] = $data['first_year_of_designated_roth_contribution'] ?? null;
        $this->container['date_of_payment'] = $data['date_of_payment'] ?? null;
        $this->container['fatca_filing_requirement'] = $data['fatca_filing_requirement'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['issuer_id'] = $data['issuer_id'] ?? null;
        $this->container['issuer_reference_id'] = $data['issuer_reference_id'] ?? null;
        $this->container['issuer_tin'] = $data['issuer_tin'] ?? null;
        $this->container['tax_year'] = $data['tax_year'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['tin'] = $data['tin'] ?? null;
        $this->container['recipient_name'] = $data['recipient_name'] ?? null;
        $this->container['tin_type'] = $data['tin_type'] ?? null;
        $this->container['recipient_second_name'] = $data['recipient_second_name'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['address2'] = $data['address2'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['office_code'] = $data['office_code'] ?? null;
        $this->container['non_us_province'] = $data['non_us_province'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['federal_efile_date'] = $data['federal_efile_date'] ?? null;
        $this->container['postal_mail'] = $data['postal_mail'] ?? null;
        $this->container['state_efile_date'] = $data['state_efile_date'] ?? null;
        $this->container['recipient_edelivery_date'] = $data['recipient_edelivery_date'] ?? null;
        $this->container['tin_match'] = $data['tin_match'] ?? null;
        $this->container['no_tin'] = $data['no_tin'] ?? null;
        $this->container['address_verification'] = $data['address_verification'] ?? null;
        $this->container['state_and_local_withholding'] = $data['state_and_local_withholding'] ?? null;
        $this->container['second_tin_notice'] = $data['second_tin_notice'] ?? null;
        $this->container['federal_efile_status'] = $data['federal_efile_status'] ?? null;
        $this->container['state_efile_status'] = $data['state_efile_status'] ?? null;
        $this->container['postal_mail_status'] = $data['postal_mail_status'] ?? null;
        $this->container['tin_match_status'] = $data['tin_match_status'] ?? null;
        $this->container['address_verification_status'] = $data['address_verification_status'] ?? null;
        $this->container['e_delivery_status'] = $data['e_delivery_status'] ?? null;
        $this->container['validation_errors'] = $data['validation_errors'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['distribution_code'] === null) {
            $invalidProperties[] = "'distribution_code' can't be null";
        }
        $allowedValues = $this->getDistributionCodeAllowableValues();
        if (!is_null($this->container['distribution_code']) && !in_array($this->container['distribution_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'distribution_code', must be one of '%s'",
                $this->container['distribution_code'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecondDistributionCodeAllowableValues();
        if (!is_null($this->container['second_distribution_code']) && !in_array($this->container['second_distribution_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'second_distribution_code', must be one of '%s'",
                $this->container['second_distribution_code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['recipient_name'] === null) {
            $invalidProperties[] = "'recipient_name' can't be null";
        }
        $allowedValues = $this->getTinTypeAllowableValues();
        if (!is_null($this->container['tin_type']) && !in_array($this->container['tin_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tin_type', must be one of '%s'",
                $this->container['tin_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gross_distribution
     *
     * @return float|null
     */
    public function getGrossDistribution()
    {
        return $this->container['gross_distribution'];
    }

    /**
     * Sets gross_distribution
     *
     * @param float|null $gross_distribution Gross distribution
     *
     * @return self
     */
    public function setGrossDistribution($gross_distribution)
    {
        $this->container['gross_distribution'] = $gross_distribution;

        return $this;
    }

    /**
     * Gets taxable_amount
     *
     * @return float|null
     */
    public function getTaxableAmount()
    {
        return $this->container['taxable_amount'];
    }

    /**
     * Sets taxable_amount
     *
     * @param float|null $taxable_amount Taxable amount
     *
     * @return self
     */
    public function setTaxableAmount($taxable_amount)
    {
        $this->container['taxable_amount'] = $taxable_amount;

        return $this;
    }

    /**
     * Gets taxable_amount_not_determined
     *
     * @return bool|null
     */
    public function getTaxableAmountNotDetermined()
    {
        return $this->container['taxable_amount_not_determined'];
    }

    /**
     * Sets taxable_amount_not_determined
     *
     * @param bool|null $taxable_amount_not_determined Taxable amount not determined
     *
     * @return self
     */
    public function setTaxableAmountNotDetermined($taxable_amount_not_determined)
    {
        $this->container['taxable_amount_not_determined'] = $taxable_amount_not_determined;

        return $this;
    }

    /**
     * Gets total_distribution_determined
     *
     * @return bool|null
     */
    public function getTotalDistributionDetermined()
    {
        return $this->container['total_distribution_determined'];
    }

    /**
     * Sets total_distribution_determined
     *
     * @param bool|null $total_distribution_determined Total distribution
     *
     * @return self
     */
    public function setTotalDistributionDetermined($total_distribution_determined)
    {
        $this->container['total_distribution_determined'] = $total_distribution_determined;

        return $this;
    }

    /**
     * Gets capital_gain
     *
     * @return float|null
     */
    public function getCapitalGain()
    {
        return $this->container['capital_gain'];
    }

    /**
     * Sets capital_gain
     *
     * @param float|null $capital_gain Capital gain (included in Box 2a)
     *
     * @return self
     */
    public function setCapitalGain($capital_gain)
    {
        $this->container['capital_gain'] = $capital_gain;

        return $this;
    }

    /**
     * Gets federal_income_tax_withheld
     *
     * @return float|null
     */
    public function getFederalIncomeTaxWithheld()
    {
        return $this->container['federal_income_tax_withheld'];
    }

    /**
     * Sets federal_income_tax_withheld
     *
     * @param float|null $federal_income_tax_withheld Federal income tax withheld
     *
     * @return self
     */
    public function setFederalIncomeTaxWithheld($federal_income_tax_withheld)
    {
        $this->container['federal_income_tax_withheld'] = $federal_income_tax_withheld;

        return $this;
    }

    /**
     * Gets employee_contributions_or_designated_roth_or_insurance_premiums
     *
     * @return float|null
     */
    public function getEmployeeContributionsOrDesignatedRothOrInsurancePremiums()
    {
        return $this->container['employee_contributions_or_designated_roth_or_insurance_premiums'];
    }

    /**
     * Sets employee_contributions_or_designated_roth_or_insurance_premiums
     *
     * @param float|null $employee_contributions_or_designated_roth_or_insurance_premiums Employee contributions/Designated Roth contributions or insurance premiums
     *
     * @return self
     */
    public function setEmployeeContributionsOrDesignatedRothOrInsurancePremiums($employee_contributions_or_designated_roth_or_insurance_premiums)
    {
        $this->container['employee_contributions_or_designated_roth_or_insurance_premiums'] = $employee_contributions_or_designated_roth_or_insurance_premiums;

        return $this;
    }

    /**
     * Gets net_unrealized_appreciation_in_employer_securities
     *
     * @return float|null
     */
    public function getNetUnrealizedAppreciationInEmployerSecurities()
    {
        return $this->container['net_unrealized_appreciation_in_employer_securities'];
    }

    /**
     * Sets net_unrealized_appreciation_in_employer_securities
     *
     * @param float|null $net_unrealized_appreciation_in_employer_securities Net unrealized appreciation in employer's securities
     *
     * @return self
     */
    public function setNetUnrealizedAppreciationInEmployerSecurities($net_unrealized_appreciation_in_employer_securities)
    {
        $this->container['net_unrealized_appreciation_in_employer_securities'] = $net_unrealized_appreciation_in_employer_securities;

        return $this;
    }

    /**
     * Gets distribution_code
     *
     * @return string
     */
    public function getDistributionCode()
    {
        return $this->container['distribution_code'];
    }

    /**
     * Sets distribution_code
     *
     * @param string $distribution_code Distribution code.    Available values:  - 1: Early distribution, no known exception (in most cases, under age 59½)  - 2: Early distribution, exception applies (under age 59½)  - 3: Disability  - 4: Death  - 5: Prohibited transaction  - 6: Section 1035 exchange (a tax-free exchange of life insurance, annuity, qualified long-term care insurance, or endowment contracts)  - 7: Normal distribution  - 8: Excess contributions plus earnings/excess deferrals (and/or earnings) taxable in payment year  - 9: Cost of current life insurance protection (premiums paid by a trustee or custodian for current insurance protection)  - A: May be eligible for 10-year tax option  - B: Designated Roth account distribution  - C: Reportable Death Benefits Under Section 6050Y(c)  - D: Annuity payments from nonqualified annuity payments and distributions from life insurance contracts that may be subject to tax under section 1411  - E: Distribution under Employee Plans Compliance Resolution System (EPCRS)  - F: Charitable gift annuity  - G: Direct rollover and rollover contribution  - H: Direct rollover of distribution from a designated Roth account to a Roth IRA  - J: Early distribution from a Roth IRA (This code may be used with a Code 8 or P)  - K: Distribution of IRA Assets Not Having A Readily Available FMV  - L: Loans treated as deemed distributions under section 72(p)  - M: Qualified Plan Loan Offsets  - N: Recharacterized IRA contribution made for year following payment year  - P: Excess contributions plus earnings/excess deferrals taxable for year prior to payment year  - Q: Qualified distribution from a Roth IRA (Distribution from a Roth IRA when the 5-year holding period has been met, and the recipient has reached 59½, has died, or is disabled)  - R: Recharacterized IRA contribution made for year prior to payment year  - S: Early distribution from a SIMPLE IRA in first 2 years no known exceptions  - T: Roth IRA distribution exception applies because participant has reached 59½, died or is disabled, but it is unknown if the 5-year period has been met  - U: Distribution from ESOP under Section 404(k)  - W: Charges or payments for purchasing qualified long-term care insurance contracts under combined arrangements
     *
     * @return self
     */
    public function setDistributionCode($distribution_code)
    {
        $allowedValues = $this->getDistributionCodeAllowableValues();
        if (!in_array($distribution_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'distribution_code', must be one of '%s'",
                    $distribution_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['distribution_code'] = $distribution_code;

        return $this;
    }

    /**
     * Gets second_distribution_code
     *
     * @return string|null
     */
    public function getSecondDistributionCode()
    {
        return $this->container['second_distribution_code'];
    }

    /**
     * Sets second_distribution_code
     *
     * @param string|null $second_distribution_code Second distribution code. Must be a valid combination with the first distribution code.  See DistributionCode property documentation for code descriptions.    Valid combinations based on first distribution codeindicates no second distribution code)    (format: firstDistributionCode: availableSecondDistributionCodes)
     *
     * @return self
     */
    public function setSecondDistributionCode($second_distribution_code)
    {
        $allowedValues = $this->getSecondDistributionCodeAllowableValues();
        if (!is_null($second_distribution_code) && !in_array($second_distribution_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'second_distribution_code', must be one of '%s'",
                    $second_distribution_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['second_distribution_code'] = $second_distribution_code;

        return $this;
    }

    /**
     * Gets ira_sep_simple
     *
     * @return bool|null
     */
    public function getIraSepSimple()
    {
        return $this->container['ira_sep_simple'];
    }

    /**
     * Sets ira_sep_simple
     *
     * @param bool|null $ira_sep_simple IRA/SEP/SIMPLE
     *
     * @return self
     */
    public function setIraSepSimple($ira_sep_simple)
    {
        $this->container['ira_sep_simple'] = $ira_sep_simple;

        return $this;
    }

    /**
     * Gets traditional_ira_sep_simple_or_roth_conversion_amount
     *
     * @return float|null
     */
    public function getTraditionalIraSepSimpleOrRothConversionAmount()
    {
        return $this->container['traditional_ira_sep_simple_or_roth_conversion_amount'];
    }

    /**
     * Sets traditional_ira_sep_simple_or_roth_conversion_amount
     *
     * @param float|null $traditional_ira_sep_simple_or_roth_conversion_amount Traditional IRA/SEP/SIMPLE or Roth conversion amount
     *
     * @return self
     */
    public function setTraditionalIraSepSimpleOrRothConversionAmount($traditional_ira_sep_simple_or_roth_conversion_amount)
    {
        $this->container['traditional_ira_sep_simple_or_roth_conversion_amount'] = $traditional_ira_sep_simple_or_roth_conversion_amount;

        return $this;
    }

    /**
     * Gets other_amount
     *
     * @return float|null
     */
    public function getOtherAmount()
    {
        return $this->container['other_amount'];
    }

    /**
     * Sets other_amount
     *
     * @param float|null $other_amount Other amount
     *
     * @return self
     */
    public function setOtherAmount($other_amount)
    {
        $this->container['other_amount'] = $other_amount;

        return $this;
    }

    /**
     * Gets other_percentage
     *
     * @return string|null
     */
    public function getOtherPercentage()
    {
        return $this->container['other_percentage'];
    }

    /**
     * Sets other_percentage
     *
     * @param string|null $other_percentage Other percentage
     *
     * @return self
     */
    public function setOtherPercentage($other_percentage)
    {
        $this->container['other_percentage'] = $other_percentage;

        return $this;
    }

    /**
     * Gets total_distribution_percentage
     *
     * @return string|null
     */
    public function getTotalDistributionPercentage()
    {
        return $this->container['total_distribution_percentage'];
    }

    /**
     * Sets total_distribution_percentage
     *
     * @param string|null $total_distribution_percentage Total distribution percentage
     *
     * @return self
     */
    public function setTotalDistributionPercentage($total_distribution_percentage)
    {
        $this->container['total_distribution_percentage'] = $total_distribution_percentage;

        return $this;
    }

    /**
     * Gets total_employee_contributions
     *
     * @return float|null
     */
    public function getTotalEmployeeContributions()
    {
        return $this->container['total_employee_contributions'];
    }

    /**
     * Sets total_employee_contributions
     *
     * @param float|null $total_employee_contributions Total employee contributions
     *
     * @return self
     */
    public function setTotalEmployeeContributions($total_employee_contributions)
    {
        $this->container['total_employee_contributions'] = $total_employee_contributions;

        return $this;
    }

    /**
     * Gets amount_allocable_to_irr_within5_years
     *
     * @return float|null
     */
    public function getAmountAllocableToIrrWithin5Years()
    {
        return $this->container['amount_allocable_to_irr_within5_years'];
    }

    /**
     * Sets amount_allocable_to_irr_within5_years
     *
     * @param float|null $amount_allocable_to_irr_within5_years Amount allocable to IRR within 5 years
     *
     * @return self
     */
    public function setAmountAllocableToIrrWithin5Years($amount_allocable_to_irr_within5_years)
    {
        $this->container['amount_allocable_to_irr_within5_years'] = $amount_allocable_to_irr_within5_years;

        return $this;
    }

    /**
     * Gets first_year_of_designated_roth_contribution
     *
     * @return string|null
     */
    public function getFirstYearOfDesignatedRothContribution()
    {
        return $this->container['first_year_of_designated_roth_contribution'];
    }

    /**
     * Sets first_year_of_designated_roth_contribution
     *
     * @param string|null $first_year_of_designated_roth_contribution First year of designated Roth contribution
     *
     * @return self
     */
    public function setFirstYearOfDesignatedRothContribution($first_year_of_designated_roth_contribution)
    {
        $this->container['first_year_of_designated_roth_contribution'] = $first_year_of_designated_roth_contribution;

        return $this;
    }

    /**
     * Gets date_of_payment
     *
     * @return \DateTime|null
     */
    public function getDateOfPayment()
    {
        return $this->container['date_of_payment'];
    }

    /**
     * Sets date_of_payment
     *
     * @param \DateTime|null $date_of_payment Date of payment
     *
     * @return self
     */
    public function setDateOfPayment($date_of_payment)
    {
        $this->container['date_of_payment'] = $date_of_payment;

        return $this;
    }

    /**
     * Gets fatca_filing_requirement
     *
     * @return bool|null
     */
    public function getFatcaFilingRequirement()
    {
        return $this->container['fatca_filing_requirement'];
    }

    /**
     * Sets fatca_filing_requirement
     *
     * @param bool|null $fatca_filing_requirement FATCA filing requirement.
     *
     * @return self
     */
    public function setFatcaFilingRequirement($fatca_filing_requirement)
    {
        $this->container['fatca_filing_requirement'] = $fatca_filing_requirement;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Form type.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Form ID. Unique identifier set when the record is created.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets issuer_id
     *
     * @return string|null
     */
    public function getIssuerId()
    {
        return $this->container['issuer_id'];
    }

    /**
     * Sets issuer_id
     *
     * @param string|null $issuer_id Issuer ID - only required when creating forms
     *
     * @return self
     */
    public function setIssuerId($issuer_id)
    {
        $this->container['issuer_id'] = $issuer_id;

        return $this;
    }

    /**
     * Gets issuer_reference_id
     *
     * @return string|null
     */
    public function getIssuerReferenceId()
    {
        return $this->container['issuer_reference_id'];
    }

    /**
     * Sets issuer_reference_id
     *
     * @param string|null $issuer_reference_id Issuer Reference ID - only required when creating forms via $bulk-upsert
     *
     * @return self
     */
    public function setIssuerReferenceId($issuer_reference_id)
    {
        $this->container['issuer_reference_id'] = $issuer_reference_id;

        return $this;
    }

    /**
     * Gets issuer_tin
     *
     * @return string|null
     */
    public function getIssuerTin()
    {
        return $this->container['issuer_tin'];
    }

    /**
     * Sets issuer_tin
     *
     * @param string|null $issuer_tin Issuer TIN - readonly
     *
     * @return self
     */
    public function setIssuerTin($issuer_tin)
    {
        $this->container['issuer_tin'] = $issuer_tin;

        return $this;
    }

    /**
     * Gets tax_year
     *
     * @return int|null
     */
    public function getTaxYear()
    {
        return $this->container['tax_year'];
    }

    /**
     * Sets tax_year
     *
     * @param int|null $tax_year Tax Year - only required when creating forms via $bulk-upsert
     *
     * @return self
     */
    public function setTaxYear($tax_year)
    {
        $this->container['tax_year'] = $tax_year;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id Internal reference ID. Never shown to any agency or recipient.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets tin
     *
     * @return string|null
     */
    public function getTin()
    {
        return $this->container['tin'];
    }

    /**
     * Sets tin
     *
     * @param string|null $tin Recipient's Federal Tax Identification Number (TIN).
     *
     * @return self
     */
    public function setTin($tin)
    {
        $this->container['tin'] = $tin;

        return $this;
    }

    /**
     * Gets recipient_name
     *
     * @return string
     */
    public function getRecipientName()
    {
        return $this->container['recipient_name'];
    }

    /**
     * Sets recipient_name
     *
     * @param string $recipient_name Recipient name
     *
     * @return self
     */
    public function setRecipientName($recipient_name)
    {
        $this->container['recipient_name'] = $recipient_name;

        return $this;
    }

    /**
     * Gets tin_type
     *
     * @return string|null
     */
    public function getTinType()
    {
        return $this->container['tin_type'];
    }

    /**
     * Sets tin_type
     *
     * @param string|null $tin_type Tax Identification Number (TIN) type.  Available values: - EIN: Employer Identification Number - SSN: Social Security Number - ITIN: Individual Taxpayer Identification Number - ATIN: Adoption Taxpayer Identification Number
     *
     * @return self
     */
    public function setTinType($tin_type)
    {
        $allowedValues = $this->getTinTypeAllowableValues();
        if (!is_null($tin_type) && !in_array($tin_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tin_type', must be one of '%s'",
                    $tin_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tin_type'] = $tin_type;

        return $this;
    }

    /**
     * Gets recipient_second_name
     *
     * @return string|null
     */
    public function getRecipientSecondName()
    {
        return $this->container['recipient_second_name'];
    }

    /**
     * Sets recipient_second_name
     *
     * @param string|null $recipient_second_name Recipient second name
     *
     * @return self
     */
    public function setRecipientSecondName($recipient_second_name)
    {
        $this->container['recipient_second_name'] = $recipient_second_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Address.
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Address line 2.
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City.
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state Two-letter US state or Canadian province code (required for US/CA addresses).
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip ZIP/postal code.
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Recipient's Contact email address.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number Account number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets office_code
     *
     * @return string|null
     */
    public function getOfficeCode()
    {
        return $this->container['office_code'];
    }

    /**
     * Sets office_code
     *
     * @param string|null $office_code Office code
     *
     * @return self
     */
    public function setOfficeCode($office_code)
    {
        $this->container['office_code'] = $office_code;

        return $this;
    }

    /**
     * Gets non_us_province
     *
     * @return string|null
     */
    public function getNonUsProvince()
    {
        return $this->container['non_us_province'];
    }

    /**
     * Sets non_us_province
     *
     * @param string|null $non_us_province Province or region for non-US/CA addresses.
     *
     * @return self
     */
    public function setNonUsProvince($non_us_province)
    {
        $this->container['non_us_province'] = $non_us_province;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Two-letter IRS country code (e.g., 'US', 'CA'), as defined at https://www.irs.gov/e-file-providers/country-codes.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets federal_efile_date
     *
     * @return \DateTime|null
     */
    public function getFederalEfileDate()
    {
        return $this->container['federal_efile_date'];
    }

    /**
     * Sets federal_efile_date
     *
     * @param \DateTime|null $federal_efile_date Date when federal e-filing should be scheduled. If set between current date and beginning of blackout period, scheduled to that date. If in the past or blackout period, scheduled to next available date. For blackout period information, see https://www.track1099.com/info/IRS_info. Set to null to leave unscheduled.
     *
     * @return self
     */
    public function setFederalEfileDate($federal_efile_date)
    {
        $this->container['federal_efile_date'] = $federal_efile_date;

        return $this;
    }

    /**
     * Gets postal_mail
     *
     * @return bool|null
     */
    public function getPostalMail()
    {
        return $this->container['postal_mail'];
    }

    /**
     * Sets postal_mail
     *
     * @param bool|null $postal_mail Boolean indicating that postal mailing to the recipient should be scheduled for this form
     *
     * @return self
     */
    public function setPostalMail($postal_mail)
    {
        $this->container['postal_mail'] = $postal_mail;

        return $this;
    }

    /**
     * Gets state_efile_date
     *
     * @return \DateTime|null
     */
    public function getStateEfileDate()
    {
        return $this->container['state_efile_date'];
    }

    /**
     * Sets state_efile_date
     *
     * @param \DateTime|null $state_efile_date Date when state e-filing should be scheduled. Must be on or after federalEfileDate. If set between current date and beginning of blackout period, scheduled to that date. If in the past or blackout period, scheduled to next available date. For blackout period information, see https://www.track1099.com/info/IRS_info. Set to null to leave unscheduled.
     *
     * @return self
     */
    public function setStateEfileDate($state_efile_date)
    {
        $this->container['state_efile_date'] = $state_efile_date;

        return $this;
    }

    /**
     * Gets recipient_edelivery_date
     *
     * @return \DateTime|null
     */
    public function getRecipientEdeliveryDate()
    {
        return $this->container['recipient_edelivery_date'];
    }

    /**
     * Sets recipient_edelivery_date
     *
     * @param \DateTime|null $recipient_edelivery_date Date when recipient e-delivery should be scheduled. If set between current date and beginning of blackout period, scheduled to that date. If in the past or blackout period, scheduled to next available date. For blackout period information, see https://www.track1099.com/info/IRS_info. Set to null to leave unscheduled.
     *
     * @return self
     */
    public function setRecipientEdeliveryDate($recipient_edelivery_date)
    {
        $this->container['recipient_edelivery_date'] = $recipient_edelivery_date;

        return $this;
    }

    /**
     * Gets tin_match
     *
     * @return bool|null
     */
    public function getTinMatch()
    {
        return $this->container['tin_match'];
    }

    /**
     * Sets tin_match
     *
     * @param bool|null $tin_match Boolean indicating that TIN Matching should be scheduled for this form
     *
     * @return self
     */
    public function setTinMatch($tin_match)
    {
        $this->container['tin_match'] = $tin_match;

        return $this;
    }

    /**
     * Gets no_tin
     *
     * @return bool|null
     */
    public function getNoTin()
    {
        return $this->container['no_tin'];
    }

    /**
     * Sets no_tin
     *
     * @param bool|null $no_tin No TIN indicator
     *
     * @return self
     */
    public function setNoTin($no_tin)
    {
        $this->container['no_tin'] = $no_tin;

        return $this;
    }

    /**
     * Gets address_verification
     *
     * @return bool|null
     */
    public function getAddressVerification()
    {
        return $this->container['address_verification'];
    }

    /**
     * Sets address_verification
     *
     * @param bool|null $address_verification Boolean indicating that address verification should be scheduled for this form
     *
     * @return self
     */
    public function setAddressVerification($address_verification)
    {
        $this->container['address_verification'] = $address_verification;

        return $this;
    }

    /**
     * Gets state_and_local_withholding
     *
     * @return \Avalara\SDK\Model\A1099\V2\StateAndLocalWithholding|null
     */
    public function getStateAndLocalWithholding()
    {
        return $this->container['state_and_local_withholding'];
    }

    /**
     * Sets state_and_local_withholding
     *
     * @param \Avalara\SDK\Model\A1099\V2\StateAndLocalWithholding|null $state_and_local_withholding State and local withholding information
     *
     * @return self
     */
    public function setStateAndLocalWithholding($state_and_local_withholding)
    {
        $this->container['state_and_local_withholding'] = $state_and_local_withholding;

        return $this;
    }

    /**
     * Gets second_tin_notice
     *
     * @return bool|null
     */
    public function getSecondTinNotice()
    {
        return $this->container['second_tin_notice'];
    }

    /**
     * Sets second_tin_notice
     *
     * @param bool|null $second_tin_notice Second TIN notice
     *
     * @return self
     */
    public function setSecondTinNotice($second_tin_notice)
    {
        $this->container['second_tin_notice'] = $second_tin_notice;

        return $this;
    }

    /**
     * Gets federal_efile_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null
     */
    public function getFederalEfileStatus()
    {
        return $this->container['federal_efile_status'];
    }

    /**
     * Sets federal_efile_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null $federal_efile_status Federal e-file status.  Available values:  - unscheduled: Form has not been scheduled for federal e-filing  - scheduled: Form is scheduled for federal e-filing  - airlock: Form is in process of being uploaded to the IRS (forms exist in this state for a very short period and cannot be updated while in this state)  - sent: Form has been sent to the IRS  - accepted: Form was accepted by the IRS  - corrected_scheduled: Correction is scheduled to be sent  - corrected_airlock: Correction is in process of being uploaded to the IRS (forms exist in this state for a very short period and cannot be updated while in this state)  - corrected: A correction has been sent to the IRS  - corrected_accepted: Correction was accepted by the IRS  - rejected: Form was rejected by the IRS  - corrected_rejected: Correction was rejected by the IRS  - held: Form is held and will not be submitted to IRS (used for certain forms submitted only to states)
     *
     * @return self
     */
    public function setFederalEfileStatus($federal_efile_status)
    {
        $this->container['federal_efile_status'] = $federal_efile_status;

        return $this;
    }

    /**
     * Gets state_efile_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\StateEfileStatusDetail[]|null
     */
    public function getStateEfileStatus()
    {
        return $this->container['state_efile_status'];
    }

    /**
     * Sets state_efile_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\StateEfileStatusDetail[]|null $state_efile_status State e-file status.  Available values:  - unscheduled: Form has not been scheduled for state e-filing  - scheduled: Form is scheduled for state e-filing  - airlocked: Form is in process of being uploaded to the state  - sent: Form has been sent to the state  - rejected: Form was rejected by the state  - accepted: Form was accepted by the state  - corrected_scheduled: Correction is scheduled to be sent  - corrected_airlocked: Correction is in process of being uploaded to the state  - corrected_sent: Correction has been sent to the state  - corrected_rejected: Correction was rejected by the state  - corrected_accepted: Correction was accepted by the state
     *
     * @return self
     */
    public function setStateEfileStatus($state_efile_status)
    {
        $this->container['state_efile_status'] = $state_efile_status;

        return $this;
    }

    /**
     * Gets postal_mail_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null
     */
    public function getPostalMailStatus()
    {
        return $this->container['postal_mail_status'];
    }

    /**
     * Sets postal_mail_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null $postal_mail_status Postal mail to recipient status.  Available values:  - unscheduled: Postal mail has not been scheduled  - pending: Postal mail is pending to be sent  - sent: Postal mail has been sent  - delivered: Postal mail has been delivered
     *
     * @return self
     */
    public function setPostalMailStatus($postal_mail_status)
    {
        $this->container['postal_mail_status'] = $postal_mail_status;

        return $this;
    }

    /**
     * Gets tin_match_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null
     */
    public function getTinMatchStatus()
    {
        return $this->container['tin_match_status'];
    }

    /**
     * Sets tin_match_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null $tin_match_status TIN Match status.  Available values:  - none: TIN matching has not been performed  - pending: TIN matching request is pending  - matched: Name/TIN combination matches IRS records  - unknown: TIN is missing, invalid, or request contains errors  - rejected: Name/TIN combination does not match IRS records or TIN not currently issued
     *
     * @return self
     */
    public function setTinMatchStatus($tin_match_status)
    {
        $this->container['tin_match_status'] = $tin_match_status;

        return $this;
    }

    /**
     * Gets address_verification_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null
     */
    public function getAddressVerificationStatus()
    {
        return $this->container['address_verification_status'];
    }

    /**
     * Sets address_verification_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null $address_verification_status Address verification status.  Available values:  - unknown: Address verification has not been checked  - pending: Address verification is in progress  - failed: Address verification failed  - incomplete: Address verification is incomplete  - unchanged: User declined address changes  - verified: Address has been verified and accepted
     *
     * @return self
     */
    public function setAddressVerificationStatus($address_verification_status)
    {
        $this->container['address_verification_status'] = $address_verification_status;

        return $this;
    }

    /**
     * Gets e_delivery_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null
     */
    public function getEDeliveryStatus()
    {
        return $this->container['e_delivery_status'];
    }

    /**
     * Sets e_delivery_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null $e_delivery_status EDelivery status.  Available values:  - unscheduled: E-delivery has not been scheduled  - scheduled: E-delivery is scheduled to be sent  - sent: E-delivery has been sent to recipient  - bounced: E-delivery bounced back (invalid email)  - refused: E-delivery was refused by recipient  - bad_verify: E-delivery failed verification  - accepted: E-delivery was accepted by recipient  - bad_verify_limit: E-delivery failed verification limit reached  - second_delivery: Second e-delivery attempt  - undelivered: E-delivery is undelivered (temporary state allowing resend)
     *
     * @return self
     */
    public function setEDeliveryStatus($e_delivery_status)
    {
        $this->container['e_delivery_status'] = $e_delivery_status;

        return $this;
    }

    /**
     * Gets validation_errors
     *
     * @return \Avalara\SDK\Model\A1099\V2\ValidationError[]|null
     */
    public function getValidationErrors()
    {
        return $this->container['validation_errors'];
    }

    /**
     * Sets validation_errors
     *
     * @param \Avalara\SDK\Model\A1099\V2\ValidationError[]|null $validation_errors Validation errors
     *
     * @return self
     */
    public function setValidationErrors($validation_errors)
    {
        $this->container['validation_errors'] = $validation_errors;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Date time when the record was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Date time when the record was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


