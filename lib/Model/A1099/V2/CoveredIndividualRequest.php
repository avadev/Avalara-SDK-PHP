<?php
/**
 * CoveredIndividualRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * CoveredIndividualRequest Class Doc Comment
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CoveredIndividualRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CoveredIndividualRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_name' => 'string',
        'name_suffix' => 'string',
        'tin' => 'string',
        'birth_date' => '\DateTime',
        'covered_month_indicator0' => 'bool',
        'covered_month_indicator1' => 'bool',
        'covered_month_indicator2' => 'bool',
        'covered_month_indicator3' => 'bool',
        'covered_month_indicator4' => 'bool',
        'covered_month_indicator5' => 'bool',
        'covered_month_indicator6' => 'bool',
        'covered_month_indicator7' => 'bool',
        'covered_month_indicator8' => 'bool',
        'covered_month_indicator9' => 'bool',
        'covered_month_indicator10' => 'bool',
        'covered_month_indicator11' => 'bool',
        'covered_month_indicator12' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'first_name' => null,
        'middle_name' => null,
        'last_name' => null,
        'name_suffix' => null,
        'tin' => null,
        'birth_date' => 'date-time',
        'covered_month_indicator0' => null,
        'covered_month_indicator1' => null,
        'covered_month_indicator2' => null,
        'covered_month_indicator3' => null,
        'covered_month_indicator4' => null,
        'covered_month_indicator5' => null,
        'covered_month_indicator6' => null,
        'covered_month_indicator7' => null,
        'covered_month_indicator8' => null,
        'covered_month_indicator9' => null,
        'covered_month_indicator10' => null,
        'covered_month_indicator11' => null,
        'covered_month_indicator12' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'firstName',
        'middle_name' => 'middleName',
        'last_name' => 'lastName',
        'name_suffix' => 'nameSuffix',
        'tin' => 'tin',
        'birth_date' => 'birthDate',
        'covered_month_indicator0' => 'coveredMonthIndicator0',
        'covered_month_indicator1' => 'coveredMonthIndicator1',
        'covered_month_indicator2' => 'coveredMonthIndicator2',
        'covered_month_indicator3' => 'coveredMonthIndicator3',
        'covered_month_indicator4' => 'coveredMonthIndicator4',
        'covered_month_indicator5' => 'coveredMonthIndicator5',
        'covered_month_indicator6' => 'coveredMonthIndicator6',
        'covered_month_indicator7' => 'coveredMonthIndicator7',
        'covered_month_indicator8' => 'coveredMonthIndicator8',
        'covered_month_indicator9' => 'coveredMonthIndicator9',
        'covered_month_indicator10' => 'coveredMonthIndicator10',
        'covered_month_indicator11' => 'coveredMonthIndicator11',
        'covered_month_indicator12' => 'coveredMonthIndicator12'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_name' => 'setLastName',
        'name_suffix' => 'setNameSuffix',
        'tin' => 'setTin',
        'birth_date' => 'setBirthDate',
        'covered_month_indicator0' => 'setCoveredMonthIndicator0',
        'covered_month_indicator1' => 'setCoveredMonthIndicator1',
        'covered_month_indicator2' => 'setCoveredMonthIndicator2',
        'covered_month_indicator3' => 'setCoveredMonthIndicator3',
        'covered_month_indicator4' => 'setCoveredMonthIndicator4',
        'covered_month_indicator5' => 'setCoveredMonthIndicator5',
        'covered_month_indicator6' => 'setCoveredMonthIndicator6',
        'covered_month_indicator7' => 'setCoveredMonthIndicator7',
        'covered_month_indicator8' => 'setCoveredMonthIndicator8',
        'covered_month_indicator9' => 'setCoveredMonthIndicator9',
        'covered_month_indicator10' => 'setCoveredMonthIndicator10',
        'covered_month_indicator11' => 'setCoveredMonthIndicator11',
        'covered_month_indicator12' => 'setCoveredMonthIndicator12'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_name' => 'getLastName',
        'name_suffix' => 'getNameSuffix',
        'tin' => 'getTin',
        'birth_date' => 'getBirthDate',
        'covered_month_indicator0' => 'getCoveredMonthIndicator0',
        'covered_month_indicator1' => 'getCoveredMonthIndicator1',
        'covered_month_indicator2' => 'getCoveredMonthIndicator2',
        'covered_month_indicator3' => 'getCoveredMonthIndicator3',
        'covered_month_indicator4' => 'getCoveredMonthIndicator4',
        'covered_month_indicator5' => 'getCoveredMonthIndicator5',
        'covered_month_indicator6' => 'getCoveredMonthIndicator6',
        'covered_month_indicator7' => 'getCoveredMonthIndicator7',
        'covered_month_indicator8' => 'getCoveredMonthIndicator8',
        'covered_month_indicator9' => 'getCoveredMonthIndicator9',
        'covered_month_indicator10' => 'getCoveredMonthIndicator10',
        'covered_month_indicator11' => 'getCoveredMonthIndicator11',
        'covered_month_indicator12' => 'getCoveredMonthIndicator12'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['middle_name'] = $data['middle_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['name_suffix'] = $data['name_suffix'] ?? null;
        $this->container['tin'] = $data['tin'] ?? null;
        $this->container['birth_date'] = $data['birth_date'] ?? null;
        $this->container['covered_month_indicator0'] = $data['covered_month_indicator0'] ?? null;
        $this->container['covered_month_indicator1'] = $data['covered_month_indicator1'] ?? null;
        $this->container['covered_month_indicator2'] = $data['covered_month_indicator2'] ?? null;
        $this->container['covered_month_indicator3'] = $data['covered_month_indicator3'] ?? null;
        $this->container['covered_month_indicator4'] = $data['covered_month_indicator4'] ?? null;
        $this->container['covered_month_indicator5'] = $data['covered_month_indicator5'] ?? null;
        $this->container['covered_month_indicator6'] = $data['covered_month_indicator6'] ?? null;
        $this->container['covered_month_indicator7'] = $data['covered_month_indicator7'] ?? null;
        $this->container['covered_month_indicator8'] = $data['covered_month_indicator8'] ?? null;
        $this->container['covered_month_indicator9'] = $data['covered_month_indicator9'] ?? null;
        $this->container['covered_month_indicator10'] = $data['covered_month_indicator10'] ?? null;
        $this->container['covered_month_indicator11'] = $data['covered_month_indicator11'] ?? null;
        $this->container['covered_month_indicator12'] = $data['covered_month_indicator12'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Covered individual's first name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name Covered individual's middle name
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Covered individual's last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets name_suffix
     *
     * @return string|null
     */
    public function getNameSuffix()
    {
        return $this->container['name_suffix'];
    }

    /**
     * Sets name_suffix
     *
     * @param string|null $name_suffix Covered individual's name suffix
     *
     * @return self
     */
    public function setNameSuffix($name_suffix)
    {
        $this->container['name_suffix'] = $name_suffix;

        return $this;
    }

    /**
     * Gets tin
     *
     * @return string|null
     */
    public function getTin()
    {
        return $this->container['tin'];
    }

    /**
     * Sets tin
     *
     * @param string|null $tin Covered individual's TIN (SSN or ITIN)
     *
     * @return self
     */
    public function setTin($tin)
    {
        $this->container['tin'] = $tin;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime|null $birth_date Covered individual's date of birth
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets covered_month_indicator0
     *
     * @return bool|null
     */
    public function getCoveredMonthIndicator0()
    {
        return $this->container['covered_month_indicator0'];
    }

    /**
     * Sets covered_month_indicator0
     *
     * @param bool|null $covered_month_indicator0 Coverage indicator for all 12 months
     *
     * @return self
     */
    public function setCoveredMonthIndicator0($covered_month_indicator0)
    {
        $this->container['covered_month_indicator0'] = $covered_month_indicator0;

        return $this;
    }

    /**
     * Gets covered_month_indicator1
     *
     * @return bool|null
     */
    public function getCoveredMonthIndicator1()
    {
        return $this->container['covered_month_indicator1'];
    }

    /**
     * Sets covered_month_indicator1
     *
     * @param bool|null $covered_month_indicator1 Coverage indicator for January
     *
     * @return self
     */
    public function setCoveredMonthIndicator1($covered_month_indicator1)
    {
        $this->container['covered_month_indicator1'] = $covered_month_indicator1;

        return $this;
    }

    /**
     * Gets covered_month_indicator2
     *
     * @return bool|null
     */
    public function getCoveredMonthIndicator2()
    {
        return $this->container['covered_month_indicator2'];
    }

    /**
     * Sets covered_month_indicator2
     *
     * @param bool|null $covered_month_indicator2 Coverage indicator for February
     *
     * @return self
     */
    public function setCoveredMonthIndicator2($covered_month_indicator2)
    {
        $this->container['covered_month_indicator2'] = $covered_month_indicator2;

        return $this;
    }

    /**
     * Gets covered_month_indicator3
     *
     * @return bool|null
     */
    public function getCoveredMonthIndicator3()
    {
        return $this->container['covered_month_indicator3'];
    }

    /**
     * Sets covered_month_indicator3
     *
     * @param bool|null $covered_month_indicator3 Coverage indicator for March
     *
     * @return self
     */
    public function setCoveredMonthIndicator3($covered_month_indicator3)
    {
        $this->container['covered_month_indicator3'] = $covered_month_indicator3;

        return $this;
    }

    /**
     * Gets covered_month_indicator4
     *
     * @return bool|null
     */
    public function getCoveredMonthIndicator4()
    {
        return $this->container['covered_month_indicator4'];
    }

    /**
     * Sets covered_month_indicator4
     *
     * @param bool|null $covered_month_indicator4 Coverage indicator for April
     *
     * @return self
     */
    public function setCoveredMonthIndicator4($covered_month_indicator4)
    {
        $this->container['covered_month_indicator4'] = $covered_month_indicator4;

        return $this;
    }

    /**
     * Gets covered_month_indicator5
     *
     * @return bool|null
     */
    public function getCoveredMonthIndicator5()
    {
        return $this->container['covered_month_indicator5'];
    }

    /**
     * Sets covered_month_indicator5
     *
     * @param bool|null $covered_month_indicator5 Coverage indicator for May
     *
     * @return self
     */
    public function setCoveredMonthIndicator5($covered_month_indicator5)
    {
        $this->container['covered_month_indicator5'] = $covered_month_indicator5;

        return $this;
    }

    /**
     * Gets covered_month_indicator6
     *
     * @return bool|null
     */
    public function getCoveredMonthIndicator6()
    {
        return $this->container['covered_month_indicator6'];
    }

    /**
     * Sets covered_month_indicator6
     *
     * @param bool|null $covered_month_indicator6 Coverage indicator for June
     *
     * @return self
     */
    public function setCoveredMonthIndicator6($covered_month_indicator6)
    {
        $this->container['covered_month_indicator6'] = $covered_month_indicator6;

        return $this;
    }

    /**
     * Gets covered_month_indicator7
     *
     * @return bool|null
     */
    public function getCoveredMonthIndicator7()
    {
        return $this->container['covered_month_indicator7'];
    }

    /**
     * Sets covered_month_indicator7
     *
     * @param bool|null $covered_month_indicator7 Coverage indicator for July
     *
     * @return self
     */
    public function setCoveredMonthIndicator7($covered_month_indicator7)
    {
        $this->container['covered_month_indicator7'] = $covered_month_indicator7;

        return $this;
    }

    /**
     * Gets covered_month_indicator8
     *
     * @return bool|null
     */
    public function getCoveredMonthIndicator8()
    {
        return $this->container['covered_month_indicator8'];
    }

    /**
     * Sets covered_month_indicator8
     *
     * @param bool|null $covered_month_indicator8 Coverage indicator for August
     *
     * @return self
     */
    public function setCoveredMonthIndicator8($covered_month_indicator8)
    {
        $this->container['covered_month_indicator8'] = $covered_month_indicator8;

        return $this;
    }

    /**
     * Gets covered_month_indicator9
     *
     * @return bool|null
     */
    public function getCoveredMonthIndicator9()
    {
        return $this->container['covered_month_indicator9'];
    }

    /**
     * Sets covered_month_indicator9
     *
     * @param bool|null $covered_month_indicator9 Coverage indicator for September
     *
     * @return self
     */
    public function setCoveredMonthIndicator9($covered_month_indicator9)
    {
        $this->container['covered_month_indicator9'] = $covered_month_indicator9;

        return $this;
    }

    /**
     * Gets covered_month_indicator10
     *
     * @return bool|null
     */
    public function getCoveredMonthIndicator10()
    {
        return $this->container['covered_month_indicator10'];
    }

    /**
     * Sets covered_month_indicator10
     *
     * @param bool|null $covered_month_indicator10 Coverage indicator for October
     *
     * @return self
     */
    public function setCoveredMonthIndicator10($covered_month_indicator10)
    {
        $this->container['covered_month_indicator10'] = $covered_month_indicator10;

        return $this;
    }

    /**
     * Gets covered_month_indicator11
     *
     * @return bool|null
     */
    public function getCoveredMonthIndicator11()
    {
        return $this->container['covered_month_indicator11'];
    }

    /**
     * Sets covered_month_indicator11
     *
     * @param bool|null $covered_month_indicator11 Coverage indicator for November
     *
     * @return self
     */
    public function setCoveredMonthIndicator11($covered_month_indicator11)
    {
        $this->container['covered_month_indicator11'] = $covered_month_indicator11;

        return $this;
    }

    /**
     * Gets covered_month_indicator12
     *
     * @return bool|null
     */
    public function getCoveredMonthIndicator12()
    {
        return $this->container['covered_month_indicator12'];
    }

    /**
     * Sets covered_month_indicator12
     *
     * @param bool|null $covered_month_indicator12 Coverage indicator for December
     *
     * @return self
     */
    public function setCoveredMonthIndicator12($covered_month_indicator12)
    {
        $this->container['covered_month_indicator12'] = $covered_month_indicator12;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


