<?php
/**
 * CoveredIndividualRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * CoveredIndividualRequest Class Doc Comment
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CoveredIndividualRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CoveredIndividualRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_name' => 'string',
        'name_suffix' => 'string',
        'tin' => 'string',
        'birth_date' => '\DateTime',
        'covered_all_months' => 'bool',
        'covered_january' => 'bool',
        'covered_february' => 'bool',
        'covered_march' => 'bool',
        'covered_april' => 'bool',
        'covered_may' => 'bool',
        'covered_june' => 'bool',
        'covered_july' => 'bool',
        'covered_august' => 'bool',
        'covered_september' => 'bool',
        'covered_october' => 'bool',
        'covered_november' => 'bool',
        'covered_december' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'first_name' => null,
        'middle_name' => null,
        'last_name' => null,
        'name_suffix' => null,
        'tin' => null,
        'birth_date' => 'date-time',
        'covered_all_months' => null,
        'covered_january' => null,
        'covered_february' => null,
        'covered_march' => null,
        'covered_april' => null,
        'covered_may' => null,
        'covered_june' => null,
        'covered_july' => null,
        'covered_august' => null,
        'covered_september' => null,
        'covered_october' => null,
        'covered_november' => null,
        'covered_december' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'firstName',
        'middle_name' => 'middleName',
        'last_name' => 'lastName',
        'name_suffix' => 'nameSuffix',
        'tin' => 'tin',
        'birth_date' => 'birthDate',
        'covered_all_months' => 'coveredAllMonths',
        'covered_january' => 'coveredJanuary',
        'covered_february' => 'coveredFebruary',
        'covered_march' => 'coveredMarch',
        'covered_april' => 'coveredApril',
        'covered_may' => 'coveredMay',
        'covered_june' => 'coveredJune',
        'covered_july' => 'coveredJuly',
        'covered_august' => 'coveredAugust',
        'covered_september' => 'coveredSeptember',
        'covered_october' => 'coveredOctober',
        'covered_november' => 'coveredNovember',
        'covered_december' => 'coveredDecember'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_name' => 'setLastName',
        'name_suffix' => 'setNameSuffix',
        'tin' => 'setTin',
        'birth_date' => 'setBirthDate',
        'covered_all_months' => 'setCoveredAllMonths',
        'covered_january' => 'setCoveredJanuary',
        'covered_february' => 'setCoveredFebruary',
        'covered_march' => 'setCoveredMarch',
        'covered_april' => 'setCoveredApril',
        'covered_may' => 'setCoveredMay',
        'covered_june' => 'setCoveredJune',
        'covered_july' => 'setCoveredJuly',
        'covered_august' => 'setCoveredAugust',
        'covered_september' => 'setCoveredSeptember',
        'covered_october' => 'setCoveredOctober',
        'covered_november' => 'setCoveredNovember',
        'covered_december' => 'setCoveredDecember'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_name' => 'getLastName',
        'name_suffix' => 'getNameSuffix',
        'tin' => 'getTin',
        'birth_date' => 'getBirthDate',
        'covered_all_months' => 'getCoveredAllMonths',
        'covered_january' => 'getCoveredJanuary',
        'covered_february' => 'getCoveredFebruary',
        'covered_march' => 'getCoveredMarch',
        'covered_april' => 'getCoveredApril',
        'covered_may' => 'getCoveredMay',
        'covered_june' => 'getCoveredJune',
        'covered_july' => 'getCoveredJuly',
        'covered_august' => 'getCoveredAugust',
        'covered_september' => 'getCoveredSeptember',
        'covered_october' => 'getCoveredOctober',
        'covered_november' => 'getCoveredNovember',
        'covered_december' => 'getCoveredDecember'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['middle_name'] = $data['middle_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['name_suffix'] = $data['name_suffix'] ?? null;
        $this->container['tin'] = $data['tin'] ?? null;
        $this->container['birth_date'] = $data['birth_date'] ?? null;
        $this->container['covered_all_months'] = $data['covered_all_months'] ?? null;
        $this->container['covered_january'] = $data['covered_january'] ?? null;
        $this->container['covered_february'] = $data['covered_february'] ?? null;
        $this->container['covered_march'] = $data['covered_march'] ?? null;
        $this->container['covered_april'] = $data['covered_april'] ?? null;
        $this->container['covered_may'] = $data['covered_may'] ?? null;
        $this->container['covered_june'] = $data['covered_june'] ?? null;
        $this->container['covered_july'] = $data['covered_july'] ?? null;
        $this->container['covered_august'] = $data['covered_august'] ?? null;
        $this->container['covered_september'] = $data['covered_september'] ?? null;
        $this->container['covered_october'] = $data['covered_october'] ?? null;
        $this->container['covered_november'] = $data['covered_november'] ?? null;
        $this->container['covered_december'] = $data['covered_december'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Covered individual's first name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name Covered individual's middle name
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Covered individual's last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets name_suffix
     *
     * @return string|null
     */
    public function getNameSuffix()
    {
        return $this->container['name_suffix'];
    }

    /**
     * Sets name_suffix
     *
     * @param string|null $name_suffix Covered individual's name suffix
     *
     * @return self
     */
    public function setNameSuffix($name_suffix)
    {
        $this->container['name_suffix'] = $name_suffix;

        return $this;
    }

    /**
     * Gets tin
     *
     * @return string|null
     */
    public function getTin()
    {
        return $this->container['tin'];
    }

    /**
     * Sets tin
     *
     * @param string|null $tin Covered individual's TIN (SSN or ITIN)
     *
     * @return self
     */
    public function setTin($tin)
    {
        $this->container['tin'] = $tin;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime|null $birth_date Covered individual's date of birth
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets covered_all_months
     *
     * @return bool|null
     */
    public function getCoveredAllMonths()
    {
        return $this->container['covered_all_months'];
    }

    /**
     * Sets covered_all_months
     *
     * @param bool|null $covered_all_months Coverage indicator for all 12 months
     *
     * @return self
     */
    public function setCoveredAllMonths($covered_all_months)
    {
        $this->container['covered_all_months'] = $covered_all_months;

        return $this;
    }

    /**
     * Gets covered_january
     *
     * @return bool|null
     */
    public function getCoveredJanuary()
    {
        return $this->container['covered_january'];
    }

    /**
     * Sets covered_january
     *
     * @param bool|null $covered_january Coverage indicator for January
     *
     * @return self
     */
    public function setCoveredJanuary($covered_january)
    {
        $this->container['covered_january'] = $covered_january;

        return $this;
    }

    /**
     * Gets covered_february
     *
     * @return bool|null
     */
    public function getCoveredFebruary()
    {
        return $this->container['covered_february'];
    }

    /**
     * Sets covered_february
     *
     * @param bool|null $covered_february Coverage indicator for February
     *
     * @return self
     */
    public function setCoveredFebruary($covered_february)
    {
        $this->container['covered_february'] = $covered_february;

        return $this;
    }

    /**
     * Gets covered_march
     *
     * @return bool|null
     */
    public function getCoveredMarch()
    {
        return $this->container['covered_march'];
    }

    /**
     * Sets covered_march
     *
     * @param bool|null $covered_march Coverage indicator for March
     *
     * @return self
     */
    public function setCoveredMarch($covered_march)
    {
        $this->container['covered_march'] = $covered_march;

        return $this;
    }

    /**
     * Gets covered_april
     *
     * @return bool|null
     */
    public function getCoveredApril()
    {
        return $this->container['covered_april'];
    }

    /**
     * Sets covered_april
     *
     * @param bool|null $covered_april Coverage indicator for April
     *
     * @return self
     */
    public function setCoveredApril($covered_april)
    {
        $this->container['covered_april'] = $covered_april;

        return $this;
    }

    /**
     * Gets covered_may
     *
     * @return bool|null
     */
    public function getCoveredMay()
    {
        return $this->container['covered_may'];
    }

    /**
     * Sets covered_may
     *
     * @param bool|null $covered_may Coverage indicator for May
     *
     * @return self
     */
    public function setCoveredMay($covered_may)
    {
        $this->container['covered_may'] = $covered_may;

        return $this;
    }

    /**
     * Gets covered_june
     *
     * @return bool|null
     */
    public function getCoveredJune()
    {
        return $this->container['covered_june'];
    }

    /**
     * Sets covered_june
     *
     * @param bool|null $covered_june Coverage indicator for June
     *
     * @return self
     */
    public function setCoveredJune($covered_june)
    {
        $this->container['covered_june'] = $covered_june;

        return $this;
    }

    /**
     * Gets covered_july
     *
     * @return bool|null
     */
    public function getCoveredJuly()
    {
        return $this->container['covered_july'];
    }

    /**
     * Sets covered_july
     *
     * @param bool|null $covered_july Coverage indicator for July
     *
     * @return self
     */
    public function setCoveredJuly($covered_july)
    {
        $this->container['covered_july'] = $covered_july;

        return $this;
    }

    /**
     * Gets covered_august
     *
     * @return bool|null
     */
    public function getCoveredAugust()
    {
        return $this->container['covered_august'];
    }

    /**
     * Sets covered_august
     *
     * @param bool|null $covered_august Coverage indicator for August
     *
     * @return self
     */
    public function setCoveredAugust($covered_august)
    {
        $this->container['covered_august'] = $covered_august;

        return $this;
    }

    /**
     * Gets covered_september
     *
     * @return bool|null
     */
    public function getCoveredSeptember()
    {
        return $this->container['covered_september'];
    }

    /**
     * Sets covered_september
     *
     * @param bool|null $covered_september Coverage indicator for September
     *
     * @return self
     */
    public function setCoveredSeptember($covered_september)
    {
        $this->container['covered_september'] = $covered_september;

        return $this;
    }

    /**
     * Gets covered_october
     *
     * @return bool|null
     */
    public function getCoveredOctober()
    {
        return $this->container['covered_october'];
    }

    /**
     * Sets covered_october
     *
     * @param bool|null $covered_october Coverage indicator for October
     *
     * @return self
     */
    public function setCoveredOctober($covered_october)
    {
        $this->container['covered_october'] = $covered_october;

        return $this;
    }

    /**
     * Gets covered_november
     *
     * @return bool|null
     */
    public function getCoveredNovember()
    {
        return $this->container['covered_november'];
    }

    /**
     * Sets covered_november
     *
     * @param bool|null $covered_november Coverage indicator for November
     *
     * @return self
     */
    public function setCoveredNovember($covered_november)
    {
        $this->container['covered_november'] = $covered_november;

        return $this;
    }

    /**
     * Gets covered_december
     *
     * @return bool|null
     */
    public function getCoveredDecember()
    {
        return $this->container['covered_december'];
    }

    /**
     * Sets covered_december
     *
     * @param bool|null $covered_december Coverage indicator for December
     *
     * @return self
     */
    public function setCoveredDecember($covered_december)
    {
        $this->container['covered_december'] = $covered_december;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


