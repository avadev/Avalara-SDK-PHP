<?php
/**
 * Form1099DivListItem
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * Form1099DivListItem Class Doc Comment
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Form1099DivListItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Form1099DivListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_ordinary_dividends' => 'string',
        'qualified_dividends' => 'string',
        'total_capital_gain_distributions' => 'string',
        'unrecaptured_section1250_gain' => 'string',
        'section1202_gain' => 'string',
        'collectibles_gain' => 'string',
        'section897_ordinary_dividends' => 'string',
        'section897_capital_gain' => 'string',
        'nondividend_distributions' => 'string',
        'federal_income_tax_withheld' => 'string',
        'section199_a_dividends' => 'string',
        'investment_expenses' => 'string',
        'foreign_tax_paid' => 'string',
        'foreign_country_or_us_possession' => 'string',
        'cash_liquidation_distributions' => 'string',
        'noncash_liquidation_distributions' => 'string',
        'exempt_interest_dividends' => 'string',
        'specified_private_activity_bond_interest_dividends' => 'string',
        'fatca_filing_requirement' => 'bool',
        'issuer_reference_id' => 'string',
        'issuer_tin' => 'string',
        'tax_year' => 'int',
        'issuer_id' => 'string',
        'reference_id' => 'string',
        'recipient_tin' => 'string',
        'recipient_name' => 'string',
        'tin_type' => 'string',
        'recipient_second_name' => 'string',
        'address' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'email' => 'string',
        'account_number' => 'string',
        'office_code' => 'string',
        'non_us_province' => 'string',
        'country_code' => 'string',
        'federal_e_file' => 'bool',
        'postal_mail' => 'bool',
        'state_e_file' => 'bool',
        'tin_match' => 'bool',
        'no_tin' => 'bool',
        'second_tin_notice' => 'bool',
        'address_verification' => 'bool',
        'state_and_local_withholding' => '\Avalara\SDK\Model\A1099\V2\StateAndLocalWithholdingRequest'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_ordinary_dividends' => null,
        'qualified_dividends' => null,
        'total_capital_gain_distributions' => null,
        'unrecaptured_section1250_gain' => null,
        'section1202_gain' => null,
        'collectibles_gain' => null,
        'section897_ordinary_dividends' => null,
        'section897_capital_gain' => null,
        'nondividend_distributions' => null,
        'federal_income_tax_withheld' => null,
        'section199_a_dividends' => null,
        'investment_expenses' => null,
        'foreign_tax_paid' => null,
        'foreign_country_or_us_possession' => null,
        'cash_liquidation_distributions' => null,
        'noncash_liquidation_distributions' => null,
        'exempt_interest_dividends' => null,
        'specified_private_activity_bond_interest_dividends' => null,
        'fatca_filing_requirement' => null,
        'issuer_reference_id' => null,
        'issuer_tin' => null,
        'tax_year' => 'int32',
        'issuer_id' => null,
        'reference_id' => null,
        'recipient_tin' => null,
        'recipient_name' => null,
        'tin_type' => null,
        'recipient_second_name' => null,
        'address' => null,
        'address2' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'email' => null,
        'account_number' => null,
        'office_code' => null,
        'non_us_province' => null,
        'country_code' => null,
        'federal_e_file' => null,
        'postal_mail' => null,
        'state_e_file' => null,
        'tin_match' => null,
        'no_tin' => null,
        'second_tin_notice' => null,
        'address_verification' => null,
        'state_and_local_withholding' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_ordinary_dividends' => 'totalOrdinaryDividends',
        'qualified_dividends' => 'qualifiedDividends',
        'total_capital_gain_distributions' => 'totalCapitalGainDistributions',
        'unrecaptured_section1250_gain' => 'unrecapturedSection1250Gain',
        'section1202_gain' => 'section1202Gain',
        'collectibles_gain' => 'collectiblesGain',
        'section897_ordinary_dividends' => 'section897OrdinaryDividends',
        'section897_capital_gain' => 'section897CapitalGain',
        'nondividend_distributions' => 'nondividendDistributions',
        'federal_income_tax_withheld' => 'federalIncomeTaxWithheld',
        'section199_a_dividends' => 'section199ADividends',
        'investment_expenses' => 'investmentExpenses',
        'foreign_tax_paid' => 'foreignTaxPaid',
        'foreign_country_or_us_possession' => 'foreignCountryOrUSPossession',
        'cash_liquidation_distributions' => 'cashLiquidationDistributions',
        'noncash_liquidation_distributions' => 'noncashLiquidationDistributions',
        'exempt_interest_dividends' => 'exemptInterestDividends',
        'specified_private_activity_bond_interest_dividends' => 'specifiedPrivateActivityBondInterestDividends',
        'fatca_filing_requirement' => 'fatcaFilingRequirement',
        'issuer_reference_id' => 'issuerReferenceId',
        'issuer_tin' => 'issuerTin',
        'tax_year' => 'taxYear',
        'issuer_id' => 'issuerId',
        'reference_id' => 'referenceId',
        'recipient_tin' => 'recipientTin',
        'recipient_name' => 'recipientName',
        'tin_type' => 'tinType',
        'recipient_second_name' => 'recipientSecondName',
        'address' => 'address',
        'address2' => 'address2',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'email' => 'email',
        'account_number' => 'accountNumber',
        'office_code' => 'officeCode',
        'non_us_province' => 'nonUsProvince',
        'country_code' => 'countryCode',
        'federal_e_file' => 'federalEFile',
        'postal_mail' => 'postalMail',
        'state_e_file' => 'stateEFile',
        'tin_match' => 'tinMatch',
        'no_tin' => 'noTin',
        'second_tin_notice' => 'secondTinNotice',
        'address_verification' => 'addressVerification',
        'state_and_local_withholding' => 'stateAndLocalWithholding'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_ordinary_dividends' => 'setTotalOrdinaryDividends',
        'qualified_dividends' => 'setQualifiedDividends',
        'total_capital_gain_distributions' => 'setTotalCapitalGainDistributions',
        'unrecaptured_section1250_gain' => 'setUnrecapturedSection1250Gain',
        'section1202_gain' => 'setSection1202Gain',
        'collectibles_gain' => 'setCollectiblesGain',
        'section897_ordinary_dividends' => 'setSection897OrdinaryDividends',
        'section897_capital_gain' => 'setSection897CapitalGain',
        'nondividend_distributions' => 'setNondividendDistributions',
        'federal_income_tax_withheld' => 'setFederalIncomeTaxWithheld',
        'section199_a_dividends' => 'setSection199ADividends',
        'investment_expenses' => 'setInvestmentExpenses',
        'foreign_tax_paid' => 'setForeignTaxPaid',
        'foreign_country_or_us_possession' => 'setForeignCountryOrUsPossession',
        'cash_liquidation_distributions' => 'setCashLiquidationDistributions',
        'noncash_liquidation_distributions' => 'setNoncashLiquidationDistributions',
        'exempt_interest_dividends' => 'setExemptInterestDividends',
        'specified_private_activity_bond_interest_dividends' => 'setSpecifiedPrivateActivityBondInterestDividends',
        'fatca_filing_requirement' => 'setFatcaFilingRequirement',
        'issuer_reference_id' => 'setIssuerReferenceId',
        'issuer_tin' => 'setIssuerTin',
        'tax_year' => 'setTaxYear',
        'issuer_id' => 'setIssuerId',
        'reference_id' => 'setReferenceId',
        'recipient_tin' => 'setRecipientTin',
        'recipient_name' => 'setRecipientName',
        'tin_type' => 'setTinType',
        'recipient_second_name' => 'setRecipientSecondName',
        'address' => 'setAddress',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'email' => 'setEmail',
        'account_number' => 'setAccountNumber',
        'office_code' => 'setOfficeCode',
        'non_us_province' => 'setNonUsProvince',
        'country_code' => 'setCountryCode',
        'federal_e_file' => 'setFederalEFile',
        'postal_mail' => 'setPostalMail',
        'state_e_file' => 'setStateEFile',
        'tin_match' => 'setTinMatch',
        'no_tin' => 'setNoTin',
        'second_tin_notice' => 'setSecondTinNotice',
        'address_verification' => 'setAddressVerification',
        'state_and_local_withholding' => 'setStateAndLocalWithholding'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_ordinary_dividends' => 'getTotalOrdinaryDividends',
        'qualified_dividends' => 'getQualifiedDividends',
        'total_capital_gain_distributions' => 'getTotalCapitalGainDistributions',
        'unrecaptured_section1250_gain' => 'getUnrecapturedSection1250Gain',
        'section1202_gain' => 'getSection1202Gain',
        'collectibles_gain' => 'getCollectiblesGain',
        'section897_ordinary_dividends' => 'getSection897OrdinaryDividends',
        'section897_capital_gain' => 'getSection897CapitalGain',
        'nondividend_distributions' => 'getNondividendDistributions',
        'federal_income_tax_withheld' => 'getFederalIncomeTaxWithheld',
        'section199_a_dividends' => 'getSection199ADividends',
        'investment_expenses' => 'getInvestmentExpenses',
        'foreign_tax_paid' => 'getForeignTaxPaid',
        'foreign_country_or_us_possession' => 'getForeignCountryOrUsPossession',
        'cash_liquidation_distributions' => 'getCashLiquidationDistributions',
        'noncash_liquidation_distributions' => 'getNoncashLiquidationDistributions',
        'exempt_interest_dividends' => 'getExemptInterestDividends',
        'specified_private_activity_bond_interest_dividends' => 'getSpecifiedPrivateActivityBondInterestDividends',
        'fatca_filing_requirement' => 'getFatcaFilingRequirement',
        'issuer_reference_id' => 'getIssuerReferenceId',
        'issuer_tin' => 'getIssuerTin',
        'tax_year' => 'getTaxYear',
        'issuer_id' => 'getIssuerId',
        'reference_id' => 'getReferenceId',
        'recipient_tin' => 'getRecipientTin',
        'recipient_name' => 'getRecipientName',
        'tin_type' => 'getTinType',
        'recipient_second_name' => 'getRecipientSecondName',
        'address' => 'getAddress',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'email' => 'getEmail',
        'account_number' => 'getAccountNumber',
        'office_code' => 'getOfficeCode',
        'non_us_province' => 'getNonUsProvince',
        'country_code' => 'getCountryCode',
        'federal_e_file' => 'getFederalEFile',
        'postal_mail' => 'getPostalMail',
        'state_e_file' => 'getStateEFile',
        'tin_match' => 'getTinMatch',
        'no_tin' => 'getNoTin',
        'second_tin_notice' => 'getSecondTinNotice',
        'address_verification' => 'getAddressVerification',
        'state_and_local_withholding' => 'getStateAndLocalWithholding'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TIN_TYPE_EIN = 'EIN';
    const TIN_TYPE_SSN = 'SSN';
    const TIN_TYPE_ITIN = 'ITIN';
    const TIN_TYPE_ATIN = 'ATIN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTinTypeAllowableValues()
    {
        return [
            self::TIN_TYPE_EIN,
            self::TIN_TYPE_SSN,
            self::TIN_TYPE_ITIN,
            self::TIN_TYPE_ATIN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_ordinary_dividends'] = $data['total_ordinary_dividends'] ?? null;
        $this->container['qualified_dividends'] = $data['qualified_dividends'] ?? null;
        $this->container['total_capital_gain_distributions'] = $data['total_capital_gain_distributions'] ?? null;
        $this->container['unrecaptured_section1250_gain'] = $data['unrecaptured_section1250_gain'] ?? null;
        $this->container['section1202_gain'] = $data['section1202_gain'] ?? null;
        $this->container['collectibles_gain'] = $data['collectibles_gain'] ?? null;
        $this->container['section897_ordinary_dividends'] = $data['section897_ordinary_dividends'] ?? null;
        $this->container['section897_capital_gain'] = $data['section897_capital_gain'] ?? null;
        $this->container['nondividend_distributions'] = $data['nondividend_distributions'] ?? null;
        $this->container['federal_income_tax_withheld'] = $data['federal_income_tax_withheld'] ?? null;
        $this->container['section199_a_dividends'] = $data['section199_a_dividends'] ?? null;
        $this->container['investment_expenses'] = $data['investment_expenses'] ?? null;
        $this->container['foreign_tax_paid'] = $data['foreign_tax_paid'] ?? null;
        $this->container['foreign_country_or_us_possession'] = $data['foreign_country_or_us_possession'] ?? null;
        $this->container['cash_liquidation_distributions'] = $data['cash_liquidation_distributions'] ?? null;
        $this->container['noncash_liquidation_distributions'] = $data['noncash_liquidation_distributions'] ?? null;
        $this->container['exempt_interest_dividends'] = $data['exempt_interest_dividends'] ?? null;
        $this->container['specified_private_activity_bond_interest_dividends'] = $data['specified_private_activity_bond_interest_dividends'] ?? null;
        $this->container['fatca_filing_requirement'] = $data['fatca_filing_requirement'] ?? null;
        $this->container['issuer_reference_id'] = $data['issuer_reference_id'] ?? null;
        $this->container['issuer_tin'] = $data['issuer_tin'] ?? null;
        $this->container['tax_year'] = $data['tax_year'] ?? null;
        $this->container['issuer_id'] = $data['issuer_id'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['recipient_tin'] = $data['recipient_tin'] ?? null;
        $this->container['recipient_name'] = $data['recipient_name'] ?? null;
        $this->container['tin_type'] = $data['tin_type'] ?? null;
        $this->container['recipient_second_name'] = $data['recipient_second_name'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['address2'] = $data['address2'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['office_code'] = $data['office_code'] ?? null;
        $this->container['non_us_province'] = $data['non_us_province'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['federal_e_file'] = $data['federal_e_file'] ?? null;
        $this->container['postal_mail'] = $data['postal_mail'] ?? null;
        $this->container['state_e_file'] = $data['state_e_file'] ?? null;
        $this->container['tin_match'] = $data['tin_match'] ?? null;
        $this->container['no_tin'] = $data['no_tin'] ?? null;
        $this->container['second_tin_notice'] = $data['second_tin_notice'] ?? null;
        $this->container['address_verification'] = $data['address_verification'] ?? null;
        $this->container['state_and_local_withholding'] = $data['state_and_local_withholding'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tax_year'] === null) {
            $invalidProperties[] = "'tax_year' can't be null";
        }
        $allowedValues = $this->getTinTypeAllowableValues();
        if (!is_null($this->container['tin_type']) && !in_array($this->container['tin_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tin_type', must be one of '%s'",
                $this->container['tin_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ((mb_strlen($this->container['address']) < 1)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) < 1)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        if ((mb_strlen($this->container['country_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_ordinary_dividends
     *
     * @return string|null
     */
    public function getTotalOrdinaryDividends()
    {
        return $this->container['total_ordinary_dividends'];
    }

    /**
     * Sets total_ordinary_dividends
     *
     * @param string|null $total_ordinary_dividends Total ordinary dividends
     *
     * @return self
     */
    public function setTotalOrdinaryDividends($total_ordinary_dividends)
    {
        $this->container['total_ordinary_dividends'] = $total_ordinary_dividends;

        return $this;
    }

    /**
     * Gets qualified_dividends
     *
     * @return string|null
     */
    public function getQualifiedDividends()
    {
        return $this->container['qualified_dividends'];
    }

    /**
     * Sets qualified_dividends
     *
     * @param string|null $qualified_dividends Qualified dividends
     *
     * @return self
     */
    public function setQualifiedDividends($qualified_dividends)
    {
        $this->container['qualified_dividends'] = $qualified_dividends;

        return $this;
    }

    /**
     * Gets total_capital_gain_distributions
     *
     * @return string|null
     */
    public function getTotalCapitalGainDistributions()
    {
        return $this->container['total_capital_gain_distributions'];
    }

    /**
     * Sets total_capital_gain_distributions
     *
     * @param string|null $total_capital_gain_distributions Total capital gain distributions
     *
     * @return self
     */
    public function setTotalCapitalGainDistributions($total_capital_gain_distributions)
    {
        $this->container['total_capital_gain_distributions'] = $total_capital_gain_distributions;

        return $this;
    }

    /**
     * Gets unrecaptured_section1250_gain
     *
     * @return string|null
     */
    public function getUnrecapturedSection1250Gain()
    {
        return $this->container['unrecaptured_section1250_gain'];
    }

    /**
     * Sets unrecaptured_section1250_gain
     *
     * @param string|null $unrecaptured_section1250_gain Unrecaptured Section 1250 gain
     *
     * @return self
     */
    public function setUnrecapturedSection1250Gain($unrecaptured_section1250_gain)
    {
        $this->container['unrecaptured_section1250_gain'] = $unrecaptured_section1250_gain;

        return $this;
    }

    /**
     * Gets section1202_gain
     *
     * @return string|null
     */
    public function getSection1202Gain()
    {
        return $this->container['section1202_gain'];
    }

    /**
     * Sets section1202_gain
     *
     * @param string|null $section1202_gain Section 1202 gain
     *
     * @return self
     */
    public function setSection1202Gain($section1202_gain)
    {
        $this->container['section1202_gain'] = $section1202_gain;

        return $this;
    }

    /**
     * Gets collectibles_gain
     *
     * @return string|null
     */
    public function getCollectiblesGain()
    {
        return $this->container['collectibles_gain'];
    }

    /**
     * Sets collectibles_gain
     *
     * @param string|null $collectibles_gain Collectibles (28%) gain
     *
     * @return self
     */
    public function setCollectiblesGain($collectibles_gain)
    {
        $this->container['collectibles_gain'] = $collectibles_gain;

        return $this;
    }

    /**
     * Gets section897_ordinary_dividends
     *
     * @return string|null
     */
    public function getSection897OrdinaryDividends()
    {
        return $this->container['section897_ordinary_dividends'];
    }

    /**
     * Sets section897_ordinary_dividends
     *
     * @param string|null $section897_ordinary_dividends Section 897 ordinary dividends
     *
     * @return self
     */
    public function setSection897OrdinaryDividends($section897_ordinary_dividends)
    {
        $this->container['section897_ordinary_dividends'] = $section897_ordinary_dividends;

        return $this;
    }

    /**
     * Gets section897_capital_gain
     *
     * @return string|null
     */
    public function getSection897CapitalGain()
    {
        return $this->container['section897_capital_gain'];
    }

    /**
     * Sets section897_capital_gain
     *
     * @param string|null $section897_capital_gain Section 897 capital gain
     *
     * @return self
     */
    public function setSection897CapitalGain($section897_capital_gain)
    {
        $this->container['section897_capital_gain'] = $section897_capital_gain;

        return $this;
    }

    /**
     * Gets nondividend_distributions
     *
     * @return string|null
     */
    public function getNondividendDistributions()
    {
        return $this->container['nondividend_distributions'];
    }

    /**
     * Sets nondividend_distributions
     *
     * @param string|null $nondividend_distributions Nondividend distributions
     *
     * @return self
     */
    public function setNondividendDistributions($nondividend_distributions)
    {
        $this->container['nondividend_distributions'] = $nondividend_distributions;

        return $this;
    }

    /**
     * Gets federal_income_tax_withheld
     *
     * @return string|null
     */
    public function getFederalIncomeTaxWithheld()
    {
        return $this->container['federal_income_tax_withheld'];
    }

    /**
     * Sets federal_income_tax_withheld
     *
     * @param string|null $federal_income_tax_withheld Federal income tax withheld
     *
     * @return self
     */
    public function setFederalIncomeTaxWithheld($federal_income_tax_withheld)
    {
        $this->container['federal_income_tax_withheld'] = $federal_income_tax_withheld;

        return $this;
    }

    /**
     * Gets section199_a_dividends
     *
     * @return string|null
     */
    public function getSection199ADividends()
    {
        return $this->container['section199_a_dividends'];
    }

    /**
     * Sets section199_a_dividends
     *
     * @param string|null $section199_a_dividends Section 199A dividends
     *
     * @return self
     */
    public function setSection199ADividends($section199_a_dividends)
    {
        $this->container['section199_a_dividends'] = $section199_a_dividends;

        return $this;
    }

    /**
     * Gets investment_expenses
     *
     * @return string|null
     */
    public function getInvestmentExpenses()
    {
        return $this->container['investment_expenses'];
    }

    /**
     * Sets investment_expenses
     *
     * @param string|null $investment_expenses Investment expenses
     *
     * @return self
     */
    public function setInvestmentExpenses($investment_expenses)
    {
        $this->container['investment_expenses'] = $investment_expenses;

        return $this;
    }

    /**
     * Gets foreign_tax_paid
     *
     * @return string|null
     */
    public function getForeignTaxPaid()
    {
        return $this->container['foreign_tax_paid'];
    }

    /**
     * Sets foreign_tax_paid
     *
     * @param string|null $foreign_tax_paid Foreign tax paid
     *
     * @return self
     */
    public function setForeignTaxPaid($foreign_tax_paid)
    {
        $this->container['foreign_tax_paid'] = $foreign_tax_paid;

        return $this;
    }

    /**
     * Gets foreign_country_or_us_possession
     *
     * @return string|null
     */
    public function getForeignCountryOrUsPossession()
    {
        return $this->container['foreign_country_or_us_possession'];
    }

    /**
     * Sets foreign_country_or_us_possession
     *
     * @param string|null $foreign_country_or_us_possession Foreign country or U.S. possession
     *
     * @return self
     */
    public function setForeignCountryOrUsPossession($foreign_country_or_us_possession)
    {
        $this->container['foreign_country_or_us_possession'] = $foreign_country_or_us_possession;

        return $this;
    }

    /**
     * Gets cash_liquidation_distributions
     *
     * @return string|null
     */
    public function getCashLiquidationDistributions()
    {
        return $this->container['cash_liquidation_distributions'];
    }

    /**
     * Sets cash_liquidation_distributions
     *
     * @param string|null $cash_liquidation_distributions Cash liquidation distributions
     *
     * @return self
     */
    public function setCashLiquidationDistributions($cash_liquidation_distributions)
    {
        $this->container['cash_liquidation_distributions'] = $cash_liquidation_distributions;

        return $this;
    }

    /**
     * Gets noncash_liquidation_distributions
     *
     * @return string|null
     */
    public function getNoncashLiquidationDistributions()
    {
        return $this->container['noncash_liquidation_distributions'];
    }

    /**
     * Sets noncash_liquidation_distributions
     *
     * @param string|null $noncash_liquidation_distributions Noncash liquidation distributions
     *
     * @return self
     */
    public function setNoncashLiquidationDistributions($noncash_liquidation_distributions)
    {
        $this->container['noncash_liquidation_distributions'] = $noncash_liquidation_distributions;

        return $this;
    }

    /**
     * Gets exempt_interest_dividends
     *
     * @return string|null
     */
    public function getExemptInterestDividends()
    {
        return $this->container['exempt_interest_dividends'];
    }

    /**
     * Sets exempt_interest_dividends
     *
     * @param string|null $exempt_interest_dividends Exempt-interest dividends
     *
     * @return self
     */
    public function setExemptInterestDividends($exempt_interest_dividends)
    {
        $this->container['exempt_interest_dividends'] = $exempt_interest_dividends;

        return $this;
    }

    /**
     * Gets specified_private_activity_bond_interest_dividends
     *
     * @return string|null
     */
    public function getSpecifiedPrivateActivityBondInterestDividends()
    {
        return $this->container['specified_private_activity_bond_interest_dividends'];
    }

    /**
     * Sets specified_private_activity_bond_interest_dividends
     *
     * @param string|null $specified_private_activity_bond_interest_dividends Specified private activity bond interest dividends
     *
     * @return self
     */
    public function setSpecifiedPrivateActivityBondInterestDividends($specified_private_activity_bond_interest_dividends)
    {
        $this->container['specified_private_activity_bond_interest_dividends'] = $specified_private_activity_bond_interest_dividends;

        return $this;
    }

    /**
     * Gets fatca_filing_requirement
     *
     * @return bool|null
     */
    public function getFatcaFilingRequirement()
    {
        return $this->container['fatca_filing_requirement'];
    }

    /**
     * Sets fatca_filing_requirement
     *
     * @param bool|null $fatca_filing_requirement FATCA filing requirement
     *
     * @return self
     */
    public function setFatcaFilingRequirement($fatca_filing_requirement)
    {
        $this->container['fatca_filing_requirement'] = $fatca_filing_requirement;

        return $this;
    }

    /**
     * Gets issuer_reference_id
     *
     * @return string|null
     */
    public function getIssuerReferenceId()
    {
        return $this->container['issuer_reference_id'];
    }

    /**
     * Sets issuer_reference_id
     *
     * @param string|null $issuer_reference_id Issuer Reference ID. One of `issuerReferenceId` or `issuerTin` is required.
     *
     * @return self
     */
    public function setIssuerReferenceId($issuer_reference_id)
    {
        $this->container['issuer_reference_id'] = $issuer_reference_id;

        return $this;
    }

    /**
     * Gets issuer_tin
     *
     * @return string|null
     */
    public function getIssuerTin()
    {
        return $this->container['issuer_tin'];
    }

    /**
     * Sets issuer_tin
     *
     * @param string|null $issuer_tin Issuer TIN. One of `issuerReferenceId` or `issuerTin` is required.
     *
     * @return self
     */
    public function setIssuerTin($issuer_tin)
    {
        $this->container['issuer_tin'] = $issuer_tin;

        return $this;
    }

    /**
     * Gets tax_year
     *
     * @return int
     */
    public function getTaxYear()
    {
        return $this->container['tax_year'];
    }

    /**
     * Sets tax_year
     *
     * @param int $tax_year Tax year
     *
     * @return self
     */
    public function setTaxYear($tax_year)
    {
        $this->container['tax_year'] = $tax_year;

        return $this;
    }

    /**
     * Gets issuer_id
     *
     * @return string|null
     */
    public function getIssuerId()
    {
        return $this->container['issuer_id'];
    }

    /**
     * Sets issuer_id
     *
     * @param string|null $issuer_id Issuer ID
     *
     * @return self
     */
    public function setIssuerId($issuer_id)
    {
        $this->container['issuer_id'] = $issuer_id;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id Reference ID
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets recipient_tin
     *
     * @return string|null
     */
    public function getRecipientTin()
    {
        return $this->container['recipient_tin'];
    }

    /**
     * Sets recipient_tin
     *
     * @param string|null $recipient_tin Recipient Tax ID Number
     *
     * @return self
     */
    public function setRecipientTin($recipient_tin)
    {
        $this->container['recipient_tin'] = $recipient_tin;

        return $this;
    }

    /**
     * Gets recipient_name
     *
     * @return string|null
     */
    public function getRecipientName()
    {
        return $this->container['recipient_name'];
    }

    /**
     * Sets recipient_name
     *
     * @param string|null $recipient_name Recipient name
     *
     * @return self
     */
    public function setRecipientName($recipient_name)
    {
        $this->container['recipient_name'] = $recipient_name;

        return $this;
    }

    /**
     * Gets tin_type
     *
     * @return string|null
     */
    public function getTinType()
    {
        return $this->container['tin_type'];
    }

    /**
     * Sets tin_type
     *
     * @param string|null $tin_type Type of TIN (Tax ID Number). Will be one of:  * SSN  * EIN  * ITIN  * ATIN
     *
     * @return self
     */
    public function setTinType($tin_type)
    {
        $allowedValues = $this->getTinTypeAllowableValues();
        if (!is_null($tin_type) && !in_array($tin_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tin_type', must be one of '%s'",
                    $tin_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tin_type'] = $tin_type;

        return $this;
    }

    /**
     * Gets recipient_second_name
     *
     * @return string|null
     */
    public function getRecipientSecondName()
    {
        return $this->container['recipient_second_name'];
    }

    /**
     * Sets recipient_second_name
     *
     * @param string|null $recipient_second_name Recipient second name
     *
     * @return self
     */
    public function setRecipientSecondName($recipient_second_name)
    {
        $this->container['recipient_second_name'] = $recipient_second_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Address
     *
     * @return self
     */
    public function setAddress($address)
    {

        if ((mb_strlen($address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address when calling Form1099DivListItem., must be bigger than or equal to 1.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Address line 2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City
     *
     * @return self
     */
    public function setCity($city)
    {

        if ((mb_strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Form1099DivListItem., must be bigger than or equal to 1.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state US state. Required if CountryCode is \"US\".
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip Zip/postal code
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Recipient email address
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number Account number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets office_code
     *
     * @return string|null
     */
    public function getOfficeCode()
    {
        return $this->container['office_code'];
    }

    /**
     * Sets office_code
     *
     * @param string|null $office_code Office code
     *
     * @return self
     */
    public function setOfficeCode($office_code)
    {
        $this->container['office_code'] = $office_code;

        return $this;
    }

    /**
     * Gets non_us_province
     *
     * @return string|null
     */
    public function getNonUsProvince()
    {
        return $this->container['non_us_province'];
    }

    /**
     * Sets non_us_province
     *
     * @param string|null $non_us_province Foreign province
     *
     * @return self
     */
    public function setNonUsProvince($non_us_province)
    {
        $this->container['non_us_province'] = $non_us_province;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Country code, as defined at https://www.irs.gov/e-file-providers/country-codes
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {

        if ((mb_strlen($country_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling Form1099DivListItem., must be bigger than or equal to 1.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets federal_e_file
     *
     * @return bool|null
     */
    public function getFederalEFile()
    {
        return $this->container['federal_e_file'];
    }

    /**
     * Sets federal_e_file
     *
     * @param bool|null $federal_e_file Boolean indicating that federal e-filing should be scheduled for this form
     *
     * @return self
     */
    public function setFederalEFile($federal_e_file)
    {
        $this->container['federal_e_file'] = $federal_e_file;

        return $this;
    }

    /**
     * Gets postal_mail
     *
     * @return bool|null
     */
    public function getPostalMail()
    {
        return $this->container['postal_mail'];
    }

    /**
     * Sets postal_mail
     *
     * @param bool|null $postal_mail Boolean indicating that postal mailing to the recipient should be scheduled for this form
     *
     * @return self
     */
    public function setPostalMail($postal_mail)
    {
        $this->container['postal_mail'] = $postal_mail;

        return $this;
    }

    /**
     * Gets state_e_file
     *
     * @return bool|null
     */
    public function getStateEFile()
    {
        return $this->container['state_e_file'];
    }

    /**
     * Sets state_e_file
     *
     * @param bool|null $state_e_file Boolean indicating that state e-filing should be scheduled for this form
     *
     * @return self
     */
    public function setStateEFile($state_e_file)
    {
        $this->container['state_e_file'] = $state_e_file;

        return $this;
    }

    /**
     * Gets tin_match
     *
     * @return bool|null
     */
    public function getTinMatch()
    {
        return $this->container['tin_match'];
    }

    /**
     * Sets tin_match
     *
     * @param bool|null $tin_match Boolean indicating that TIN Matching should be scheduled for this form
     *
     * @return self
     */
    public function setTinMatch($tin_match)
    {
        $this->container['tin_match'] = $tin_match;

        return $this;
    }

    /**
     * Gets no_tin
     *
     * @return bool|null
     */
    public function getNoTin()
    {
        return $this->container['no_tin'];
    }

    /**
     * Sets no_tin
     *
     * @param bool|null $no_tin Indicates whether the recipient has no TIN
     *
     * @return self
     */
    public function setNoTin($no_tin)
    {
        $this->container['no_tin'] = $no_tin;

        return $this;
    }

    /**
     * Gets second_tin_notice
     *
     * @return bool|null
     */
    public function getSecondTinNotice()
    {
        return $this->container['second_tin_notice'];
    }

    /**
     * Sets second_tin_notice
     *
     * @param bool|null $second_tin_notice Second TIN notice in three years
     *
     * @return self
     */
    public function setSecondTinNotice($second_tin_notice)
    {
        $this->container['second_tin_notice'] = $second_tin_notice;

        return $this;
    }

    /**
     * Gets address_verification
     *
     * @return bool|null
     */
    public function getAddressVerification()
    {
        return $this->container['address_verification'];
    }

    /**
     * Sets address_verification
     *
     * @param bool|null $address_verification Boolean indicating that address verification should be scheduled for this form
     *
     * @return self
     */
    public function setAddressVerification($address_verification)
    {
        $this->container['address_verification'] = $address_verification;

        return $this;
    }

    /**
     * Gets state_and_local_withholding
     *
     * @return \Avalara\SDK\Model\A1099\V2\StateAndLocalWithholdingRequest|null
     */
    public function getStateAndLocalWithholding()
    {
        return $this->container['state_and_local_withholding'];
    }

    /**
     * Sets state_and_local_withholding
     *
     * @param \Avalara\SDK\Model\A1099\V2\StateAndLocalWithholdingRequest|null $state_and_local_withholding State and local withholding information
     *
     * @return self
     */
    public function setStateAndLocalWithholding($state_and_local_withholding)
    {
        $this->container['state_and_local_withholding'] = $state_and_local_withholding;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


