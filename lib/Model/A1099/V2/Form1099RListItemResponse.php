<?php
/**
 * Form1099RListItemResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * Form1099RListItemResponse Class Doc Comment
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Form1099RListItemResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Form1099RListItemResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gross_distributions' => 'float',
        'taxable_amount' => 'float',
        'taxable_amount_not_determined' => 'bool',
        'total_distribution_indicator' => 'bool',
        'capital_gain' => 'float',
        'fed_income_tax_withheld' => 'float',
        'employee_contributions' => 'float',
        'net_unrealized_appreciation' => 'float',
        'distribution_code_required' => 'string',
        'distribution_code_optional' => 'string',
        'ira_sep_simple_indicator' => 'bool',
        'total_ira_sep_simple_distribution' => 'float',
        'other' => 'float',
        'other_percent' => 'string',
        'percentage_total_distribution' => 'string',
        'total_employee_contributions' => 'float',
        'amount_allocable_to_irr' => 'float',
        'first_year_designated_roth_contrib' => 'string',
        'fatca_requirement_indicator' => 'bool',
        'date_of_payment' => 'string',
        'id' => 'string',
        'type' => 'string',
        'issuer_id' => 'int',
        'issuer_reference_id' => 'string',
        'issuer_tin' => 'string',
        'tax_year' => 'int',
        'federal_efile' => 'bool',
        'federal_efile_status' => '\Avalara\SDK\Model\A1099\V2\Form1099StatusDetailResponse',
        'state_efile' => 'bool',
        'state_efile_status' => '\Avalara\SDK\Model\A1099\V2\StateEfileStatusDetailResponse[]',
        'postal_mail' => 'bool',
        'postal_mail_status' => '\Avalara\SDK\Model\A1099\V2\Form1099StatusDetailResponse',
        'tin_match' => 'bool',
        'tin_match_status' => '\Avalara\SDK\Model\A1099\V2\Form1099StatusDetailResponse',
        'address_verification' => 'bool',
        'address_verification_status' => '\Avalara\SDK\Model\A1099\V2\Form1099StatusDetailResponse',
        'reference_id' => 'string',
        'email' => 'string',
        'tin_type' => 'string',
        'tin' => 'string',
        'recipient_name' => 'string',
        'recipient_second_name' => 'string',
        'address' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'foreign_province' => 'string',
        'country_code' => 'string',
        'validation_errors' => '\Avalara\SDK\Model\A1099\V2\ValidationErrorResponse[]',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'state_and_local_withholding' => '\Avalara\SDK\Model\A1099\V2\StateAndLocalWithholdingResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gross_distributions' => 'double',
        'taxable_amount' => 'double',
        'taxable_amount_not_determined' => null,
        'total_distribution_indicator' => null,
        'capital_gain' => 'double',
        'fed_income_tax_withheld' => 'double',
        'employee_contributions' => 'double',
        'net_unrealized_appreciation' => 'double',
        'distribution_code_required' => null,
        'distribution_code_optional' => null,
        'ira_sep_simple_indicator' => null,
        'total_ira_sep_simple_distribution' => 'double',
        'other' => 'double',
        'other_percent' => null,
        'percentage_total_distribution' => null,
        'total_employee_contributions' => 'double',
        'amount_allocable_to_irr' => 'double',
        'first_year_designated_roth_contrib' => null,
        'fatca_requirement_indicator' => null,
        'date_of_payment' => null,
        'id' => null,
        'type' => null,
        'issuer_id' => 'int32',
        'issuer_reference_id' => null,
        'issuer_tin' => null,
        'tax_year' => 'int32',
        'federal_efile' => null,
        'federal_efile_status' => null,
        'state_efile' => null,
        'state_efile_status' => null,
        'postal_mail' => null,
        'postal_mail_status' => null,
        'tin_match' => null,
        'tin_match_status' => null,
        'address_verification' => null,
        'address_verification_status' => null,
        'reference_id' => null,
        'email' => null,
        'tin_type' => null,
        'tin' => null,
        'recipient_name' => null,
        'recipient_second_name' => null,
        'address' => null,
        'address2' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'foreign_province' => null,
        'country_code' => null,
        'validation_errors' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'state_and_local_withholding' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gross_distributions' => 'grossDistributions',
        'taxable_amount' => 'taxableAmount',
        'taxable_amount_not_determined' => 'taxableAmountNotDetermined',
        'total_distribution_indicator' => 'totalDistributionIndicator',
        'capital_gain' => 'capitalGain',
        'fed_income_tax_withheld' => 'fedIncomeTaxWithheld',
        'employee_contributions' => 'employeeContributions',
        'net_unrealized_appreciation' => 'netUnrealizedAppreciation',
        'distribution_code_required' => 'distributionCodeRequired',
        'distribution_code_optional' => 'distributionCodeOptional',
        'ira_sep_simple_indicator' => 'iraSepSimpleIndicator',
        'total_ira_sep_simple_distribution' => 'totalIraSepSimpleDistribution',
        'other' => 'other',
        'other_percent' => 'otherPercent',
        'percentage_total_distribution' => 'percentageTotalDistribution',
        'total_employee_contributions' => 'totalEmployeeContributions',
        'amount_allocable_to_irr' => 'amountAllocableToIrr',
        'first_year_designated_roth_contrib' => 'firstYearDesignatedRothContrib',
        'fatca_requirement_indicator' => 'fatcaRequirementIndicator',
        'date_of_payment' => 'dateOfPayment',
        'id' => 'id',
        'type' => 'type',
        'issuer_id' => 'issuerId',
        'issuer_reference_id' => 'issuerReferenceId',
        'issuer_tin' => 'issuerTin',
        'tax_year' => 'taxYear',
        'federal_efile' => 'federalEfile',
        'federal_efile_status' => 'federalEfileStatus',
        'state_efile' => 'stateEfile',
        'state_efile_status' => 'stateEfileStatus',
        'postal_mail' => 'postalMail',
        'postal_mail_status' => 'postalMailStatus',
        'tin_match' => 'tinMatch',
        'tin_match_status' => 'tinMatchStatus',
        'address_verification' => 'addressVerification',
        'address_verification_status' => 'addressVerificationStatus',
        'reference_id' => 'referenceId',
        'email' => 'email',
        'tin_type' => 'tinType',
        'tin' => 'tin',
        'recipient_name' => 'recipientName',
        'recipient_second_name' => 'recipientSecondName',
        'address' => 'address',
        'address2' => 'address2',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'foreign_province' => 'foreignProvince',
        'country_code' => 'countryCode',
        'validation_errors' => 'validationErrors',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'state_and_local_withholding' => 'stateAndLocalWithholding'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gross_distributions' => 'setGrossDistributions',
        'taxable_amount' => 'setTaxableAmount',
        'taxable_amount_not_determined' => 'setTaxableAmountNotDetermined',
        'total_distribution_indicator' => 'setTotalDistributionIndicator',
        'capital_gain' => 'setCapitalGain',
        'fed_income_tax_withheld' => 'setFedIncomeTaxWithheld',
        'employee_contributions' => 'setEmployeeContributions',
        'net_unrealized_appreciation' => 'setNetUnrealizedAppreciation',
        'distribution_code_required' => 'setDistributionCodeRequired',
        'distribution_code_optional' => 'setDistributionCodeOptional',
        'ira_sep_simple_indicator' => 'setIraSepSimpleIndicator',
        'total_ira_sep_simple_distribution' => 'setTotalIraSepSimpleDistribution',
        'other' => 'setOther',
        'other_percent' => 'setOtherPercent',
        'percentage_total_distribution' => 'setPercentageTotalDistribution',
        'total_employee_contributions' => 'setTotalEmployeeContributions',
        'amount_allocable_to_irr' => 'setAmountAllocableToIrr',
        'first_year_designated_roth_contrib' => 'setFirstYearDesignatedRothContrib',
        'fatca_requirement_indicator' => 'setFatcaRequirementIndicator',
        'date_of_payment' => 'setDateOfPayment',
        'id' => 'setId',
        'type' => 'setType',
        'issuer_id' => 'setIssuerId',
        'issuer_reference_id' => 'setIssuerReferenceId',
        'issuer_tin' => 'setIssuerTin',
        'tax_year' => 'setTaxYear',
        'federal_efile' => 'setFederalEfile',
        'federal_efile_status' => 'setFederalEfileStatus',
        'state_efile' => 'setStateEfile',
        'state_efile_status' => 'setStateEfileStatus',
        'postal_mail' => 'setPostalMail',
        'postal_mail_status' => 'setPostalMailStatus',
        'tin_match' => 'setTinMatch',
        'tin_match_status' => 'setTinMatchStatus',
        'address_verification' => 'setAddressVerification',
        'address_verification_status' => 'setAddressVerificationStatus',
        'reference_id' => 'setReferenceId',
        'email' => 'setEmail',
        'tin_type' => 'setTinType',
        'tin' => 'setTin',
        'recipient_name' => 'setRecipientName',
        'recipient_second_name' => 'setRecipientSecondName',
        'address' => 'setAddress',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'foreign_province' => 'setForeignProvince',
        'country_code' => 'setCountryCode',
        'validation_errors' => 'setValidationErrors',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'state_and_local_withholding' => 'setStateAndLocalWithholding'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gross_distributions' => 'getGrossDistributions',
        'taxable_amount' => 'getTaxableAmount',
        'taxable_amount_not_determined' => 'getTaxableAmountNotDetermined',
        'total_distribution_indicator' => 'getTotalDistributionIndicator',
        'capital_gain' => 'getCapitalGain',
        'fed_income_tax_withheld' => 'getFedIncomeTaxWithheld',
        'employee_contributions' => 'getEmployeeContributions',
        'net_unrealized_appreciation' => 'getNetUnrealizedAppreciation',
        'distribution_code_required' => 'getDistributionCodeRequired',
        'distribution_code_optional' => 'getDistributionCodeOptional',
        'ira_sep_simple_indicator' => 'getIraSepSimpleIndicator',
        'total_ira_sep_simple_distribution' => 'getTotalIraSepSimpleDistribution',
        'other' => 'getOther',
        'other_percent' => 'getOtherPercent',
        'percentage_total_distribution' => 'getPercentageTotalDistribution',
        'total_employee_contributions' => 'getTotalEmployeeContributions',
        'amount_allocable_to_irr' => 'getAmountAllocableToIrr',
        'first_year_designated_roth_contrib' => 'getFirstYearDesignatedRothContrib',
        'fatca_requirement_indicator' => 'getFatcaRequirementIndicator',
        'date_of_payment' => 'getDateOfPayment',
        'id' => 'getId',
        'type' => 'getType',
        'issuer_id' => 'getIssuerId',
        'issuer_reference_id' => 'getIssuerReferenceId',
        'issuer_tin' => 'getIssuerTin',
        'tax_year' => 'getTaxYear',
        'federal_efile' => 'getFederalEfile',
        'federal_efile_status' => 'getFederalEfileStatus',
        'state_efile' => 'getStateEfile',
        'state_efile_status' => 'getStateEfileStatus',
        'postal_mail' => 'getPostalMail',
        'postal_mail_status' => 'getPostalMailStatus',
        'tin_match' => 'getTinMatch',
        'tin_match_status' => 'getTinMatchStatus',
        'address_verification' => 'getAddressVerification',
        'address_verification_status' => 'getAddressVerificationStatus',
        'reference_id' => 'getReferenceId',
        'email' => 'getEmail',
        'tin_type' => 'getTinType',
        'tin' => 'getTin',
        'recipient_name' => 'getRecipientName',
        'recipient_second_name' => 'getRecipientSecondName',
        'address' => 'getAddress',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'foreign_province' => 'getForeignProvince',
        'country_code' => 'getCountryCode',
        'validation_errors' => 'getValidationErrors',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'state_and_local_withholding' => 'getStateAndLocalWithholding'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gross_distributions'] = $data['gross_distributions'] ?? null;
        $this->container['taxable_amount'] = $data['taxable_amount'] ?? null;
        $this->container['taxable_amount_not_determined'] = $data['taxable_amount_not_determined'] ?? null;
        $this->container['total_distribution_indicator'] = $data['total_distribution_indicator'] ?? null;
        $this->container['capital_gain'] = $data['capital_gain'] ?? null;
        $this->container['fed_income_tax_withheld'] = $data['fed_income_tax_withheld'] ?? null;
        $this->container['employee_contributions'] = $data['employee_contributions'] ?? null;
        $this->container['net_unrealized_appreciation'] = $data['net_unrealized_appreciation'] ?? null;
        $this->container['distribution_code_required'] = $data['distribution_code_required'] ?? null;
        $this->container['distribution_code_optional'] = $data['distribution_code_optional'] ?? null;
        $this->container['ira_sep_simple_indicator'] = $data['ira_sep_simple_indicator'] ?? null;
        $this->container['total_ira_sep_simple_distribution'] = $data['total_ira_sep_simple_distribution'] ?? null;
        $this->container['other'] = $data['other'] ?? null;
        $this->container['other_percent'] = $data['other_percent'] ?? null;
        $this->container['percentage_total_distribution'] = $data['percentage_total_distribution'] ?? null;
        $this->container['total_employee_contributions'] = $data['total_employee_contributions'] ?? null;
        $this->container['amount_allocable_to_irr'] = $data['amount_allocable_to_irr'] ?? null;
        $this->container['first_year_designated_roth_contrib'] = $data['first_year_designated_roth_contrib'] ?? null;
        $this->container['fatca_requirement_indicator'] = $data['fatca_requirement_indicator'] ?? null;
        $this->container['date_of_payment'] = $data['date_of_payment'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['issuer_id'] = $data['issuer_id'] ?? null;
        $this->container['issuer_reference_id'] = $data['issuer_reference_id'] ?? null;
        $this->container['issuer_tin'] = $data['issuer_tin'] ?? null;
        $this->container['tax_year'] = $data['tax_year'] ?? null;
        $this->container['federal_efile'] = $data['federal_efile'] ?? null;
        $this->container['federal_efile_status'] = $data['federal_efile_status'] ?? null;
        $this->container['state_efile'] = $data['state_efile'] ?? null;
        $this->container['state_efile_status'] = $data['state_efile_status'] ?? null;
        $this->container['postal_mail'] = $data['postal_mail'] ?? null;
        $this->container['postal_mail_status'] = $data['postal_mail_status'] ?? null;
        $this->container['tin_match'] = $data['tin_match'] ?? null;
        $this->container['tin_match_status'] = $data['tin_match_status'] ?? null;
        $this->container['address_verification'] = $data['address_verification'] ?? null;
        $this->container['address_verification_status'] = $data['address_verification_status'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['tin_type'] = $data['tin_type'] ?? null;
        $this->container['tin'] = $data['tin'] ?? null;
        $this->container['recipient_name'] = $data['recipient_name'] ?? null;
        $this->container['recipient_second_name'] = $data['recipient_second_name'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['address2'] = $data['address2'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['foreign_province'] = $data['foreign_province'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['validation_errors'] = $data['validation_errors'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['state_and_local_withholding'] = $data['state_and_local_withholding'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ((mb_strlen($this->container['type']) < 1)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['issuer_id'] === null) {
            $invalidProperties[] = "'issuer_id' can't be null";
        }
        if ($this->container['federal_efile'] === null) {
            $invalidProperties[] = "'federal_efile' can't be null";
        }
        if ($this->container['state_efile'] === null) {
            $invalidProperties[] = "'state_efile' can't be null";
        }
        if ($this->container['postal_mail'] === null) {
            $invalidProperties[] = "'postal_mail' can't be null";
        }
        if ($this->container['tin_match'] === null) {
            $invalidProperties[] = "'tin_match' can't be null";
        }
        if ($this->container['address_verification'] === null) {
            $invalidProperties[] = "'address_verification' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gross_distributions
     *
     * @return float|null
     */
    public function getGrossDistributions()
    {
        return $this->container['gross_distributions'];
    }

    /**
     * Sets gross_distributions
     *
     * @param float|null $gross_distributions Gross distribution
     *
     * @return self
     */
    public function setGrossDistributions($gross_distributions)
    {
        $this->container['gross_distributions'] = $gross_distributions;

        return $this;
    }

    /**
     * Gets taxable_amount
     *
     * @return float|null
     */
    public function getTaxableAmount()
    {
        return $this->container['taxable_amount'];
    }

    /**
     * Sets taxable_amount
     *
     * @param float|null $taxable_amount Taxable amount
     *
     * @return self
     */
    public function setTaxableAmount($taxable_amount)
    {
        $this->container['taxable_amount'] = $taxable_amount;

        return $this;
    }

    /**
     * Gets taxable_amount_not_determined
     *
     * @return bool|null
     */
    public function getTaxableAmountNotDetermined()
    {
        return $this->container['taxable_amount_not_determined'];
    }

    /**
     * Sets taxable_amount_not_determined
     *
     * @param bool|null $taxable_amount_not_determined Taxable amount not determined
     *
     * @return self
     */
    public function setTaxableAmountNotDetermined($taxable_amount_not_determined)
    {
        $this->container['taxable_amount_not_determined'] = $taxable_amount_not_determined;

        return $this;
    }

    /**
     * Gets total_distribution_indicator
     *
     * @return bool|null
     */
    public function getTotalDistributionIndicator()
    {
        return $this->container['total_distribution_indicator'];
    }

    /**
     * Sets total_distribution_indicator
     *
     * @param bool|null $total_distribution_indicator Total distribution
     *
     * @return self
     */
    public function setTotalDistributionIndicator($total_distribution_indicator)
    {
        $this->container['total_distribution_indicator'] = $total_distribution_indicator;

        return $this;
    }

    /**
     * Gets capital_gain
     *
     * @return float|null
     */
    public function getCapitalGain()
    {
        return $this->container['capital_gain'];
    }

    /**
     * Sets capital_gain
     *
     * @param float|null $capital_gain Capital gain (included in Box 2a)
     *
     * @return self
     */
    public function setCapitalGain($capital_gain)
    {
        $this->container['capital_gain'] = $capital_gain;

        return $this;
    }

    /**
     * Gets fed_income_tax_withheld
     *
     * @return float|null
     */
    public function getFedIncomeTaxWithheld()
    {
        return $this->container['fed_income_tax_withheld'];
    }

    /**
     * Sets fed_income_tax_withheld
     *
     * @param float|null $fed_income_tax_withheld Federal income tax withheld
     *
     * @return self
     */
    public function setFedIncomeTaxWithheld($fed_income_tax_withheld)
    {
        $this->container['fed_income_tax_withheld'] = $fed_income_tax_withheld;

        return $this;
    }

    /**
     * Gets employee_contributions
     *
     * @return float|null
     */
    public function getEmployeeContributions()
    {
        return $this->container['employee_contributions'];
    }

    /**
     * Sets employee_contributions
     *
     * @param float|null $employee_contributions Employee contributions/Designated Roth contributions or insurance premiums
     *
     * @return self
     */
    public function setEmployeeContributions($employee_contributions)
    {
        $this->container['employee_contributions'] = $employee_contributions;

        return $this;
    }

    /**
     * Gets net_unrealized_appreciation
     *
     * @return float|null
     */
    public function getNetUnrealizedAppreciation()
    {
        return $this->container['net_unrealized_appreciation'];
    }

    /**
     * Sets net_unrealized_appreciation
     *
     * @param float|null $net_unrealized_appreciation Net unrealized appreciation in employer's securities
     *
     * @return self
     */
    public function setNetUnrealizedAppreciation($net_unrealized_appreciation)
    {
        $this->container['net_unrealized_appreciation'] = $net_unrealized_appreciation;

        return $this;
    }

    /**
     * Gets distribution_code_required
     *
     * @return string|null
     */
    public function getDistributionCodeRequired()
    {
        return $this->container['distribution_code_required'];
    }

    /**
     * Sets distribution_code_required
     *
     * @param string|null $distribution_code_required Distribution code
     *
     * @return self
     */
    public function setDistributionCodeRequired($distribution_code_required)
    {
        $this->container['distribution_code_required'] = $distribution_code_required;

        return $this;
    }

    /**
     * Gets distribution_code_optional
     *
     * @return string|null
     */
    public function getDistributionCodeOptional()
    {
        return $this->container['distribution_code_optional'];
    }

    /**
     * Sets distribution_code_optional
     *
     * @param string|null $distribution_code_optional Second distribution code
     *
     * @return self
     */
    public function setDistributionCodeOptional($distribution_code_optional)
    {
        $this->container['distribution_code_optional'] = $distribution_code_optional;

        return $this;
    }

    /**
     * Gets ira_sep_simple_indicator
     *
     * @return bool|null
     */
    public function getIraSepSimpleIndicator()
    {
        return $this->container['ira_sep_simple_indicator'];
    }

    /**
     * Sets ira_sep_simple_indicator
     *
     * @param bool|null $ira_sep_simple_indicator IRA/SEP/SIMPLE
     *
     * @return self
     */
    public function setIraSepSimpleIndicator($ira_sep_simple_indicator)
    {
        $this->container['ira_sep_simple_indicator'] = $ira_sep_simple_indicator;

        return $this;
    }

    /**
     * Gets total_ira_sep_simple_distribution
     *
     * @return float|null
     */
    public function getTotalIraSepSimpleDistribution()
    {
        return $this->container['total_ira_sep_simple_distribution'];
    }

    /**
     * Sets total_ira_sep_simple_distribution
     *
     * @param float|null $total_ira_sep_simple_distribution Traditional IRA/SEP/SIMPLE or Roth conversion amount
     *
     * @return self
     */
    public function setTotalIraSepSimpleDistribution($total_ira_sep_simple_distribution)
    {
        $this->container['total_ira_sep_simple_distribution'] = $total_ira_sep_simple_distribution;

        return $this;
    }

    /**
     * Gets other
     *
     * @return float|null
     */
    public function getOther()
    {
        return $this->container['other'];
    }

    /**
     * Sets other
     *
     * @param float|null $other Other amount
     *
     * @return self
     */
    public function setOther($other)
    {
        $this->container['other'] = $other;

        return $this;
    }

    /**
     * Gets other_percent
     *
     * @return string|null
     */
    public function getOtherPercent()
    {
        return $this->container['other_percent'];
    }

    /**
     * Sets other_percent
     *
     * @param string|null $other_percent Other percentage
     *
     * @return self
     */
    public function setOtherPercent($other_percent)
    {
        $this->container['other_percent'] = $other_percent;

        return $this;
    }

    /**
     * Gets percentage_total_distribution
     *
     * @return string|null
     */
    public function getPercentageTotalDistribution()
    {
        return $this->container['percentage_total_distribution'];
    }

    /**
     * Sets percentage_total_distribution
     *
     * @param string|null $percentage_total_distribution Total distribution percentage
     *
     * @return self
     */
    public function setPercentageTotalDistribution($percentage_total_distribution)
    {
        $this->container['percentage_total_distribution'] = $percentage_total_distribution;

        return $this;
    }

    /**
     * Gets total_employee_contributions
     *
     * @return float|null
     */
    public function getTotalEmployeeContributions()
    {
        return $this->container['total_employee_contributions'];
    }

    /**
     * Sets total_employee_contributions
     *
     * @param float|null $total_employee_contributions Total employee contributions
     *
     * @return self
     */
    public function setTotalEmployeeContributions($total_employee_contributions)
    {
        $this->container['total_employee_contributions'] = $total_employee_contributions;

        return $this;
    }

    /**
     * Gets amount_allocable_to_irr
     *
     * @return float|null
     */
    public function getAmountAllocableToIrr()
    {
        return $this->container['amount_allocable_to_irr'];
    }

    /**
     * Sets amount_allocable_to_irr
     *
     * @param float|null $amount_allocable_to_irr Amount allocable to IRR within 5 years
     *
     * @return self
     */
    public function setAmountAllocableToIrr($amount_allocable_to_irr)
    {
        $this->container['amount_allocable_to_irr'] = $amount_allocable_to_irr;

        return $this;
    }

    /**
     * Gets first_year_designated_roth_contrib
     *
     * @return string|null
     */
    public function getFirstYearDesignatedRothContrib()
    {
        return $this->container['first_year_designated_roth_contrib'];
    }

    /**
     * Sets first_year_designated_roth_contrib
     *
     * @param string|null $first_year_designated_roth_contrib First year of designated Roth contribution
     *
     * @return self
     */
    public function setFirstYearDesignatedRothContrib($first_year_designated_roth_contrib)
    {
        $this->container['first_year_designated_roth_contrib'] = $first_year_designated_roth_contrib;

        return $this;
    }

    /**
     * Gets fatca_requirement_indicator
     *
     * @return bool|null
     */
    public function getFatcaRequirementIndicator()
    {
        return $this->container['fatca_requirement_indicator'];
    }

    /**
     * Sets fatca_requirement_indicator
     *
     * @param bool|null $fatca_requirement_indicator FATCA filing requirement
     *
     * @return self
     */
    public function setFatcaRequirementIndicator($fatca_requirement_indicator)
    {
        $this->container['fatca_requirement_indicator'] = $fatca_requirement_indicator;

        return $this;
    }

    /**
     * Gets date_of_payment
     *
     * @return string|null
     */
    public function getDateOfPayment()
    {
        return $this->container['date_of_payment'];
    }

    /**
     * Sets date_of_payment
     *
     * @param string|null $date_of_payment Date of payment
     *
     * @return self
     */
    public function setDateOfPayment($date_of_payment)
    {
        $this->container['date_of_payment'] = $date_of_payment;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the form
     *
     * @return self
     */
    public function setId($id)
    {

        if ((mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Form1099RListItemResponse., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of the form. Will be one of:  * 940  * 941  * 943  * 944  * 945  * 1042  * 1042-S  * 1095-B  * 1095-C  * 1097-BTC  * 1098  * 1098-C  * 1098-E  * 1098-Q  * 1098-T  * 3921  * 3922  * 5498  * 5498-ESA  * 5498-SA  * 1099-MISC  * 1099-A  * 1099-B  * 1099-C  * 1099-CAP  * 1099-DIV  * 1099-G  * 1099-INT  * 1099-K  * 1099-LS  * 1099-LTC  * 1099-NEC  * 1099-OID  * 1099-PATR  * 1099-Q  * 1099-R  * 1099-S  * 1099-SA  * T4A  * W-2  * W-2G  * 1099-HC
     *
     * @return self
     */
    public function setType($type)
    {

        if ((mb_strlen($type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $type when calling Form1099RListItemResponse., must be bigger than or equal to 1.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets issuer_id
     *
     * @return int
     */
    public function getIssuerId()
    {
        return $this->container['issuer_id'];
    }

    /**
     * Sets issuer_id
     *
     * @param int $issuer_id Issuer ID
     *
     * @return self
     */
    public function setIssuerId($issuer_id)
    {
        $this->container['issuer_id'] = $issuer_id;

        return $this;
    }

    /**
     * Gets issuer_reference_id
     *
     * @return string|null
     */
    public function getIssuerReferenceId()
    {
        return $this->container['issuer_reference_id'];
    }

    /**
     * Sets issuer_reference_id
     *
     * @param string|null $issuer_reference_id Issuer Reference ID
     *
     * @return self
     */
    public function setIssuerReferenceId($issuer_reference_id)
    {
        $this->container['issuer_reference_id'] = $issuer_reference_id;

        return $this;
    }

    /**
     * Gets issuer_tin
     *
     * @return string|null
     */
    public function getIssuerTin()
    {
        return $this->container['issuer_tin'];
    }

    /**
     * Sets issuer_tin
     *
     * @param string|null $issuer_tin Issuer TIN
     *
     * @return self
     */
    public function setIssuerTin($issuer_tin)
    {
        $this->container['issuer_tin'] = $issuer_tin;

        return $this;
    }

    /**
     * Gets tax_year
     *
     * @return int|null
     */
    public function getTaxYear()
    {
        return $this->container['tax_year'];
    }

    /**
     * Sets tax_year
     *
     * @param int|null $tax_year Tax year
     *
     * @return self
     */
    public function setTaxYear($tax_year)
    {
        $this->container['tax_year'] = $tax_year;

        return $this;
    }

    /**
     * Gets federal_efile
     *
     * @return bool
     */
    public function getFederalEfile()
    {
        return $this->container['federal_efile'];
    }

    /**
     * Sets federal_efile
     *
     * @param bool $federal_efile Boolean indicating that federal e-filing has been scheduled for this form
     *
     * @return self
     */
    public function setFederalEfile($federal_efile)
    {
        $this->container['federal_efile'] = $federal_efile;

        return $this;
    }

    /**
     * Gets federal_efile_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\Form1099StatusDetailResponse|null
     */
    public function getFederalEfileStatus()
    {
        return $this->container['federal_efile_status'];
    }

    /**
     * Sets federal_efile_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\Form1099StatusDetailResponse|null $federal_efile_status Federal e-file status
     *
     * @return self
     */
    public function setFederalEfileStatus($federal_efile_status)
    {
        $this->container['federal_efile_status'] = $federal_efile_status;

        return $this;
    }

    /**
     * Gets state_efile
     *
     * @return bool
     */
    public function getStateEfile()
    {
        return $this->container['state_efile'];
    }

    /**
     * Sets state_efile
     *
     * @param bool $state_efile Boolean indicating that state e-filing has been scheduled for this form
     *
     * @return self
     */
    public function setStateEfile($state_efile)
    {
        $this->container['state_efile'] = $state_efile;

        return $this;
    }

    /**
     * Gets state_efile_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\StateEfileStatusDetailResponse[]|null
     */
    public function getStateEfileStatus()
    {
        return $this->container['state_efile_status'];
    }

    /**
     * Sets state_efile_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\StateEfileStatusDetailResponse[]|null $state_efile_status State e-file status
     *
     * @return self
     */
    public function setStateEfileStatus($state_efile_status)
    {


        $this->container['state_efile_status'] = $state_efile_status;

        return $this;
    }

    /**
     * Gets postal_mail
     *
     * @return bool
     */
    public function getPostalMail()
    {
        return $this->container['postal_mail'];
    }

    /**
     * Sets postal_mail
     *
     * @param bool $postal_mail Boolean indicating that postal mailing to the recipient has been scheduled for this form
     *
     * @return self
     */
    public function setPostalMail($postal_mail)
    {
        $this->container['postal_mail'] = $postal_mail;

        return $this;
    }

    /**
     * Gets postal_mail_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\Form1099StatusDetailResponse|null
     */
    public function getPostalMailStatus()
    {
        return $this->container['postal_mail_status'];
    }

    /**
     * Sets postal_mail_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\Form1099StatusDetailResponse|null $postal_mail_status Postal mail to recipient status
     *
     * @return self
     */
    public function setPostalMailStatus($postal_mail_status)
    {
        $this->container['postal_mail_status'] = $postal_mail_status;

        return $this;
    }

    /**
     * Gets tin_match
     *
     * @return bool
     */
    public function getTinMatch()
    {
        return $this->container['tin_match'];
    }

    /**
     * Sets tin_match
     *
     * @param bool $tin_match Boolean indicating that TIN Matching has been scheduled for this form
     *
     * @return self
     */
    public function setTinMatch($tin_match)
    {
        $this->container['tin_match'] = $tin_match;

        return $this;
    }

    /**
     * Gets tin_match_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\Form1099StatusDetailResponse|null
     */
    public function getTinMatchStatus()
    {
        return $this->container['tin_match_status'];
    }

    /**
     * Sets tin_match_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\Form1099StatusDetailResponse|null $tin_match_status TIN Match status
     *
     * @return self
     */
    public function setTinMatchStatus($tin_match_status)
    {
        $this->container['tin_match_status'] = $tin_match_status;

        return $this;
    }

    /**
     * Gets address_verification
     *
     * @return bool
     */
    public function getAddressVerification()
    {
        return $this->container['address_verification'];
    }

    /**
     * Sets address_verification
     *
     * @param bool $address_verification Boolean indicating that address verification has been scheduled for this form
     *
     * @return self
     */
    public function setAddressVerification($address_verification)
    {
        $this->container['address_verification'] = $address_verification;

        return $this;
    }

    /**
     * Gets address_verification_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\Form1099StatusDetailResponse|null
     */
    public function getAddressVerificationStatus()
    {
        return $this->container['address_verification_status'];
    }

    /**
     * Sets address_verification_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\Form1099StatusDetailResponse|null $address_verification_status Address verification status
     *
     * @return self
     */
    public function setAddressVerificationStatus($address_verification_status)
    {
        $this->container['address_verification_status'] = $address_verification_status;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id Reference ID
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Recipient email address
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets tin_type
     *
     * @return string|null
     */
    public function getTinType()
    {
        return $this->container['tin_type'];
    }

    /**
     * Sets tin_type
     *
     * @param string|null $tin_type Type of TIN (Tax ID Number). Will be one of:  * SSN  * EIN  * ITIN  * ATIN
     *
     * @return self
     */
    public function setTinType($tin_type)
    {
        $this->container['tin_type'] = $tin_type;

        return $this;
    }

    /**
     * Gets tin
     *
     * @return string|null
     */
    public function getTin()
    {
        return $this->container['tin'];
    }

    /**
     * Sets tin
     *
     * @param string|null $tin Recipient Tax ID Number
     *
     * @return self
     */
    public function setTin($tin)
    {
        $this->container['tin'] = $tin;

        return $this;
    }

    /**
     * Gets recipient_name
     *
     * @return string|null
     */
    public function getRecipientName()
    {
        return $this->container['recipient_name'];
    }

    /**
     * Sets recipient_name
     *
     * @param string|null $recipient_name Recipient name
     *
     * @return self
     */
    public function setRecipientName($recipient_name)
    {
        $this->container['recipient_name'] = $recipient_name;

        return $this;
    }

    /**
     * Gets recipient_second_name
     *
     * @return string|null
     */
    public function getRecipientSecondName()
    {
        return $this->container['recipient_second_name'];
    }

    /**
     * Sets recipient_second_name
     *
     * @param string|null $recipient_second_name Recipient second name
     *
     * @return self
     */
    public function setRecipientSecondName($recipient_second_name)
    {
        $this->container['recipient_second_name'] = $recipient_second_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Address line 2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state US state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip Zip/postal code
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets foreign_province
     *
     * @return string|null
     */
    public function getForeignProvince()
    {
        return $this->container['foreign_province'];
    }

    /**
     * Sets foreign_province
     *
     * @param string|null $foreign_province Foreign province
     *
     * @return self
     */
    public function setForeignProvince($foreign_province)
    {
        $this->container['foreign_province'] = $foreign_province;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code Country code, as defined at https://www.irs.gov/e-file-providers/country-codes
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets validation_errors
     *
     * @return \Avalara\SDK\Model\A1099\V2\ValidationErrorResponse[]|null
     */
    public function getValidationErrors()
    {
        return $this->container['validation_errors'];
    }

    /**
     * Sets validation_errors
     *
     * @param \Avalara\SDK\Model\A1099\V2\ValidationErrorResponse[]|null $validation_errors Validation errors
     *
     * @return self
     */
    public function setValidationErrors($validation_errors)
    {


        $this->container['validation_errors'] = $validation_errors;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Creation time
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Update time
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets state_and_local_withholding
     *
     * @return \Avalara\SDK\Model\A1099\V2\StateAndLocalWithholdingResponse|null
     */
    public function getStateAndLocalWithholding()
    {
        return $this->container['state_and_local_withholding'];
    }

    /**
     * Sets state_and_local_withholding
     *
     * @param \Avalara\SDK\Model\A1099\V2\StateAndLocalWithholdingResponse|null $state_and_local_withholding state_and_local_withholding
     *
     * @return self
     */
    public function setStateAndLocalWithholding($state_and_local_withholding)
    {
        $this->container['state_and_local_withholding'] = $state_and_local_withholding;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


