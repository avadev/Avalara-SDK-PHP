<?php
/**
 * Form1042SRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * Form1042SRequest Class Doc Comment
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Form1042SRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Form1042SRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unique_form_id' => 'string',
        'no_tin' => 'bool',
        'recipient_date_of_birth' => '\DateTime',
        'recipient_giin' => 'string',
        'recipient_foreign_tin' => 'string',
        'lob_code' => 'string',
        'income_code' => 'string',
        'gross_income' => 'float',
        'withholding_indicator' => 'string',
        'tax_country_code' => 'string',
        'exemption_code_chap3' => 'string',
        'exemption_code_chap4' => 'string',
        'tax_rate_chap3' => 'string',
        'withholding_allowance' => 'float',
        'federal_tax_withheld' => 'float',
        'tax_not_deposited_indicator' => 'bool',
        'academic_indicator' => 'bool',
        'tax_withheld_other_agents' => 'float',
        'amount_repaid' => 'float',
        'tax_paid_agent' => 'float',
        'chap3_status_code' => 'string',
        'chap4_status_code' => 'string',
        'primary_withholding_agent' => '\Avalara\SDK\Model\A1099\V2\PrimaryWithholdingAgentRequest',
        'intermediary_or_flow_through' => '\Avalara\SDK\Model\A1099\V2\IntermediaryOrFlowThroughRequest',
        'state_and_local_withholding' => '\Avalara\SDK\Model\A1099\V2\StateAndLocalWithholdingRequest',
        'type' => 'string',
        'issuer_id' => 'string',
        'reference_id' => 'string',
        'recipient_tin' => 'string',
        'recipient_name' => 'string',
        'tin_type' => 'string',
        'recipient_second_name' => 'string',
        'address' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'recipient_email' => 'string',
        'account_number' => 'string',
        'office_code' => 'string',
        'recipient_non_us_province' => 'string',
        'country_code' => 'string',
        'federal_e_file' => 'bool',
        'postal_mail' => 'bool',
        'state_e_file' => 'bool',
        'tin_match' => 'bool',
        'address_verification' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'unique_form_id' => null,
        'no_tin' => null,
        'recipient_date_of_birth' => 'date-time',
        'recipient_giin' => null,
        'recipient_foreign_tin' => null,
        'lob_code' => null,
        'income_code' => null,
        'gross_income' => 'double',
        'withholding_indicator' => null,
        'tax_country_code' => null,
        'exemption_code_chap3' => null,
        'exemption_code_chap4' => null,
        'tax_rate_chap3' => null,
        'withholding_allowance' => 'double',
        'federal_tax_withheld' => 'double',
        'tax_not_deposited_indicator' => null,
        'academic_indicator' => null,
        'tax_withheld_other_agents' => 'double',
        'amount_repaid' => 'double',
        'tax_paid_agent' => 'double',
        'chap3_status_code' => null,
        'chap4_status_code' => null,
        'primary_withholding_agent' => null,
        'intermediary_or_flow_through' => null,
        'state_and_local_withholding' => null,
        'type' => null,
        'issuer_id' => null,
        'reference_id' => null,
        'recipient_tin' => null,
        'recipient_name' => null,
        'tin_type' => null,
        'recipient_second_name' => null,
        'address' => null,
        'address2' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'recipient_email' => null,
        'account_number' => null,
        'office_code' => null,
        'recipient_non_us_province' => null,
        'country_code' => null,
        'federal_e_file' => null,
        'postal_mail' => null,
        'state_e_file' => null,
        'tin_match' => null,
        'address_verification' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unique_form_id' => 'uniqueFormId',
        'no_tin' => 'noTin',
        'recipient_date_of_birth' => 'recipientDateOfBirth',
        'recipient_giin' => 'recipientGiin',
        'recipient_foreign_tin' => 'recipientForeignTin',
        'lob_code' => 'lobCode',
        'income_code' => 'incomeCode',
        'gross_income' => 'grossIncome',
        'withholding_indicator' => 'withholdingIndicator',
        'tax_country_code' => 'taxCountryCode',
        'exemption_code_chap3' => 'exemptionCodeChap3',
        'exemption_code_chap4' => 'exemptionCodeChap4',
        'tax_rate_chap3' => 'taxRateChap3',
        'withholding_allowance' => 'withholdingAllowance',
        'federal_tax_withheld' => 'federalTaxWithheld',
        'tax_not_deposited_indicator' => 'taxNotDepositedIndicator',
        'academic_indicator' => 'academicIndicator',
        'tax_withheld_other_agents' => 'taxWithheldOtherAgents',
        'amount_repaid' => 'amountRepaid',
        'tax_paid_agent' => 'taxPaidAgent',
        'chap3_status_code' => 'chap3StatusCode',
        'chap4_status_code' => 'chap4StatusCode',
        'primary_withholding_agent' => 'primaryWithholdingAgent',
        'intermediary_or_flow_through' => 'intermediaryOrFlowThrough',
        'state_and_local_withholding' => 'stateAndLocalWithholding',
        'type' => 'type',
        'issuer_id' => 'issuerId',
        'reference_id' => 'referenceId',
        'recipient_tin' => 'recipientTin',
        'recipient_name' => 'recipientName',
        'tin_type' => 'tinType',
        'recipient_second_name' => 'recipientSecondName',
        'address' => 'address',
        'address2' => 'address2',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'recipient_email' => 'recipientEmail',
        'account_number' => 'accountNumber',
        'office_code' => 'officeCode',
        'recipient_non_us_province' => 'recipientNonUsProvince',
        'country_code' => 'countryCode',
        'federal_e_file' => 'federalEFile',
        'postal_mail' => 'postalMail',
        'state_e_file' => 'stateEFile',
        'tin_match' => 'tinMatch',
        'address_verification' => 'addressVerification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unique_form_id' => 'setUniqueFormId',
        'no_tin' => 'setNoTin',
        'recipient_date_of_birth' => 'setRecipientDateOfBirth',
        'recipient_giin' => 'setRecipientGiin',
        'recipient_foreign_tin' => 'setRecipientForeignTin',
        'lob_code' => 'setLobCode',
        'income_code' => 'setIncomeCode',
        'gross_income' => 'setGrossIncome',
        'withholding_indicator' => 'setWithholdingIndicator',
        'tax_country_code' => 'setTaxCountryCode',
        'exemption_code_chap3' => 'setExemptionCodeChap3',
        'exemption_code_chap4' => 'setExemptionCodeChap4',
        'tax_rate_chap3' => 'setTaxRateChap3',
        'withholding_allowance' => 'setWithholdingAllowance',
        'federal_tax_withheld' => 'setFederalTaxWithheld',
        'tax_not_deposited_indicator' => 'setTaxNotDepositedIndicator',
        'academic_indicator' => 'setAcademicIndicator',
        'tax_withheld_other_agents' => 'setTaxWithheldOtherAgents',
        'amount_repaid' => 'setAmountRepaid',
        'tax_paid_agent' => 'setTaxPaidAgent',
        'chap3_status_code' => 'setChap3StatusCode',
        'chap4_status_code' => 'setChap4StatusCode',
        'primary_withholding_agent' => 'setPrimaryWithholdingAgent',
        'intermediary_or_flow_through' => 'setIntermediaryOrFlowThrough',
        'state_and_local_withholding' => 'setStateAndLocalWithholding',
        'type' => 'setType',
        'issuer_id' => 'setIssuerId',
        'reference_id' => 'setReferenceId',
        'recipient_tin' => 'setRecipientTin',
        'recipient_name' => 'setRecipientName',
        'tin_type' => 'setTinType',
        'recipient_second_name' => 'setRecipientSecondName',
        'address' => 'setAddress',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'recipient_email' => 'setRecipientEmail',
        'account_number' => 'setAccountNumber',
        'office_code' => 'setOfficeCode',
        'recipient_non_us_province' => 'setRecipientNonUsProvince',
        'country_code' => 'setCountryCode',
        'federal_e_file' => 'setFederalEFile',
        'postal_mail' => 'setPostalMail',
        'state_e_file' => 'setStateEFile',
        'tin_match' => 'setTinMatch',
        'address_verification' => 'setAddressVerification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unique_form_id' => 'getUniqueFormId',
        'no_tin' => 'getNoTin',
        'recipient_date_of_birth' => 'getRecipientDateOfBirth',
        'recipient_giin' => 'getRecipientGiin',
        'recipient_foreign_tin' => 'getRecipientForeignTin',
        'lob_code' => 'getLobCode',
        'income_code' => 'getIncomeCode',
        'gross_income' => 'getGrossIncome',
        'withholding_indicator' => 'getWithholdingIndicator',
        'tax_country_code' => 'getTaxCountryCode',
        'exemption_code_chap3' => 'getExemptionCodeChap3',
        'exemption_code_chap4' => 'getExemptionCodeChap4',
        'tax_rate_chap3' => 'getTaxRateChap3',
        'withholding_allowance' => 'getWithholdingAllowance',
        'federal_tax_withheld' => 'getFederalTaxWithheld',
        'tax_not_deposited_indicator' => 'getTaxNotDepositedIndicator',
        'academic_indicator' => 'getAcademicIndicator',
        'tax_withheld_other_agents' => 'getTaxWithheldOtherAgents',
        'amount_repaid' => 'getAmountRepaid',
        'tax_paid_agent' => 'getTaxPaidAgent',
        'chap3_status_code' => 'getChap3StatusCode',
        'chap4_status_code' => 'getChap4StatusCode',
        'primary_withholding_agent' => 'getPrimaryWithholdingAgent',
        'intermediary_or_flow_through' => 'getIntermediaryOrFlowThrough',
        'state_and_local_withholding' => 'getStateAndLocalWithholding',
        'type' => 'getType',
        'issuer_id' => 'getIssuerId',
        'reference_id' => 'getReferenceId',
        'recipient_tin' => 'getRecipientTin',
        'recipient_name' => 'getRecipientName',
        'tin_type' => 'getTinType',
        'recipient_second_name' => 'getRecipientSecondName',
        'address' => 'getAddress',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'recipient_email' => 'getRecipientEmail',
        'account_number' => 'getAccountNumber',
        'office_code' => 'getOfficeCode',
        'recipient_non_us_province' => 'getRecipientNonUsProvince',
        'country_code' => 'getCountryCode',
        'federal_e_file' => 'getFederalEFile',
        'postal_mail' => 'getPostalMail',
        'state_e_file' => 'getStateEFile',
        'tin_match' => 'getTinMatch',
        'address_verification' => 'getAddressVerification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE__1099_NEC = '1099-NEC';
    const TYPE__1099_MISC = '1099-MISC';
    const TYPE__1099_DIV = '1099-DIV';
    const TYPE__1099_R = '1099-R';
    const TYPE__1099_K = '1099-K';
    const TYPE__1095_B = '1095-B';
    const TYPE__1042_S = '1042-S';
    const TIN_TYPE_EIN = 'EIN';
    const TIN_TYPE_SSN = 'SSN';
    const TIN_TYPE_ITIN = 'ITIN';
    const TIN_TYPE_ATIN = 'ATIN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE__1099_NEC,
            self::TYPE__1099_MISC,
            self::TYPE__1099_DIV,
            self::TYPE__1099_R,
            self::TYPE__1099_K,
            self::TYPE__1095_B,
            self::TYPE__1042_S,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTinTypeAllowableValues()
    {
        return [
            self::TIN_TYPE_EIN,
            self::TIN_TYPE_SSN,
            self::TIN_TYPE_ITIN,
            self::TIN_TYPE_ATIN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unique_form_id'] = $data['unique_form_id'] ?? null;
        $this->container['no_tin'] = $data['no_tin'] ?? null;
        $this->container['recipient_date_of_birth'] = $data['recipient_date_of_birth'] ?? null;
        $this->container['recipient_giin'] = $data['recipient_giin'] ?? null;
        $this->container['recipient_foreign_tin'] = $data['recipient_foreign_tin'] ?? null;
        $this->container['lob_code'] = $data['lob_code'] ?? null;
        $this->container['income_code'] = $data['income_code'] ?? null;
        $this->container['gross_income'] = $data['gross_income'] ?? null;
        $this->container['withholding_indicator'] = $data['withholding_indicator'] ?? null;
        $this->container['tax_country_code'] = $data['tax_country_code'] ?? null;
        $this->container['exemption_code_chap3'] = $data['exemption_code_chap3'] ?? null;
        $this->container['exemption_code_chap4'] = $data['exemption_code_chap4'] ?? null;
        $this->container['tax_rate_chap3'] = $data['tax_rate_chap3'] ?? null;
        $this->container['withholding_allowance'] = $data['withholding_allowance'] ?? null;
        $this->container['federal_tax_withheld'] = $data['federal_tax_withheld'] ?? null;
        $this->container['tax_not_deposited_indicator'] = $data['tax_not_deposited_indicator'] ?? null;
        $this->container['academic_indicator'] = $data['academic_indicator'] ?? null;
        $this->container['tax_withheld_other_agents'] = $data['tax_withheld_other_agents'] ?? null;
        $this->container['amount_repaid'] = $data['amount_repaid'] ?? null;
        $this->container['tax_paid_agent'] = $data['tax_paid_agent'] ?? null;
        $this->container['chap3_status_code'] = $data['chap3_status_code'] ?? null;
        $this->container['chap4_status_code'] = $data['chap4_status_code'] ?? null;
        $this->container['primary_withholding_agent'] = $data['primary_withholding_agent'] ?? null;
        $this->container['intermediary_or_flow_through'] = $data['intermediary_or_flow_through'] ?? null;
        $this->container['state_and_local_withholding'] = $data['state_and_local_withholding'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['issuer_id'] = $data['issuer_id'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['recipient_tin'] = $data['recipient_tin'] ?? null;
        $this->container['recipient_name'] = $data['recipient_name'] ?? null;
        $this->container['tin_type'] = $data['tin_type'] ?? null;
        $this->container['recipient_second_name'] = $data['recipient_second_name'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['address2'] = $data['address2'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['recipient_email'] = $data['recipient_email'] ?? null;
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['office_code'] = $data['office_code'] ?? null;
        $this->container['recipient_non_us_province'] = $data['recipient_non_us_province'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['federal_e_file'] = $data['federal_e_file'] ?? null;
        $this->container['postal_mail'] = $data['postal_mail'] ?? null;
        $this->container['state_e_file'] = $data['state_e_file'] ?? null;
        $this->container['tin_match'] = $data['tin_match'] ?? null;
        $this->container['address_verification'] = $data['address_verification'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['recipient_name'] === null) {
            $invalidProperties[] = "'recipient_name' can't be null";
        }
        if ((mb_strlen($this->container['recipient_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'recipient_name', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getTinTypeAllowableValues();
        if (!is_null($this->container['tin_type']) && !in_array($this->container['tin_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tin_type', must be one of '%s'",
                $this->container['tin_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ((mb_strlen($this->container['address']) < 1)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) < 1)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        if ((mb_strlen($this->container['country_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unique_form_id
     *
     * @return string|null
     */
    public function getUniqueFormId()
    {
        return $this->container['unique_form_id'];
    }

    /**
     * Sets unique_form_id
     *
     * @param string|null $unique_form_id Unique form identifier
     *
     * @return self
     */
    public function setUniqueFormId($unique_form_id)
    {
        $this->container['unique_form_id'] = $unique_form_id;

        return $this;
    }

    /**
     * Gets no_tin
     *
     * @return bool|null
     */
    public function getNoTin()
    {
        return $this->container['no_tin'];
    }

    /**
     * Sets no_tin
     *
     * @param bool|null $no_tin No TIN indicator
     *
     * @return self
     */
    public function setNoTin($no_tin)
    {
        $this->container['no_tin'] = $no_tin;

        return $this;
    }

    /**
     * Gets recipient_date_of_birth
     *
     * @return \DateTime|null
     */
    public function getRecipientDateOfBirth()
    {
        return $this->container['recipient_date_of_birth'];
    }

    /**
     * Sets recipient_date_of_birth
     *
     * @param \DateTime|null $recipient_date_of_birth Recipient's date of birth
     *
     * @return self
     */
    public function setRecipientDateOfBirth($recipient_date_of_birth)
    {
        $this->container['recipient_date_of_birth'] = $recipient_date_of_birth;

        return $this;
    }

    /**
     * Gets recipient_giin
     *
     * @return string|null
     */
    public function getRecipientGiin()
    {
        return $this->container['recipient_giin'];
    }

    /**
     * Sets recipient_giin
     *
     * @param string|null $recipient_giin Recipient's GIIN (Global Intermediary Identification Number)
     *
     * @return self
     */
    public function setRecipientGiin($recipient_giin)
    {
        $this->container['recipient_giin'] = $recipient_giin;

        return $this;
    }

    /**
     * Gets recipient_foreign_tin
     *
     * @return string|null
     */
    public function getRecipientForeignTin()
    {
        return $this->container['recipient_foreign_tin'];
    }

    /**
     * Sets recipient_foreign_tin
     *
     * @param string|null $recipient_foreign_tin Recipient's foreign TIN
     *
     * @return self
     */
    public function setRecipientForeignTin($recipient_foreign_tin)
    {
        $this->container['recipient_foreign_tin'] = $recipient_foreign_tin;

        return $this;
    }

    /**
     * Gets lob_code
     *
     * @return string|null
     */
    public function getLobCode()
    {
        return $this->container['lob_code'];
    }

    /**
     * Sets lob_code
     *
     * @param string|null $lob_code Limitation on benefits code
     *
     * @return self
     */
    public function setLobCode($lob_code)
    {
        $this->container['lob_code'] = $lob_code;

        return $this;
    }

    /**
     * Gets income_code
     *
     * @return string|null
     */
    public function getIncomeCode()
    {
        return $this->container['income_code'];
    }

    /**
     * Sets income_code
     *
     * @param string|null $income_code Income code
     *
     * @return self
     */
    public function setIncomeCode($income_code)
    {
        $this->container['income_code'] = $income_code;

        return $this;
    }

    /**
     * Gets gross_income
     *
     * @return float|null
     */
    public function getGrossIncome()
    {
        return $this->container['gross_income'];
    }

    /**
     * Sets gross_income
     *
     * @param float|null $gross_income Gross income
     *
     * @return self
     */
    public function setGrossIncome($gross_income)
    {
        $this->container['gross_income'] = $gross_income;

        return $this;
    }

    /**
     * Gets withholding_indicator
     *
     * @return string|null
     */
    public function getWithholdingIndicator()
    {
        return $this->container['withholding_indicator'];
    }

    /**
     * Sets withholding_indicator
     *
     * @param string|null $withholding_indicator Withholding indicator
     *
     * @return self
     */
    public function setWithholdingIndicator($withholding_indicator)
    {
        $this->container['withholding_indicator'] = $withholding_indicator;

        return $this;
    }

    /**
     * Gets tax_country_code
     *
     * @return string|null
     */
    public function getTaxCountryCode()
    {
        return $this->container['tax_country_code'];
    }

    /**
     * Sets tax_country_code
     *
     * @param string|null $tax_country_code Country code
     *
     * @return self
     */
    public function setTaxCountryCode($tax_country_code)
    {
        $this->container['tax_country_code'] = $tax_country_code;

        return $this;
    }

    /**
     * Gets exemption_code_chap3
     *
     * @return string|null
     */
    public function getExemptionCodeChap3()
    {
        return $this->container['exemption_code_chap3'];
    }

    /**
     * Sets exemption_code_chap3
     *
     * @param string|null $exemption_code_chap3 Exemption code (Chapter 3)
     *
     * @return self
     */
    public function setExemptionCodeChap3($exemption_code_chap3)
    {
        $this->container['exemption_code_chap3'] = $exemption_code_chap3;

        return $this;
    }

    /**
     * Gets exemption_code_chap4
     *
     * @return string|null
     */
    public function getExemptionCodeChap4()
    {
        return $this->container['exemption_code_chap4'];
    }

    /**
     * Sets exemption_code_chap4
     *
     * @param string|null $exemption_code_chap4 Exemption code (Chapter 4)
     *
     * @return self
     */
    public function setExemptionCodeChap4($exemption_code_chap4)
    {
        $this->container['exemption_code_chap4'] = $exemption_code_chap4;

        return $this;
    }

    /**
     * Gets tax_rate_chap3
     *
     * @return string|null
     */
    public function getTaxRateChap3()
    {
        return $this->container['tax_rate_chap3'];
    }

    /**
     * Sets tax_rate_chap3
     *
     * @param string|null $tax_rate_chap3 Tax rate (Chapter 3)
     *
     * @return self
     */
    public function setTaxRateChap3($tax_rate_chap3)
    {
        $this->container['tax_rate_chap3'] = $tax_rate_chap3;

        return $this;
    }

    /**
     * Gets withholding_allowance
     *
     * @return float|null
     */
    public function getWithholdingAllowance()
    {
        return $this->container['withholding_allowance'];
    }

    /**
     * Sets withholding_allowance
     *
     * @param float|null $withholding_allowance Withholding allowance
     *
     * @return self
     */
    public function setWithholdingAllowance($withholding_allowance)
    {
        $this->container['withholding_allowance'] = $withholding_allowance;

        return $this;
    }

    /**
     * Gets federal_tax_withheld
     *
     * @return float|null
     */
    public function getFederalTaxWithheld()
    {
        return $this->container['federal_tax_withheld'];
    }

    /**
     * Sets federal_tax_withheld
     *
     * @param float|null $federal_tax_withheld Federal tax withheld
     *
     * @return self
     */
    public function setFederalTaxWithheld($federal_tax_withheld)
    {
        $this->container['federal_tax_withheld'] = $federal_tax_withheld;

        return $this;
    }

    /**
     * Gets tax_not_deposited_indicator
     *
     * @return bool|null
     */
    public function getTaxNotDepositedIndicator()
    {
        return $this->container['tax_not_deposited_indicator'];
    }

    /**
     * Sets tax_not_deposited_indicator
     *
     * @param bool|null $tax_not_deposited_indicator Tax not deposited indicator
     *
     * @return self
     */
    public function setTaxNotDepositedIndicator($tax_not_deposited_indicator)
    {
        $this->container['tax_not_deposited_indicator'] = $tax_not_deposited_indicator;

        return $this;
    }

    /**
     * Gets academic_indicator
     *
     * @return bool|null
     */
    public function getAcademicIndicator()
    {
        return $this->container['academic_indicator'];
    }

    /**
     * Sets academic_indicator
     *
     * @param bool|null $academic_indicator Academic indicator
     *
     * @return self
     */
    public function setAcademicIndicator($academic_indicator)
    {
        $this->container['academic_indicator'] = $academic_indicator;

        return $this;
    }

    /**
     * Gets tax_withheld_other_agents
     *
     * @return float|null
     */
    public function getTaxWithheldOtherAgents()
    {
        return $this->container['tax_withheld_other_agents'];
    }

    /**
     * Sets tax_withheld_other_agents
     *
     * @param float|null $tax_withheld_other_agents Tax withheld by other agents
     *
     * @return self
     */
    public function setTaxWithheldOtherAgents($tax_withheld_other_agents)
    {
        $this->container['tax_withheld_other_agents'] = $tax_withheld_other_agents;

        return $this;
    }

    /**
     * Gets amount_repaid
     *
     * @return float|null
     */
    public function getAmountRepaid()
    {
        return $this->container['amount_repaid'];
    }

    /**
     * Sets amount_repaid
     *
     * @param float|null $amount_repaid Amount repaid to recipient
     *
     * @return self
     */
    public function setAmountRepaid($amount_repaid)
    {
        $this->container['amount_repaid'] = $amount_repaid;

        return $this;
    }

    /**
     * Gets tax_paid_agent
     *
     * @return float|null
     */
    public function getTaxPaidAgent()
    {
        return $this->container['tax_paid_agent'];
    }

    /**
     * Sets tax_paid_agent
     *
     * @param float|null $tax_paid_agent Tax paid by withholding agent
     *
     * @return self
     */
    public function setTaxPaidAgent($tax_paid_agent)
    {
        $this->container['tax_paid_agent'] = $tax_paid_agent;

        return $this;
    }

    /**
     * Gets chap3_status_code
     *
     * @return string|null
     */
    public function getChap3StatusCode()
    {
        return $this->container['chap3_status_code'];
    }

    /**
     * Sets chap3_status_code
     *
     * @param string|null $chap3_status_code Chapter 3 status code
     *
     * @return self
     */
    public function setChap3StatusCode($chap3_status_code)
    {
        $this->container['chap3_status_code'] = $chap3_status_code;

        return $this;
    }

    /**
     * Gets chap4_status_code
     *
     * @return string|null
     */
    public function getChap4StatusCode()
    {
        return $this->container['chap4_status_code'];
    }

    /**
     * Sets chap4_status_code
     *
     * @param string|null $chap4_status_code Chapter 4 status code
     *
     * @return self
     */
    public function setChap4StatusCode($chap4_status_code)
    {
        $this->container['chap4_status_code'] = $chap4_status_code;

        return $this;
    }

    /**
     * Gets primary_withholding_agent
     *
     * @return \Avalara\SDK\Model\A1099\V2\PrimaryWithholdingAgentRequest|null
     */
    public function getPrimaryWithholdingAgent()
    {
        return $this->container['primary_withholding_agent'];
    }

    /**
     * Sets primary_withholding_agent
     *
     * @param \Avalara\SDK\Model\A1099\V2\PrimaryWithholdingAgentRequest|null $primary_withholding_agent Primary withholding agent information
     *
     * @return self
     */
    public function setPrimaryWithholdingAgent($primary_withholding_agent)
    {
        $this->container['primary_withholding_agent'] = $primary_withholding_agent;

        return $this;
    }

    /**
     * Gets intermediary_or_flow_through
     *
     * @return \Avalara\SDK\Model\A1099\V2\IntermediaryOrFlowThroughRequest|null
     */
    public function getIntermediaryOrFlowThrough()
    {
        return $this->container['intermediary_or_flow_through'];
    }

    /**
     * Sets intermediary_or_flow_through
     *
     * @param \Avalara\SDK\Model\A1099\V2\IntermediaryOrFlowThroughRequest|null $intermediary_or_flow_through Intermediary or flow-through entity information
     *
     * @return self
     */
    public function setIntermediaryOrFlowThrough($intermediary_or_flow_through)
    {
        $this->container['intermediary_or_flow_through'] = $intermediary_or_flow_through;

        return $this;
    }

    /**
     * Gets state_and_local_withholding
     *
     * @return \Avalara\SDK\Model\A1099\V2\StateAndLocalWithholdingRequest|null
     */
    public function getStateAndLocalWithholding()
    {
        return $this->container['state_and_local_withholding'];
    }

    /**
     * Sets state_and_local_withholding
     *
     * @param \Avalara\SDK\Model\A1099\V2\StateAndLocalWithholdingRequest|null $state_and_local_withholding State and local withholding information
     *
     * @return self
     */
    public function setStateAndLocalWithholding($state_and_local_withholding)
    {
        $this->container['state_and_local_withholding'] = $state_and_local_withholding;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets issuer_id
     *
     * @return string|null
     */
    public function getIssuerId()
    {
        return $this->container['issuer_id'];
    }

    /**
     * Sets issuer_id
     *
     * @param string|null $issuer_id Issuer ID
     *
     * @return self
     */
    public function setIssuerId($issuer_id)
    {
        $this->container['issuer_id'] = $issuer_id;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id Reference ID
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets recipient_tin
     *
     * @return string|null
     */
    public function getRecipientTin()
    {
        return $this->container['recipient_tin'];
    }

    /**
     * Sets recipient_tin
     *
     * @param string|null $recipient_tin Recipient Tax ID Number
     *
     * @return self
     */
    public function setRecipientTin($recipient_tin)
    {
        $this->container['recipient_tin'] = $recipient_tin;

        return $this;
    }

    /**
     * Gets recipient_name
     *
     * @return string
     */
    public function getRecipientName()
    {
        return $this->container['recipient_name'];
    }

    /**
     * Sets recipient_name
     *
     * @param string $recipient_name Recipient name
     *
     * @return self
     */
    public function setRecipientName($recipient_name)
    {

        if ((mb_strlen($recipient_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $recipient_name when calling Form1042SRequest., must be bigger than or equal to 1.');
        }

        $this->container['recipient_name'] = $recipient_name;

        return $this;
    }

    /**
     * Gets tin_type
     *
     * @return string|null
     */
    public function getTinType()
    {
        return $this->container['tin_type'];
    }

    /**
     * Sets tin_type
     *
     * @param string|null $tin_type Type of TIN (Tax ID Number). Will be one of:  * SSN  * EIN  * ITIN  * ATIN
     *
     * @return self
     */
    public function setTinType($tin_type)
    {
        $allowedValues = $this->getTinTypeAllowableValues();
        if (!is_null($tin_type) && !in_array($tin_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tin_type', must be one of '%s'",
                    $tin_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tin_type'] = $tin_type;

        return $this;
    }

    /**
     * Gets recipient_second_name
     *
     * @return string|null
     */
    public function getRecipientSecondName()
    {
        return $this->container['recipient_second_name'];
    }

    /**
     * Sets recipient_second_name
     *
     * @param string|null $recipient_second_name Recipient second name
     *
     * @return self
     */
    public function setRecipientSecondName($recipient_second_name)
    {
        $this->container['recipient_second_name'] = $recipient_second_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Address
     *
     * @return self
     */
    public function setAddress($address)
    {

        if ((mb_strlen($address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address when calling Form1042SRequest., must be bigger than or equal to 1.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Address line 2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City
     *
     * @return self
     */
    public function setCity($city)
    {

        if ((mb_strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Form1042SRequest., must be bigger than or equal to 1.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state US state. Required if CountryCode is \"US\".
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip Zip/postal code
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets recipient_email
     *
     * @return string|null
     */
    public function getRecipientEmail()
    {
        return $this->container['recipient_email'];
    }

    /**
     * Sets recipient_email
     *
     * @param string|null $recipient_email Recipient email address
     *
     * @return self
     */
    public function setRecipientEmail($recipient_email)
    {
        $this->container['recipient_email'] = $recipient_email;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number Account number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets office_code
     *
     * @return string|null
     */
    public function getOfficeCode()
    {
        return $this->container['office_code'];
    }

    /**
     * Sets office_code
     *
     * @param string|null $office_code Office code
     *
     * @return self
     */
    public function setOfficeCode($office_code)
    {
        $this->container['office_code'] = $office_code;

        return $this;
    }

    /**
     * Gets recipient_non_us_province
     *
     * @return string|null
     */
    public function getRecipientNonUsProvince()
    {
        return $this->container['recipient_non_us_province'];
    }

    /**
     * Sets recipient_non_us_province
     *
     * @param string|null $recipient_non_us_province Foreign province
     *
     * @return self
     */
    public function setRecipientNonUsProvince($recipient_non_us_province)
    {
        $this->container['recipient_non_us_province'] = $recipient_non_us_province;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Country code, as defined at https://www.irs.gov/e-file-providers/country-codes
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {

        if ((mb_strlen($country_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling Form1042SRequest., must be bigger than or equal to 1.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets federal_e_file
     *
     * @return bool|null
     */
    public function getFederalEFile()
    {
        return $this->container['federal_e_file'];
    }

    /**
     * Sets federal_e_file
     *
     * @param bool|null $federal_e_file Boolean indicating that federal e-filing should be scheduled for this form
     *
     * @return self
     */
    public function setFederalEFile($federal_e_file)
    {
        $this->container['federal_e_file'] = $federal_e_file;

        return $this;
    }

    /**
     * Gets postal_mail
     *
     * @return bool|null
     */
    public function getPostalMail()
    {
        return $this->container['postal_mail'];
    }

    /**
     * Sets postal_mail
     *
     * @param bool|null $postal_mail Boolean indicating that postal mailing to the recipient should be scheduled for this form
     *
     * @return self
     */
    public function setPostalMail($postal_mail)
    {
        $this->container['postal_mail'] = $postal_mail;

        return $this;
    }

    /**
     * Gets state_e_file
     *
     * @return bool|null
     */
    public function getStateEFile()
    {
        return $this->container['state_e_file'];
    }

    /**
     * Sets state_e_file
     *
     * @param bool|null $state_e_file Boolean indicating that state e-filing should be scheduled for this form
     *
     * @return self
     */
    public function setStateEFile($state_e_file)
    {
        $this->container['state_e_file'] = $state_e_file;

        return $this;
    }

    /**
     * Gets tin_match
     *
     * @return bool|null
     */
    public function getTinMatch()
    {
        return $this->container['tin_match'];
    }

    /**
     * Sets tin_match
     *
     * @param bool|null $tin_match Boolean indicating that TIN Matching should be scheduled for this form
     *
     * @return self
     */
    public function setTinMatch($tin_match)
    {
        $this->container['tin_match'] = $tin_match;

        return $this;
    }

    /**
     * Gets address_verification
     *
     * @return bool|null
     */
    public function getAddressVerification()
    {
        return $this->container['address_verification'];
    }

    /**
     * Sets address_verification
     *
     * @param bool|null $address_verification Boolean indicating that address verification should be scheduled for this form
     *
     * @return self
     */
    public function setAddressVerification($address_verification)
    {
        $this->container['address_verification'] = $address_verification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


