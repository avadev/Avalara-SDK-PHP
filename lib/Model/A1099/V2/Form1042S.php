<?php
/**
 * Form1042S
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * Form1042S Class Doc Comment
 *
 * @category Class
 * @description Form 1042-S: Foreign Person&#39;s U.S. Source Income Subject to Withholding
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Form1042S implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Form1042S';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tin_type' => 'string',
        'unique_form_id' => 'string',
        'recipient_date_of_birth' => '\DateTime',
        'recipient_giin' => 'string',
        'recipient_foreign_tin' => 'string',
        'lob_code' => 'string',
        'income_code' => 'string',
        'gross_income' => 'float',
        'withholding_indicator' => 'string',
        'tax_country_code' => 'string',
        'exemption_code_chap3' => 'string',
        'exemption_code_chap4' => 'string',
        'tax_rate_chap3' => 'string',
        'withholding_allowance' => 'float',
        'federal_tax_withheld' => 'float',
        'tax_not_deposited_indicator' => 'bool',
        'academic_indicator' => 'bool',
        'tax_withheld_other_agents' => 'float',
        'amount_repaid' => 'float',
        'tax_paid_agent' => 'float',
        'chap3_status_code' => 'string',
        'chap4_status_code' => 'string',
        'primary_withholding_agent' => '\Avalara\SDK\Model\A1099\V2\PrimaryWithholdingAgent',
        'intermediary_or_flow_through' => '\Avalara\SDK\Model\A1099\V2\IntermediaryOrFlowThrough',
        'type' => 'string',
        'id' => 'string',
        'issuer_id' => 'string',
        'issuer_reference_id' => 'string',
        'issuer_tin' => 'string',
        'tax_year' => 'int',
        'reference_id' => 'string',
        'tin' => 'string',
        'recipient_name' => 'string',
        'recipient_second_name' => 'string',
        'address' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'email' => 'string',
        'account_number' => 'string',
        'office_code' => 'string',
        'non_us_province' => 'string',
        'country_code' => 'string',
        'federal_efile_date' => '\DateTime',
        'postal_mail' => 'bool',
        'state_efile_date' => '\DateTime',
        'recipient_edelivery_date' => '\DateTime',
        'tin_match' => 'bool',
        'no_tin' => 'bool',
        'address_verification' => 'bool',
        'state_and_local_withholding' => '\Avalara\SDK\Model\A1099\V2\StateAndLocalWithholding',
        'second_tin_notice' => 'bool',
        'federal_efile_status' => '\Avalara\SDK\Model\A1099\V2\Form1099StatusDetail',
        'state_efile_status' => '\Avalara\SDK\Model\A1099\V2\StateEfileStatusDetail[]',
        'postal_mail_status' => '\Avalara\SDK\Model\A1099\V2\Form1099StatusDetail',
        'tin_match_status' => '\Avalara\SDK\Model\A1099\V2\Form1099StatusDetail',
        'address_verification_status' => '\Avalara\SDK\Model\A1099\V2\Form1099StatusDetail',
        'e_delivery_status' => '\Avalara\SDK\Model\A1099\V2\Form1099StatusDetail',
        'validation_errors' => '\Avalara\SDK\Model\A1099\V2\ValidationError[]',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tin_type' => null,
        'unique_form_id' => null,
        'recipient_date_of_birth' => 'date',
        'recipient_giin' => null,
        'recipient_foreign_tin' => null,
        'lob_code' => null,
        'income_code' => null,
        'gross_income' => 'double',
        'withholding_indicator' => null,
        'tax_country_code' => null,
        'exemption_code_chap3' => null,
        'exemption_code_chap4' => null,
        'tax_rate_chap3' => null,
        'withholding_allowance' => 'double',
        'federal_tax_withheld' => 'double',
        'tax_not_deposited_indicator' => null,
        'academic_indicator' => null,
        'tax_withheld_other_agents' => 'double',
        'amount_repaid' => 'double',
        'tax_paid_agent' => 'double',
        'chap3_status_code' => null,
        'chap4_status_code' => null,
        'primary_withholding_agent' => null,
        'intermediary_or_flow_through' => null,
        'type' => null,
        'id' => null,
        'issuer_id' => null,
        'issuer_reference_id' => null,
        'issuer_tin' => null,
        'tax_year' => 'int32',
        'reference_id' => null,
        'tin' => null,
        'recipient_name' => null,
        'recipient_second_name' => null,
        'address' => null,
        'address2' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'email' => null,
        'account_number' => null,
        'office_code' => null,
        'non_us_province' => null,
        'country_code' => null,
        'federal_efile_date' => 'date',
        'postal_mail' => null,
        'state_efile_date' => 'date',
        'recipient_edelivery_date' => 'date',
        'tin_match' => null,
        'no_tin' => null,
        'address_verification' => null,
        'state_and_local_withholding' => null,
        'second_tin_notice' => null,
        'federal_efile_status' => null,
        'state_efile_status' => null,
        'postal_mail_status' => null,
        'tin_match_status' => null,
        'address_verification_status' => null,
        'e_delivery_status' => null,
        'validation_errors' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tin_type' => 'tinType',
        'unique_form_id' => 'uniqueFormId',
        'recipient_date_of_birth' => 'recipientDateOfBirth',
        'recipient_giin' => 'recipientGiin',
        'recipient_foreign_tin' => 'recipientForeignTin',
        'lob_code' => 'lobCode',
        'income_code' => 'incomeCode',
        'gross_income' => 'grossIncome',
        'withholding_indicator' => 'withholdingIndicator',
        'tax_country_code' => 'taxCountryCode',
        'exemption_code_chap3' => 'exemptionCodeChap3',
        'exemption_code_chap4' => 'exemptionCodeChap4',
        'tax_rate_chap3' => 'taxRateChap3',
        'withholding_allowance' => 'withholdingAllowance',
        'federal_tax_withheld' => 'federalTaxWithheld',
        'tax_not_deposited_indicator' => 'taxNotDepositedIndicator',
        'academic_indicator' => 'academicIndicator',
        'tax_withheld_other_agents' => 'taxWithheldOtherAgents',
        'amount_repaid' => 'amountRepaid',
        'tax_paid_agent' => 'taxPaidAgent',
        'chap3_status_code' => 'chap3StatusCode',
        'chap4_status_code' => 'chap4StatusCode',
        'primary_withholding_agent' => 'primaryWithholdingAgent',
        'intermediary_or_flow_through' => 'intermediaryOrFlowThrough',
        'type' => 'type',
        'id' => 'id',
        'issuer_id' => 'issuerId',
        'issuer_reference_id' => 'issuerReferenceId',
        'issuer_tin' => 'issuerTin',
        'tax_year' => 'taxYear',
        'reference_id' => 'referenceId',
        'tin' => 'tin',
        'recipient_name' => 'recipientName',
        'recipient_second_name' => 'recipientSecondName',
        'address' => 'address',
        'address2' => 'address2',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'email' => 'email',
        'account_number' => 'accountNumber',
        'office_code' => 'officeCode',
        'non_us_province' => 'nonUsProvince',
        'country_code' => 'countryCode',
        'federal_efile_date' => 'federalEfileDate',
        'postal_mail' => 'postalMail',
        'state_efile_date' => 'stateEfileDate',
        'recipient_edelivery_date' => 'recipientEdeliveryDate',
        'tin_match' => 'tinMatch',
        'no_tin' => 'noTin',
        'address_verification' => 'addressVerification',
        'state_and_local_withholding' => 'stateAndLocalWithholding',
        'second_tin_notice' => 'secondTinNotice',
        'federal_efile_status' => 'federalEfileStatus',
        'state_efile_status' => 'stateEfileStatus',
        'postal_mail_status' => 'postalMailStatus',
        'tin_match_status' => 'tinMatchStatus',
        'address_verification_status' => 'addressVerificationStatus',
        'e_delivery_status' => 'eDeliveryStatus',
        'validation_errors' => 'validationErrors',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tin_type' => 'setTinType',
        'unique_form_id' => 'setUniqueFormId',
        'recipient_date_of_birth' => 'setRecipientDateOfBirth',
        'recipient_giin' => 'setRecipientGiin',
        'recipient_foreign_tin' => 'setRecipientForeignTin',
        'lob_code' => 'setLobCode',
        'income_code' => 'setIncomeCode',
        'gross_income' => 'setGrossIncome',
        'withholding_indicator' => 'setWithholdingIndicator',
        'tax_country_code' => 'setTaxCountryCode',
        'exemption_code_chap3' => 'setExemptionCodeChap3',
        'exemption_code_chap4' => 'setExemptionCodeChap4',
        'tax_rate_chap3' => 'setTaxRateChap3',
        'withholding_allowance' => 'setWithholdingAllowance',
        'federal_tax_withheld' => 'setFederalTaxWithheld',
        'tax_not_deposited_indicator' => 'setTaxNotDepositedIndicator',
        'academic_indicator' => 'setAcademicIndicator',
        'tax_withheld_other_agents' => 'setTaxWithheldOtherAgents',
        'amount_repaid' => 'setAmountRepaid',
        'tax_paid_agent' => 'setTaxPaidAgent',
        'chap3_status_code' => 'setChap3StatusCode',
        'chap4_status_code' => 'setChap4StatusCode',
        'primary_withholding_agent' => 'setPrimaryWithholdingAgent',
        'intermediary_or_flow_through' => 'setIntermediaryOrFlowThrough',
        'type' => 'setType',
        'id' => 'setId',
        'issuer_id' => 'setIssuerId',
        'issuer_reference_id' => 'setIssuerReferenceId',
        'issuer_tin' => 'setIssuerTin',
        'tax_year' => 'setTaxYear',
        'reference_id' => 'setReferenceId',
        'tin' => 'setTin',
        'recipient_name' => 'setRecipientName',
        'recipient_second_name' => 'setRecipientSecondName',
        'address' => 'setAddress',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'email' => 'setEmail',
        'account_number' => 'setAccountNumber',
        'office_code' => 'setOfficeCode',
        'non_us_province' => 'setNonUsProvince',
        'country_code' => 'setCountryCode',
        'federal_efile_date' => 'setFederalEfileDate',
        'postal_mail' => 'setPostalMail',
        'state_efile_date' => 'setStateEfileDate',
        'recipient_edelivery_date' => 'setRecipientEdeliveryDate',
        'tin_match' => 'setTinMatch',
        'no_tin' => 'setNoTin',
        'address_verification' => 'setAddressVerification',
        'state_and_local_withholding' => 'setStateAndLocalWithholding',
        'second_tin_notice' => 'setSecondTinNotice',
        'federal_efile_status' => 'setFederalEfileStatus',
        'state_efile_status' => 'setStateEfileStatus',
        'postal_mail_status' => 'setPostalMailStatus',
        'tin_match_status' => 'setTinMatchStatus',
        'address_verification_status' => 'setAddressVerificationStatus',
        'e_delivery_status' => 'setEDeliveryStatus',
        'validation_errors' => 'setValidationErrors',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tin_type' => 'getTinType',
        'unique_form_id' => 'getUniqueFormId',
        'recipient_date_of_birth' => 'getRecipientDateOfBirth',
        'recipient_giin' => 'getRecipientGiin',
        'recipient_foreign_tin' => 'getRecipientForeignTin',
        'lob_code' => 'getLobCode',
        'income_code' => 'getIncomeCode',
        'gross_income' => 'getGrossIncome',
        'withholding_indicator' => 'getWithholdingIndicator',
        'tax_country_code' => 'getTaxCountryCode',
        'exemption_code_chap3' => 'getExemptionCodeChap3',
        'exemption_code_chap4' => 'getExemptionCodeChap4',
        'tax_rate_chap3' => 'getTaxRateChap3',
        'withholding_allowance' => 'getWithholdingAllowance',
        'federal_tax_withheld' => 'getFederalTaxWithheld',
        'tax_not_deposited_indicator' => 'getTaxNotDepositedIndicator',
        'academic_indicator' => 'getAcademicIndicator',
        'tax_withheld_other_agents' => 'getTaxWithheldOtherAgents',
        'amount_repaid' => 'getAmountRepaid',
        'tax_paid_agent' => 'getTaxPaidAgent',
        'chap3_status_code' => 'getChap3StatusCode',
        'chap4_status_code' => 'getChap4StatusCode',
        'primary_withholding_agent' => 'getPrimaryWithholdingAgent',
        'intermediary_or_flow_through' => 'getIntermediaryOrFlowThrough',
        'type' => 'getType',
        'id' => 'getId',
        'issuer_id' => 'getIssuerId',
        'issuer_reference_id' => 'getIssuerReferenceId',
        'issuer_tin' => 'getIssuerTin',
        'tax_year' => 'getTaxYear',
        'reference_id' => 'getReferenceId',
        'tin' => 'getTin',
        'recipient_name' => 'getRecipientName',
        'recipient_second_name' => 'getRecipientSecondName',
        'address' => 'getAddress',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'email' => 'getEmail',
        'account_number' => 'getAccountNumber',
        'office_code' => 'getOfficeCode',
        'non_us_province' => 'getNonUsProvince',
        'country_code' => 'getCountryCode',
        'federal_efile_date' => 'getFederalEfileDate',
        'postal_mail' => 'getPostalMail',
        'state_efile_date' => 'getStateEfileDate',
        'recipient_edelivery_date' => 'getRecipientEdeliveryDate',
        'tin_match' => 'getTinMatch',
        'no_tin' => 'getNoTin',
        'address_verification' => 'getAddressVerification',
        'state_and_local_withholding' => 'getStateAndLocalWithholding',
        'second_tin_notice' => 'getSecondTinNotice',
        'federal_efile_status' => 'getFederalEfileStatus',
        'state_efile_status' => 'getStateEfileStatus',
        'postal_mail_status' => 'getPostalMailStatus',
        'tin_match_status' => 'getTinMatchStatus',
        'address_verification_status' => 'getAddressVerificationStatus',
        'e_delivery_status' => 'getEDeliveryStatus',
        'validation_errors' => 'getValidationErrors',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TIN_TYPE__EMPTY = 'Empty';
    const TIN_TYPE_EIN = 'EIN';
    const TIN_TYPE_SSN = 'SSN';
    const TIN_TYPE_ITIN = 'ITIN';
    const TIN_TYPE_ATIN = 'ATIN';
    const LOB_CODE__01 = '01';
    const LOB_CODE__02 = '02';
    const LOB_CODE__03 = '03';
    const LOB_CODE__04 = '04';
    const LOB_CODE__05 = '05';
    const LOB_CODE__06 = '06';
    const LOB_CODE__07 = '07';
    const LOB_CODE__08 = '08';
    const LOB_CODE__09 = '09';
    const LOB_CODE__10 = '10';
    const LOB_CODE__11 = '11';
    const LOB_CODE__12 = '12';
    const INCOME_CODE__01 = '01';
    const INCOME_CODE__02 = '02';
    const INCOME_CODE__03 = '03';
    const INCOME_CODE__04 = '04';
    const INCOME_CODE__05 = '05';
    const INCOME_CODE__22 = '22';
    const INCOME_CODE__29 = '29';
    const INCOME_CODE__30 = '30';
    const INCOME_CODE__31 = '31';
    const INCOME_CODE__33 = '33';
    const INCOME_CODE__51 = '51';
    const INCOME_CODE__54 = '54';
    const INCOME_CODE__06 = '06';
    const INCOME_CODE__07 = '07';
    const INCOME_CODE__08 = '08';
    const INCOME_CODE__34 = '34';
    const INCOME_CODE__40 = '40';
    const INCOME_CODE__52 = '52';
    const INCOME_CODE__53 = '53';
    const INCOME_CODE__56 = '56';
    const INCOME_CODE__09 = '09';
    const INCOME_CODE__10 = '10';
    const INCOME_CODE__11 = '11';
    const INCOME_CODE__12 = '12';
    const INCOME_CODE__13 = '13';
    const INCOME_CODE__14 = '14';
    const INCOME_CODE__15 = '15';
    const INCOME_CODE__16 = '16';
    const INCOME_CODE__17 = '17';
    const INCOME_CODE__18 = '18';
    const INCOME_CODE__19 = '19';
    const INCOME_CODE__20 = '20';
    const INCOME_CODE__23 = '23';
    const INCOME_CODE__24 = '24';
    const INCOME_CODE__25 = '25';
    const INCOME_CODE__26 = '26';
    const INCOME_CODE__27 = '27';
    const INCOME_CODE__28 = '28';
    const INCOME_CODE__32 = '32';
    const INCOME_CODE__35 = '35';
    const INCOME_CODE__36 = '36';
    const INCOME_CODE__37 = '37';
    const INCOME_CODE__38 = '38';
    const INCOME_CODE__39 = '39';
    const INCOME_CODE__41 = '41';
    const INCOME_CODE__42 = '42';
    const INCOME_CODE__43 = '43';
    const INCOME_CODE__44 = '44';
    const INCOME_CODE__50 = '50';
    const INCOME_CODE__55 = '55';
    const INCOME_CODE__57 = '57';
    const INCOME_CODE__58 = '58';
    const WITHHOLDING_INDICATOR__3 = '3';
    const WITHHOLDING_INDICATOR__4 = '4';
    const EXEMPTION_CODE_CHAP3__00 = '00';
    const EXEMPTION_CODE_CHAP3__01 = '01';
    const EXEMPTION_CODE_CHAP3__02 = '02';
    const EXEMPTION_CODE_CHAP3__03 = '03';
    const EXEMPTION_CODE_CHAP3__04 = '04';
    const EXEMPTION_CODE_CHAP3__05 = '05';
    const EXEMPTION_CODE_CHAP3__06 = '06';
    const EXEMPTION_CODE_CHAP3__07 = '07';
    const EXEMPTION_CODE_CHAP3__08 = '08';
    const EXEMPTION_CODE_CHAP3__09 = '09';
    const EXEMPTION_CODE_CHAP3__10 = '10';
    const EXEMPTION_CODE_CHAP3__11 = '11';
    const EXEMPTION_CODE_CHAP3__12 = '12';
    const EXEMPTION_CODE_CHAP3__22 = '22';
    const EXEMPTION_CODE_CHAP3__23 = '23';
    const EXEMPTION_CODE_CHAP3__24 = '24';
    const EXEMPTION_CODE_CHAP4__00 = '00';
    const EXEMPTION_CODE_CHAP4__13 = '13';
    const EXEMPTION_CODE_CHAP4__14 = '14';
    const EXEMPTION_CODE_CHAP4__15 = '15';
    const EXEMPTION_CODE_CHAP4__16 = '16';
    const EXEMPTION_CODE_CHAP4__17 = '17';
    const EXEMPTION_CODE_CHAP4__18 = '18';
    const EXEMPTION_CODE_CHAP4__19 = '19';
    const EXEMPTION_CODE_CHAP4__20 = '20';
    const EXEMPTION_CODE_CHAP4__21 = '21';
    const TAX_RATE_CHAP3__00_00 = '00.00';
    const TAX_RATE_CHAP3__02_00 = '02.00';
    const TAX_RATE_CHAP3__04_00 = '04.00';
    const TAX_RATE_CHAP3__04_90 = '04.90';
    const TAX_RATE_CHAP3__04_95 = '04.95';
    const TAX_RATE_CHAP3__05_00 = '05.00';
    const TAX_RATE_CHAP3__07_00 = '07.00';
    const TAX_RATE_CHAP3__08_00 = '08.00';
    const TAX_RATE_CHAP3__10_00 = '10.00';
    const TAX_RATE_CHAP3__12_00 = '12.00';
    const TAX_RATE_CHAP3__12_50 = '12.50';
    const TAX_RATE_CHAP3__14_00 = '14.00';
    const TAX_RATE_CHAP3__15_00 = '15.00';
    const TAX_RATE_CHAP3__17_50 = '17.50';
    const TAX_RATE_CHAP3__20_00 = '20.00';
    const TAX_RATE_CHAP3__21_00 = '21.00';
    const TAX_RATE_CHAP3__24_00 = '24.00';
    const TAX_RATE_CHAP3__25_00 = '25.00';
    const TAX_RATE_CHAP3__27_50 = '27.50';
    const TAX_RATE_CHAP3__28_00 = '28.00';
    const TAX_RATE_CHAP3__30_00 = '30.00';
    const TAX_RATE_CHAP3__37_00 = '37.00';
    const CHAP3_STATUS_CODE__01 = '01';
    const CHAP3_STATUS_CODE__02 = '02';
    const CHAP3_STATUS_CODE__34 = '34';
    const CHAP3_STATUS_CODE__03 = '03';
    const CHAP3_STATUS_CODE__04 = '04';
    const CHAP3_STATUS_CODE__05 = '05';
    const CHAP3_STATUS_CODE__06 = '06';
    const CHAP3_STATUS_CODE__07 = '07';
    const CHAP3_STATUS_CODE__08 = '08';
    const CHAP3_STATUS_CODE__09 = '09';
    const CHAP3_STATUS_CODE__10 = '10';
    const CHAP3_STATUS_CODE__11 = '11';
    const CHAP3_STATUS_CODE__12 = '12';
    const CHAP3_STATUS_CODE__13 = '13';
    const CHAP3_STATUS_CODE__14 = '14';
    const CHAP3_STATUS_CODE__15 = '15';
    const CHAP3_STATUS_CODE__16 = '16';
    const CHAP3_STATUS_CODE__17 = '17';
    const CHAP3_STATUS_CODE__18 = '18';
    const CHAP3_STATUS_CODE__19 = '19';
    const CHAP3_STATUS_CODE__20 = '20';
    const CHAP3_STATUS_CODE__21 = '21';
    const CHAP3_STATUS_CODE__22 = '22';
    const CHAP3_STATUS_CODE__23 = '23';
    const CHAP3_STATUS_CODE__24 = '24';
    const CHAP3_STATUS_CODE__25 = '25';
    const CHAP3_STATUS_CODE__26 = '26';
    const CHAP3_STATUS_CODE__27 = '27';
    const CHAP3_STATUS_CODE__28 = '28';
    const CHAP3_STATUS_CODE__29 = '29';
    const CHAP3_STATUS_CODE__30 = '30';
    const CHAP3_STATUS_CODE__31 = '31';
    const CHAP3_STATUS_CODE__32 = '32';
    const CHAP3_STATUS_CODE__35 = '35';
    const CHAP3_STATUS_CODE__36 = '36';
    const CHAP3_STATUS_CODE__37 = '37';
    const CHAP3_STATUS_CODE__38 = '38';
    const CHAP3_STATUS_CODE__39 = '39';
    const CHAP4_STATUS_CODE__01 = '01';
    const CHAP4_STATUS_CODE__02 = '02';
    const CHAP4_STATUS_CODE__03 = '03';
    const CHAP4_STATUS_CODE__04 = '04';
    const CHAP4_STATUS_CODE__05 = '05';
    const CHAP4_STATUS_CODE__06 = '06';
    const CHAP4_STATUS_CODE__07 = '07';
    const CHAP4_STATUS_CODE__08 = '08';
    const CHAP4_STATUS_CODE__09 = '09';
    const CHAP4_STATUS_CODE__10 = '10';
    const CHAP4_STATUS_CODE__11 = '11';
    const CHAP4_STATUS_CODE__12 = '12';
    const CHAP4_STATUS_CODE__13 = '13';
    const CHAP4_STATUS_CODE__14 = '14';
    const CHAP4_STATUS_CODE__15 = '15';
    const CHAP4_STATUS_CODE__16 = '16';
    const CHAP4_STATUS_CODE__17 = '17';
    const CHAP4_STATUS_CODE__18 = '18';
    const CHAP4_STATUS_CODE__19 = '19';
    const CHAP4_STATUS_CODE__20 = '20';
    const CHAP4_STATUS_CODE__21 = '21';
    const CHAP4_STATUS_CODE__22 = '22';
    const CHAP4_STATUS_CODE__23 = '23';
    const CHAP4_STATUS_CODE__24 = '24';
    const CHAP4_STATUS_CODE__25 = '25';
    const CHAP4_STATUS_CODE__26 = '26';
    const CHAP4_STATUS_CODE__27 = '27';
    const CHAP4_STATUS_CODE__28 = '28';
    const CHAP4_STATUS_CODE__29 = '29';
    const CHAP4_STATUS_CODE__30 = '30';
    const CHAP4_STATUS_CODE__31 = '31';
    const CHAP4_STATUS_CODE__32 = '32';
    const CHAP4_STATUS_CODE__33 = '33';
    const CHAP4_STATUS_CODE__34 = '34';
    const CHAP4_STATUS_CODE__35 = '35';
    const CHAP4_STATUS_CODE__36 = '36';
    const CHAP4_STATUS_CODE__37 = '37';
    const CHAP4_STATUS_CODE__38 = '38';
    const CHAP4_STATUS_CODE__39 = '39';
    const CHAP4_STATUS_CODE__40 = '40';
    const CHAP4_STATUS_CODE__41 = '41';
    const CHAP4_STATUS_CODE__42 = '42';
    const CHAP4_STATUS_CODE__43 = '43';
    const CHAP4_STATUS_CODE__44 = '44';
    const CHAP4_STATUS_CODE__45 = '45';
    const CHAP4_STATUS_CODE__46 = '46';
    const CHAP4_STATUS_CODE__47 = '47';
    const CHAP4_STATUS_CODE__48 = '48';
    const CHAP4_STATUS_CODE__49 = '49';
    const CHAP4_STATUS_CODE__50 = '50';
    const TYPE__1099_NEC = '1099-NEC';
    const TYPE__1099_MISC = '1099-MISC';
    const TYPE__1099_DIV = '1099-DIV';
    const TYPE__1099_R = '1099-R';
    const TYPE__1099_K = '1099-K';
    const TYPE__1095_B = '1095-B';
    const TYPE__1042_S = '1042-S';
    const TYPE__1095_C = '1095-C';
    const TYPE__1099_INT = '1099-INT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTinTypeAllowableValues()
    {
        return [
            self::TIN_TYPE__EMPTY,
            self::TIN_TYPE_EIN,
            self::TIN_TYPE_SSN,
            self::TIN_TYPE_ITIN,
            self::TIN_TYPE_ATIN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLobCodeAllowableValues()
    {
        return [
            self::LOB_CODE__01,
            self::LOB_CODE__02,
            self::LOB_CODE__03,
            self::LOB_CODE__04,
            self::LOB_CODE__05,
            self::LOB_CODE__06,
            self::LOB_CODE__07,
            self::LOB_CODE__08,
            self::LOB_CODE__09,
            self::LOB_CODE__10,
            self::LOB_CODE__11,
            self::LOB_CODE__12,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncomeCodeAllowableValues()
    {
        return [
            self::INCOME_CODE__01,
            self::INCOME_CODE__02,
            self::INCOME_CODE__03,
            self::INCOME_CODE__04,
            self::INCOME_CODE__05,
            self::INCOME_CODE__22,
            self::INCOME_CODE__29,
            self::INCOME_CODE__30,
            self::INCOME_CODE__31,
            self::INCOME_CODE__33,
            self::INCOME_CODE__51,
            self::INCOME_CODE__54,
            self::INCOME_CODE__06,
            self::INCOME_CODE__07,
            self::INCOME_CODE__08,
            self::INCOME_CODE__34,
            self::INCOME_CODE__40,
            self::INCOME_CODE__52,
            self::INCOME_CODE__53,
            self::INCOME_CODE__56,
            self::INCOME_CODE__09,
            self::INCOME_CODE__10,
            self::INCOME_CODE__11,
            self::INCOME_CODE__12,
            self::INCOME_CODE__13,
            self::INCOME_CODE__14,
            self::INCOME_CODE__15,
            self::INCOME_CODE__16,
            self::INCOME_CODE__17,
            self::INCOME_CODE__18,
            self::INCOME_CODE__19,
            self::INCOME_CODE__20,
            self::INCOME_CODE__23,
            self::INCOME_CODE__24,
            self::INCOME_CODE__25,
            self::INCOME_CODE__26,
            self::INCOME_CODE__27,
            self::INCOME_CODE__28,
            self::INCOME_CODE__32,
            self::INCOME_CODE__35,
            self::INCOME_CODE__36,
            self::INCOME_CODE__37,
            self::INCOME_CODE__38,
            self::INCOME_CODE__39,
            self::INCOME_CODE__41,
            self::INCOME_CODE__42,
            self::INCOME_CODE__43,
            self::INCOME_CODE__44,
            self::INCOME_CODE__50,
            self::INCOME_CODE__55,
            self::INCOME_CODE__57,
            self::INCOME_CODE__58,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWithholdingIndicatorAllowableValues()
    {
        return [
            self::WITHHOLDING_INDICATOR__3,
            self::WITHHOLDING_INDICATOR__4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExemptionCodeChap3AllowableValues()
    {
        return [
            self::EXEMPTION_CODE_CHAP3__00,
            self::EXEMPTION_CODE_CHAP3__01,
            self::EXEMPTION_CODE_CHAP3__02,
            self::EXEMPTION_CODE_CHAP3__03,
            self::EXEMPTION_CODE_CHAP3__04,
            self::EXEMPTION_CODE_CHAP3__05,
            self::EXEMPTION_CODE_CHAP3__06,
            self::EXEMPTION_CODE_CHAP3__07,
            self::EXEMPTION_CODE_CHAP3__08,
            self::EXEMPTION_CODE_CHAP3__09,
            self::EXEMPTION_CODE_CHAP3__10,
            self::EXEMPTION_CODE_CHAP3__11,
            self::EXEMPTION_CODE_CHAP3__12,
            self::EXEMPTION_CODE_CHAP3__22,
            self::EXEMPTION_CODE_CHAP3__23,
            self::EXEMPTION_CODE_CHAP3__24,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExemptionCodeChap4AllowableValues()
    {
        return [
            self::EXEMPTION_CODE_CHAP4__00,
            self::EXEMPTION_CODE_CHAP4__13,
            self::EXEMPTION_CODE_CHAP4__14,
            self::EXEMPTION_CODE_CHAP4__15,
            self::EXEMPTION_CODE_CHAP4__16,
            self::EXEMPTION_CODE_CHAP4__17,
            self::EXEMPTION_CODE_CHAP4__18,
            self::EXEMPTION_CODE_CHAP4__19,
            self::EXEMPTION_CODE_CHAP4__20,
            self::EXEMPTION_CODE_CHAP4__21,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxRateChap3AllowableValues()
    {
        return [
            self::TAX_RATE_CHAP3__00_00,
            self::TAX_RATE_CHAP3__02_00,
            self::TAX_RATE_CHAP3__04_00,
            self::TAX_RATE_CHAP3__04_90,
            self::TAX_RATE_CHAP3__04_95,
            self::TAX_RATE_CHAP3__05_00,
            self::TAX_RATE_CHAP3__07_00,
            self::TAX_RATE_CHAP3__08_00,
            self::TAX_RATE_CHAP3__10_00,
            self::TAX_RATE_CHAP3__12_00,
            self::TAX_RATE_CHAP3__12_50,
            self::TAX_RATE_CHAP3__14_00,
            self::TAX_RATE_CHAP3__15_00,
            self::TAX_RATE_CHAP3__17_50,
            self::TAX_RATE_CHAP3__20_00,
            self::TAX_RATE_CHAP3__21_00,
            self::TAX_RATE_CHAP3__24_00,
            self::TAX_RATE_CHAP3__25_00,
            self::TAX_RATE_CHAP3__27_50,
            self::TAX_RATE_CHAP3__28_00,
            self::TAX_RATE_CHAP3__30_00,
            self::TAX_RATE_CHAP3__37_00,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChap3StatusCodeAllowableValues()
    {
        return [
            self::CHAP3_STATUS_CODE__01,
            self::CHAP3_STATUS_CODE__02,
            self::CHAP3_STATUS_CODE__34,
            self::CHAP3_STATUS_CODE__03,
            self::CHAP3_STATUS_CODE__04,
            self::CHAP3_STATUS_CODE__05,
            self::CHAP3_STATUS_CODE__06,
            self::CHAP3_STATUS_CODE__07,
            self::CHAP3_STATUS_CODE__08,
            self::CHAP3_STATUS_CODE__09,
            self::CHAP3_STATUS_CODE__10,
            self::CHAP3_STATUS_CODE__11,
            self::CHAP3_STATUS_CODE__12,
            self::CHAP3_STATUS_CODE__13,
            self::CHAP3_STATUS_CODE__14,
            self::CHAP3_STATUS_CODE__15,
            self::CHAP3_STATUS_CODE__16,
            self::CHAP3_STATUS_CODE__17,
            self::CHAP3_STATUS_CODE__18,
            self::CHAP3_STATUS_CODE__19,
            self::CHAP3_STATUS_CODE__20,
            self::CHAP3_STATUS_CODE__21,
            self::CHAP3_STATUS_CODE__22,
            self::CHAP3_STATUS_CODE__23,
            self::CHAP3_STATUS_CODE__24,
            self::CHAP3_STATUS_CODE__25,
            self::CHAP3_STATUS_CODE__26,
            self::CHAP3_STATUS_CODE__27,
            self::CHAP3_STATUS_CODE__28,
            self::CHAP3_STATUS_CODE__29,
            self::CHAP3_STATUS_CODE__30,
            self::CHAP3_STATUS_CODE__31,
            self::CHAP3_STATUS_CODE__32,
            self::CHAP3_STATUS_CODE__35,
            self::CHAP3_STATUS_CODE__36,
            self::CHAP3_STATUS_CODE__37,
            self::CHAP3_STATUS_CODE__38,
            self::CHAP3_STATUS_CODE__39,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChap4StatusCodeAllowableValues()
    {
        return [
            self::CHAP4_STATUS_CODE__01,
            self::CHAP4_STATUS_CODE__02,
            self::CHAP4_STATUS_CODE__03,
            self::CHAP4_STATUS_CODE__04,
            self::CHAP4_STATUS_CODE__05,
            self::CHAP4_STATUS_CODE__06,
            self::CHAP4_STATUS_CODE__07,
            self::CHAP4_STATUS_CODE__08,
            self::CHAP4_STATUS_CODE__09,
            self::CHAP4_STATUS_CODE__10,
            self::CHAP4_STATUS_CODE__11,
            self::CHAP4_STATUS_CODE__12,
            self::CHAP4_STATUS_CODE__13,
            self::CHAP4_STATUS_CODE__14,
            self::CHAP4_STATUS_CODE__15,
            self::CHAP4_STATUS_CODE__16,
            self::CHAP4_STATUS_CODE__17,
            self::CHAP4_STATUS_CODE__18,
            self::CHAP4_STATUS_CODE__19,
            self::CHAP4_STATUS_CODE__20,
            self::CHAP4_STATUS_CODE__21,
            self::CHAP4_STATUS_CODE__22,
            self::CHAP4_STATUS_CODE__23,
            self::CHAP4_STATUS_CODE__24,
            self::CHAP4_STATUS_CODE__25,
            self::CHAP4_STATUS_CODE__26,
            self::CHAP4_STATUS_CODE__27,
            self::CHAP4_STATUS_CODE__28,
            self::CHAP4_STATUS_CODE__29,
            self::CHAP4_STATUS_CODE__30,
            self::CHAP4_STATUS_CODE__31,
            self::CHAP4_STATUS_CODE__32,
            self::CHAP4_STATUS_CODE__33,
            self::CHAP4_STATUS_CODE__34,
            self::CHAP4_STATUS_CODE__35,
            self::CHAP4_STATUS_CODE__36,
            self::CHAP4_STATUS_CODE__37,
            self::CHAP4_STATUS_CODE__38,
            self::CHAP4_STATUS_CODE__39,
            self::CHAP4_STATUS_CODE__40,
            self::CHAP4_STATUS_CODE__41,
            self::CHAP4_STATUS_CODE__42,
            self::CHAP4_STATUS_CODE__43,
            self::CHAP4_STATUS_CODE__44,
            self::CHAP4_STATUS_CODE__45,
            self::CHAP4_STATUS_CODE__46,
            self::CHAP4_STATUS_CODE__47,
            self::CHAP4_STATUS_CODE__48,
            self::CHAP4_STATUS_CODE__49,
            self::CHAP4_STATUS_CODE__50,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE__1099_NEC,
            self::TYPE__1099_MISC,
            self::TYPE__1099_DIV,
            self::TYPE__1099_R,
            self::TYPE__1099_K,
            self::TYPE__1095_B,
            self::TYPE__1042_S,
            self::TYPE__1095_C,
            self::TYPE__1099_INT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tin_type'] = $data['tin_type'] ?? null;
        $this->container['unique_form_id'] = $data['unique_form_id'] ?? null;
        $this->container['recipient_date_of_birth'] = $data['recipient_date_of_birth'] ?? null;
        $this->container['recipient_giin'] = $data['recipient_giin'] ?? null;
        $this->container['recipient_foreign_tin'] = $data['recipient_foreign_tin'] ?? null;
        $this->container['lob_code'] = $data['lob_code'] ?? null;
        $this->container['income_code'] = $data['income_code'] ?? null;
        $this->container['gross_income'] = $data['gross_income'] ?? null;
        $this->container['withholding_indicator'] = $data['withholding_indicator'] ?? null;
        $this->container['tax_country_code'] = $data['tax_country_code'] ?? null;
        $this->container['exemption_code_chap3'] = $data['exemption_code_chap3'] ?? null;
        $this->container['exemption_code_chap4'] = $data['exemption_code_chap4'] ?? null;
        $this->container['tax_rate_chap3'] = $data['tax_rate_chap3'] ?? null;
        $this->container['withholding_allowance'] = $data['withholding_allowance'] ?? null;
        $this->container['federal_tax_withheld'] = $data['federal_tax_withheld'] ?? null;
        $this->container['tax_not_deposited_indicator'] = $data['tax_not_deposited_indicator'] ?? null;
        $this->container['academic_indicator'] = $data['academic_indicator'] ?? null;
        $this->container['tax_withheld_other_agents'] = $data['tax_withheld_other_agents'] ?? null;
        $this->container['amount_repaid'] = $data['amount_repaid'] ?? null;
        $this->container['tax_paid_agent'] = $data['tax_paid_agent'] ?? null;
        $this->container['chap3_status_code'] = $data['chap3_status_code'] ?? null;
        $this->container['chap4_status_code'] = $data['chap4_status_code'] ?? null;
        $this->container['primary_withholding_agent'] = $data['primary_withholding_agent'] ?? null;
        $this->container['intermediary_or_flow_through'] = $data['intermediary_or_flow_through'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['issuer_id'] = $data['issuer_id'] ?? null;
        $this->container['issuer_reference_id'] = $data['issuer_reference_id'] ?? null;
        $this->container['issuer_tin'] = $data['issuer_tin'] ?? null;
        $this->container['tax_year'] = $data['tax_year'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['tin'] = $data['tin'] ?? null;
        $this->container['recipient_name'] = $data['recipient_name'] ?? null;
        $this->container['recipient_second_name'] = $data['recipient_second_name'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['address2'] = $data['address2'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['office_code'] = $data['office_code'] ?? null;
        $this->container['non_us_province'] = $data['non_us_province'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['federal_efile_date'] = $data['federal_efile_date'] ?? null;
        $this->container['postal_mail'] = $data['postal_mail'] ?? null;
        $this->container['state_efile_date'] = $data['state_efile_date'] ?? null;
        $this->container['recipient_edelivery_date'] = $data['recipient_edelivery_date'] ?? null;
        $this->container['tin_match'] = $data['tin_match'] ?? null;
        $this->container['no_tin'] = $data['no_tin'] ?? null;
        $this->container['address_verification'] = $data['address_verification'] ?? null;
        $this->container['state_and_local_withholding'] = $data['state_and_local_withholding'] ?? null;
        $this->container['second_tin_notice'] = $data['second_tin_notice'] ?? null;
        $this->container['federal_efile_status'] = $data['federal_efile_status'] ?? null;
        $this->container['state_efile_status'] = $data['state_efile_status'] ?? null;
        $this->container['postal_mail_status'] = $data['postal_mail_status'] ?? null;
        $this->container['tin_match_status'] = $data['tin_match_status'] ?? null;
        $this->container['address_verification_status'] = $data['address_verification_status'] ?? null;
        $this->container['e_delivery_status'] = $data['e_delivery_status'] ?? null;
        $this->container['validation_errors'] = $data['validation_errors'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTinTypeAllowableValues();
        if (!is_null($this->container['tin_type']) && !in_array($this->container['tin_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tin_type', must be one of '%s'",
                $this->container['tin_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['unique_form_id'] === null) {
            $invalidProperties[] = "'unique_form_id' can't be null";
        }
        $allowedValues = $this->getLobCodeAllowableValues();
        if (!is_null($this->container['lob_code']) && !in_array($this->container['lob_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lob_code', must be one of '%s'",
                $this->container['lob_code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['income_code'] === null) {
            $invalidProperties[] = "'income_code' can't be null";
        }
        $allowedValues = $this->getIncomeCodeAllowableValues();
        if (!is_null($this->container['income_code']) && !in_array($this->container['income_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'income_code', must be one of '%s'",
                $this->container['income_code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['gross_income'] === null) {
            $invalidProperties[] = "'gross_income' can't be null";
        }
        if ($this->container['withholding_indicator'] === null) {
            $invalidProperties[] = "'withholding_indicator' can't be null";
        }
        $allowedValues = $this->getWithholdingIndicatorAllowableValues();
        if (!is_null($this->container['withholding_indicator']) && !in_array($this->container['withholding_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'withholding_indicator', must be one of '%s'",
                $this->container['withholding_indicator'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tax_country_code'] === null) {
            $invalidProperties[] = "'tax_country_code' can't be null";
        }
        $allowedValues = $this->getExemptionCodeChap3AllowableValues();
        if (!is_null($this->container['exemption_code_chap3']) && !in_array($this->container['exemption_code_chap3'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'exemption_code_chap3', must be one of '%s'",
                $this->container['exemption_code_chap3'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExemptionCodeChap4AllowableValues();
        if (!is_null($this->container['exemption_code_chap4']) && !in_array($this->container['exemption_code_chap4'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'exemption_code_chap4', must be one of '%s'",
                $this->container['exemption_code_chap4'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxRateChap3AllowableValues();
        if (!is_null($this->container['tax_rate_chap3']) && !in_array($this->container['tax_rate_chap3'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_rate_chap3', must be one of '%s'",
                $this->container['tax_rate_chap3'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChap3StatusCodeAllowableValues();
        if (!is_null($this->container['chap3_status_code']) && !in_array($this->container['chap3_status_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'chap3_status_code', must be one of '%s'",
                $this->container['chap3_status_code'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChap4StatusCodeAllowableValues();
        if (!is_null($this->container['chap4_status_code']) && !in_array($this->container['chap4_status_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'chap4_status_code', must be one of '%s'",
                $this->container['chap4_status_code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['recipient_name'] === null) {
            $invalidProperties[] = "'recipient_name' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tin_type
     *
     * @return string|null
     */
    public function getTinType()
    {
        return $this->container['tin_type'];
    }

    /**
     * Sets tin_type
     *
     * @param string|null $tin_type tin_type
     *
     * @return self
     */
    public function setTinType($tin_type)
    {
        $allowedValues = $this->getTinTypeAllowableValues();
        if (!is_null($tin_type) && !in_array($tin_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tin_type', must be one of '%s'",
                    $tin_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tin_type'] = $tin_type;

        return $this;
    }

    /**
     * Gets unique_form_id
     *
     * @return string
     */
    public function getUniqueFormId()
    {
        return $this->container['unique_form_id'];
    }

    /**
     * Sets unique_form_id
     *
     * @param string $unique_form_id Unique form identifier
     *
     * @return self
     */
    public function setUniqueFormId($unique_form_id)
    {
        $this->container['unique_form_id'] = $unique_form_id;

        return $this;
    }

    /**
     * Gets recipient_date_of_birth
     *
     * @return \DateTime|null
     */
    public function getRecipientDateOfBirth()
    {
        return $this->container['recipient_date_of_birth'];
    }

    /**
     * Sets recipient_date_of_birth
     *
     * @param \DateTime|null $recipient_date_of_birth Recipient's date of birth
     *
     * @return self
     */
    public function setRecipientDateOfBirth($recipient_date_of_birth)
    {
        $this->container['recipient_date_of_birth'] = $recipient_date_of_birth;

        return $this;
    }

    /**
     * Gets recipient_giin
     *
     * @return string|null
     */
    public function getRecipientGiin()
    {
        return $this->container['recipient_giin'];
    }

    /**
     * Sets recipient_giin
     *
     * @param string|null $recipient_giin Recipient's Global Intermediary Identification Number (GIIN). A valid GIIN looks like 'XXXXXX.XXXXX.XX.XXX'.
     *
     * @return self
     */
    public function setRecipientGiin($recipient_giin)
    {
        $this->container['recipient_giin'] = $recipient_giin;

        return $this;
    }

    /**
     * Gets recipient_foreign_tin
     *
     * @return string|null
     */
    public function getRecipientForeignTin()
    {
        return $this->container['recipient_foreign_tin'];
    }

    /**
     * Sets recipient_foreign_tin
     *
     * @param string|null $recipient_foreign_tin Recipient's foreign TIN. Required if email is specified, must fill either this or Chap3StatusCode.
     *
     * @return self
     */
    public function setRecipientForeignTin($recipient_foreign_tin)
    {
        $this->container['recipient_foreign_tin'] = $recipient_foreign_tin;

        return $this;
    }

    /**
     * Gets lob_code
     *
     * @return string|null
     */
    public function getLobCode()
    {
        return $this->container['lob_code'];
    }

    /**
     * Sets lob_code
     *
     * @param string|null $lob_code Limitation on Benefits (LOB) code for tax treaty purposes.  Available values:  - 01: Individual (Deprecated - valid only for tax years prior to 2019)  - 02: Government - contracting state/political subdivision/local authority  - 03: Tax exempt pension trust/Pension fund  - 04: Tax exempt/Charitable organization  - 05: Publicly-traded corporation  - 06: Subsidiary of publicly-traded corporation  - 07: Company that meets the ownership and base erosion test  - 08: Company that meets the derivative benefits test  - 09: Company with an item of income that meets the active trade or business test  - 10: Discretionary determination  - 11: Other  - 12: No LOB article in treaty
     *
     * @return self
     */
    public function setLobCode($lob_code)
    {
        $allowedValues = $this->getLobCodeAllowableValues();
        if (!is_null($lob_code) && !in_array($lob_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lob_code', must be one of '%s'",
                    $lob_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lob_code'] = $lob_code;

        return $this;
    }

    /**
     * Gets income_code
     *
     * @return string
     */
    public function getIncomeCode()
    {
        return $this->container['income_code'];
    }

    /**
     * Sets income_code
     *
     * @param string $income_code Income code.  Available values:    Interest:  - 01: Interest paid by US obligors - general  - 02: Interest paid on real property mortgages  - 03: Interest paid to controlling foreign corporations  - 04: Interest paid by foreign corporations  - 05: Interest on tax-free covenant bonds  - 22: Interest paid on deposit with a foreign branch of a domestic corporation or partnership  - 29: Deposit interest  - 30: Original issue discount (OID)  - 31: Short-term OID  - 33: Substitute payment - interest  - 51: Interest paid on certain actively traded or publicly offered securities(1)  - 54: Substitute payments - interest from certain actively traded or publicly offered securities(1)    Dividend:  - 06: Dividends paid by U.S. corporations - general  - 07: Dividends qualifying for direct dividend rate  - 08: Dividends paid by foreign corporations  - 34: Substitute payment - dividends  - 40: Other dividend equivalents under IRC section 871(m) (formerly 871(l))  - 52: Dividends paid on certain actively traded or publicly offered securities(1)  - 53: Substitute payments - dividends from certain actively traded or publicly offered securities(1)  - 56: Dividend equivalents under IRC section 871(m) as a result of applying the combined transaction rules    Other:  - 09: Capital gains  - 10: Industrial royalties  - 11: Motion picture or television copyright royalties  - 12: Other royalties (for example, copyright, software, broadcasting, endorsement payments)  - 13: Royalties paid on certain publicly offered securities(1)  - 14: Real property income and natural resources royalties  - 15: Pensions, annuities, alimony, and/or insurance premiums  - 16: Scholarship or fellowship grants  - 17: Compensation for independent personal services(2)  - 18: Compensation for dependent personal services(2)  - 19: Compensation for teaching(2)  - 20: Compensation during studying and training(2)  - 23: Other income  - 24: Qualified investment entity (QIE) distributions of capital gains  - 25: Trust distributions subject to IRC section 1445  - 26: Unsevered growing crops and timber distributions by a trust subject to IRC section 1445  - 27: Publicly traded partnership distributions subject to IRC section 1446  - 28: Gambling winnings(3)  - 32: Notional principal contract income(4)  - 35: Substitute payment - other  - 36: Capital gains distributions  - 37: Return of capital  - 38: Eligible deferred compensation items subject to IRC section 877A(d)(1)  - 39: Distributions from a nongrantor trust subject to IRC section 877A(f)(1)  - 41: Guarantee of indebtedness  - 42: Earnings as an artist or athlete - no central withholding agreement(5)  - 43: Earnings as an artist or athlete - central withholding agreement(5)  - 44: Specified Federal procurement payments  - 50: Income previously reported under escrow procedure(6)  - 55: Taxable death benefits on life insurance contracts  - 57: Amount realized under IRC section 1446(f)  - 58: Publicly traded partnership distributions-undetermined
     *
     * @return self
     */
    public function setIncomeCode($income_code)
    {
        $allowedValues = $this->getIncomeCodeAllowableValues();
        if (!in_array($income_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'income_code', must be one of '%s'",
                    $income_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['income_code'] = $income_code;

        return $this;
    }

    /**
     * Gets gross_income
     *
     * @return float
     */
    public function getGrossIncome()
    {
        return $this->container['gross_income'];
    }

    /**
     * Sets gross_income
     *
     * @param float $gross_income Gross income
     *
     * @return self
     */
    public function setGrossIncome($gross_income)
    {
        $this->container['gross_income'] = $gross_income;

        return $this;
    }

    /**
     * Gets withholding_indicator
     *
     * @return string
     */
    public function getWithholdingIndicator()
    {
        return $this->container['withholding_indicator'];
    }

    /**
     * Sets withholding_indicator
     *
     * @param string $withholding_indicator Withholding indicator  Available values:  - 3: Chapter 3  - 4: Chapter 4
     *
     * @return self
     */
    public function setWithholdingIndicator($withholding_indicator)
    {
        $allowedValues = $this->getWithholdingIndicatorAllowableValues();
        if (!in_array($withholding_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'withholding_indicator', must be one of '%s'",
                    $withholding_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['withholding_indicator'] = $withholding_indicator;

        return $this;
    }

    /**
     * Gets tax_country_code
     *
     * @return string
     */
    public function getTaxCountryCode()
    {
        return $this->container['tax_country_code'];
    }

    /**
     * Sets tax_country_code
     *
     * @param string $tax_country_code Country code
     *
     * @return self
     */
    public function setTaxCountryCode($tax_country_code)
    {
        $this->container['tax_country_code'] = $tax_country_code;

        return $this;
    }

    /**
     * Gets exemption_code_chap3
     *
     * @return string|null
     */
    public function getExemptionCodeChap3()
    {
        return $this->container['exemption_code_chap3'];
    }

    /**
     * Sets exemption_code_chap3
     *
     * @param string|null $exemption_code_chap3 Exemption code (Chapter 3). Required if WithholdingIndicator is 3 (Chapter 3). Required when using TaxRateChap3.  Available values:  - Empty: Tax rate is due to backup withholding  - 00: Not exempt  - 01: Effectively connected income  - 02: Exempt under IRC (other than portfolio interest)  - 03: Income is not from US sources  - 04: Exempt under tax treaty  - 05: Portfolio interest exempt under IRC  - 06: QI that assumes primary withholding responsibility  - 07: WFP or WFT  - 08: U.S. branch treated as U.S. Person  - 09: Territory FI treated as U.S. Person  - 10: QI represents that income is exempt  - 11: QSL that assumes primary withholding responsibility  - 12: Payee subjected to chapter 4 withholding  - 22: QDD that assumes primary withholding responsibility  - 23: Exempt under section 897(l)  - 24: Exempt under section 892
     *
     * @return self
     */
    public function setExemptionCodeChap3($exemption_code_chap3)
    {
        $allowedValues = $this->getExemptionCodeChap3AllowableValues();
        if (!is_null($exemption_code_chap3) && !in_array($exemption_code_chap3, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'exemption_code_chap3', must be one of '%s'",
                    $exemption_code_chap3,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exemption_code_chap3'] = $exemption_code_chap3;

        return $this;
    }

    /**
     * Gets exemption_code_chap4
     *
     * @return string|null
     */
    public function getExemptionCodeChap4()
    {
        return $this->container['exemption_code_chap4'];
    }

    /**
     * Sets exemption_code_chap4
     *
     * @param string|null $exemption_code_chap4 Exemption code (Chapter 4). Required if WithholdingIndicator is 4 (Chapter 4).  Available values:  - 00: Not exempt  - 13: Grandfathered payment  - 14: Effectively connected income  - 15: Payee not subject to chapter 4 withholding  - 16: Excluded nonfinancial payment  - 17: Foreign Entity that assumes primary withholding responsibility  - 18: U.S. Payees - of participating FFI or registered deemed - compliant FFI  - 19: Exempt from withholding under IGA(6)  - 20: Dormant account(7)  - 21: Other - payment not subject to chapter 4 withholding
     *
     * @return self
     */
    public function setExemptionCodeChap4($exemption_code_chap4)
    {
        $allowedValues = $this->getExemptionCodeChap4AllowableValues();
        if (!is_null($exemption_code_chap4) && !in_array($exemption_code_chap4, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'exemption_code_chap4', must be one of '%s'",
                    $exemption_code_chap4,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exemption_code_chap4'] = $exemption_code_chap4;

        return $this;
    }

    /**
     * Gets tax_rate_chap3
     *
     * @return string|null
     */
    public function getTaxRateChap3()
    {
        return $this->container['tax_rate_chap3'];
    }

    /**
     * Sets tax_rate_chap3
     *
     * @param string|null $tax_rate_chap3 Tax rate (Chapter 3) - Required if WithholdingIndicator is 3 (Chapter 3).  Available values:  - 00.00: 0.00%  - 02.00: 2.00%  - 04.00: 4.00%  - 04.90: 4.90%  - 04.95: 4.95%  - 05.00: 5.00%  - 07.00: 7.00%  - 08.00: 8.00%  - 10.00: 10.00%  - 12.00: 12.00%  - 12.50: 12.50%  - 14.00: 14.00%  - 15.00: 15.00%  - 17.50: 17.50%  - 20.00: 20.00%  - 21.00: 21.00%  - 24.00: 24.00%  - 25.00: 25.00%  - 27.50: 27.50%  - 28.00: 28.00%  - 30.00: 30.00%  - 37.00: 37.00%
     *
     * @return self
     */
    public function setTaxRateChap3($tax_rate_chap3)
    {
        $allowedValues = $this->getTaxRateChap3AllowableValues();
        if (!is_null($tax_rate_chap3) && !in_array($tax_rate_chap3, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_rate_chap3', must be one of '%s'",
                    $tax_rate_chap3,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_rate_chap3'] = $tax_rate_chap3;

        return $this;
    }

    /**
     * Gets withholding_allowance
     *
     * @return float|null
     */
    public function getWithholdingAllowance()
    {
        return $this->container['withholding_allowance'];
    }

    /**
     * Sets withholding_allowance
     *
     * @param float|null $withholding_allowance Withholding allowance
     *
     * @return self
     */
    public function setWithholdingAllowance($withholding_allowance)
    {
        $this->container['withholding_allowance'] = $withholding_allowance;

        return $this;
    }

    /**
     * Gets federal_tax_withheld
     *
     * @return float|null
     */
    public function getFederalTaxWithheld()
    {
        return $this->container['federal_tax_withheld'];
    }

    /**
     * Sets federal_tax_withheld
     *
     * @param float|null $federal_tax_withheld Federal tax withheld
     *
     * @return self
     */
    public function setFederalTaxWithheld($federal_tax_withheld)
    {
        $this->container['federal_tax_withheld'] = $federal_tax_withheld;

        return $this;
    }

    /**
     * Gets tax_not_deposited_indicator
     *
     * @return bool|null
     */
    public function getTaxNotDepositedIndicator()
    {
        return $this->container['tax_not_deposited_indicator'];
    }

    /**
     * Sets tax_not_deposited_indicator
     *
     * @param bool|null $tax_not_deposited_indicator Tax not deposited indicator
     *
     * @return self
     */
    public function setTaxNotDepositedIndicator($tax_not_deposited_indicator)
    {
        $this->container['tax_not_deposited_indicator'] = $tax_not_deposited_indicator;

        return $this;
    }

    /**
     * Gets academic_indicator
     *
     * @return bool|null
     */
    public function getAcademicIndicator()
    {
        return $this->container['academic_indicator'];
    }

    /**
     * Sets academic_indicator
     *
     * @param bool|null $academic_indicator Academic indicator
     *
     * @return self
     */
    public function setAcademicIndicator($academic_indicator)
    {
        $this->container['academic_indicator'] = $academic_indicator;

        return $this;
    }

    /**
     * Gets tax_withheld_other_agents
     *
     * @return float|null
     */
    public function getTaxWithheldOtherAgents()
    {
        return $this->container['tax_withheld_other_agents'];
    }

    /**
     * Sets tax_withheld_other_agents
     *
     * @param float|null $tax_withheld_other_agents Tax withheld by other agents
     *
     * @return self
     */
    public function setTaxWithheldOtherAgents($tax_withheld_other_agents)
    {
        $this->container['tax_withheld_other_agents'] = $tax_withheld_other_agents;

        return $this;
    }

    /**
     * Gets amount_repaid
     *
     * @return float|null
     */
    public function getAmountRepaid()
    {
        return $this->container['amount_repaid'];
    }

    /**
     * Sets amount_repaid
     *
     * @param float|null $amount_repaid Amount repaid to recipient
     *
     * @return self
     */
    public function setAmountRepaid($amount_repaid)
    {
        $this->container['amount_repaid'] = $amount_repaid;

        return $this;
    }

    /**
     * Gets tax_paid_agent
     *
     * @return float|null
     */
    public function getTaxPaidAgent()
    {
        return $this->container['tax_paid_agent'];
    }

    /**
     * Sets tax_paid_agent
     *
     * @param float|null $tax_paid_agent Tax paid by withholding agent
     *
     * @return self
     */
    public function setTaxPaidAgent($tax_paid_agent)
    {
        $this->container['tax_paid_agent'] = $tax_paid_agent;

        return $this;
    }

    /**
     * Gets chap3_status_code
     *
     * @return string|null
     */
    public function getChap3StatusCode()
    {
        return $this->container['chap3_status_code'];
    }

    /**
     * Sets chap3_status_code
     *
     * @param string|null $chap3_status_code Chapter 3 status code - Required if WithholdingIndicator is 3 (Chapter 3)  Available values:  - 01: U.S. Withholding Agent - FI (Deprecated - valid only for tax years prior to 2020)  - 02: U.S. Withholding Agent - Other (Deprecated - valid only for tax years prior to 2020)  - 03: Territory FI - treated as U.S. Person  - 04: Territory FI - not treated as U.S. Person  - 05: U.S. branch - treated as U.S. Person  - 06: U.S. branch - not treated as U.S. Person  - 07: U.S. branch - ECI presumption applied  - 08: Partnership other than Withholding Foreign Partnership  - 09: Withholding Foreign Partnership  - 10: Trust other than Withholding Foreign Trust  - 11: Withholding Foreign Trust  - 12: Qualified Intermediary  - 13: Qualified Securities Lender - Qualified Intermediary  - 14: Qualified Securities Lender - Other  - 15: Corporation  - 16: Individual  - 17: Estate  - 18: Private Foundation  - 19: Government or International Organization  - 20: Tax Exempt Organization (Section 501(c) entities)  - 21: Unknown Recipient  - 22: Artist or Athlete  - 23: Pension  - 24: Foreign Central Bank of Issue  - 25: Nonqualified Intermediary  - 26: Hybrid entity making Treaty Claim  - 27: Withholding Rate Pool - General  - 28: Withholding Rate Pool - Exempt Organization  - 29: PAI Withholding Rate Pool - General  - 30: PAI Withholding Rate Pool - Exempt Organization  - 31: Agency Withholding Rate Pool - General  - 32: Agency Withholding Rate Pool - Exempt Organization  - 34: U.S. Withholding Agent-Foreign branch of FI (Deprecated - valid only for tax years prior to 2020)  - 35: Qualified Derivatives Dealer  - 36: Foreign Government - Integral Part  - 37: Foreign Government - Controlled Entity  - 38: Publicly Traded Partnership  - 39: Disclosing Qualified Intermediary
     *
     * @return self
     */
    public function setChap3StatusCode($chap3_status_code)
    {
        $allowedValues = $this->getChap3StatusCodeAllowableValues();
        if (!is_null($chap3_status_code) && !in_array($chap3_status_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'chap3_status_code', must be one of '%s'",
                    $chap3_status_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['chap3_status_code'] = $chap3_status_code;

        return $this;
    }

    /**
     * Gets chap4_status_code
     *
     * @return string|null
     */
    public function getChap4StatusCode()
    {
        return $this->container['chap4_status_code'];
    }

    /**
     * Sets chap4_status_code
     *
     * @param string|null $chap4_status_code Chapter 4 status code. Required if WithholdingIndicator is 4 (Chapter 4). Required if email is specified, must fill either this or RecipientForeignTin.  Available values:  - 01: U.S. Withholding Agent - FI  - 02: U.S. Withholding Agent - Other  - 03: Territory FI - not treated as U.S. Person  - 04: Territory FI - treated as U.S. Person  - 05: Participating FFI - Other  - 06: Participating FFI - Reporting Model 2 FFI  - 07: Registered Deemed - Compliant FFI-Reporting Model 1 FFI  - 08: Registered Deemed - Compliant FFI-Sponsored Entity  - 09: Registered Deemed - Compliant FFI-Other  - 10: Certified Deemed - Compliant FFI-Other  - 11: Certified Deemed - Compliant FFI-FFI with Low Value Accounts  - 12: Certified Deemed - Compliant FFI-Non-Registering Local Bank  - 13: Certified Deemed - Compliant FFI-Sponsored Entity  - 14: Certified Deemed - Compliant FFI-Investment Advisor or Investment Manager  - 15: Nonparticipating FFI  - 16: Owner-Documented FFI  - 17: U.S. Branch - treated as U.S. person  - 18: U.S. Branch - not treated as U.S. person (reporting under section 1471)  - 19: Passive NFFE identifying Substantial U.S. Owners  - 20: Passive NFFE with no Substantial U.S. Owners  - 21: Publicly Traded NFFE or Affiliate of Publicly Traded NFFE  - 22: Active NFFE  - 23: Individual  - 24: Section 501(c) Entities  - 25: Excepted Territory NFFE  - 26: Excepted NFFE - Other  - 27: Exempt Beneficial Owner  - 28: Entity Wholly Owned by Exempt Beneficial Owners  - 29: Unknown Recipient  - 30: Recalcitrant Account Holder  - 31: Nonreporting IGA FFI  - 32: Direct reporting NFFE  - 33: U.S. reportable account  - 34: Non-consenting U.S. account  - 35: Sponsored direct reporting NFFE  - 36: Excepted Inter-affiliate FFI  - 37: Undocumented Preexisting Obligation  - 38: U.S. Branch - ECI presumption applied  - 39: Account Holder of Excluded Financial Account  - 40: Passive NFFE reported by FFI  - 41: NFFE subject to 1472 withholding  - 42: Recalcitrant Pool - No U.S. Indicia  - 43: Recalcitrant Pool - U.S. Indicia  - 44: Recalcitrant Pool - Dormant Account  - 45: Recalcitrant Pool - U.S. Persons  - 46: Recalcitrant Pool - Passive NFFEs  - 47: Nonparticipating FFI Pool  - 48: U.S. Payees Pool  - 49: QI - Recalcitrant Pool-General  - 50: U.S. Withholding Agent-Foreign branch of FI
     *
     * @return self
     */
    public function setChap4StatusCode($chap4_status_code)
    {
        $allowedValues = $this->getChap4StatusCodeAllowableValues();
        if (!is_null($chap4_status_code) && !in_array($chap4_status_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'chap4_status_code', must be one of '%s'",
                    $chap4_status_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['chap4_status_code'] = $chap4_status_code;

        return $this;
    }

    /**
     * Gets primary_withholding_agent
     *
     * @return \Avalara\SDK\Model\A1099\V2\PrimaryWithholdingAgent|null
     */
    public function getPrimaryWithholdingAgent()
    {
        return $this->container['primary_withholding_agent'];
    }

    /**
     * Sets primary_withholding_agent
     *
     * @param \Avalara\SDK\Model\A1099\V2\PrimaryWithholdingAgent|null $primary_withholding_agent Primary withholding agent information
     *
     * @return self
     */
    public function setPrimaryWithholdingAgent($primary_withholding_agent)
    {
        $this->container['primary_withholding_agent'] = $primary_withholding_agent;

        return $this;
    }

    /**
     * Gets intermediary_or_flow_through
     *
     * @return \Avalara\SDK\Model\A1099\V2\IntermediaryOrFlowThrough|null
     */
    public function getIntermediaryOrFlowThrough()
    {
        return $this->container['intermediary_or_flow_through'];
    }

    /**
     * Sets intermediary_or_flow_through
     *
     * @param \Avalara\SDK\Model\A1099\V2\IntermediaryOrFlowThrough|null $intermediary_or_flow_through Intermediary or flow-through entity information
     *
     * @return self
     */
    public function setIntermediaryOrFlowThrough($intermediary_or_flow_through)
    {
        $this->container['intermediary_or_flow_through'] = $intermediary_or_flow_through;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Form type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Form ID. Unique identifier set when the record is created.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets issuer_id
     *
     * @return string|null
     */
    public function getIssuerId()
    {
        return $this->container['issuer_id'];
    }

    /**
     * Sets issuer_id
     *
     * @param string|null $issuer_id Issuer ID - only required when creating forms
     *
     * @return self
     */
    public function setIssuerId($issuer_id)
    {
        $this->container['issuer_id'] = $issuer_id;

        return $this;
    }

    /**
     * Gets issuer_reference_id
     *
     * @return string|null
     */
    public function getIssuerReferenceId()
    {
        return $this->container['issuer_reference_id'];
    }

    /**
     * Sets issuer_reference_id
     *
     * @param string|null $issuer_reference_id Issuer Reference ID - only required when creating forms
     *
     * @return self
     */
    public function setIssuerReferenceId($issuer_reference_id)
    {
        $this->container['issuer_reference_id'] = $issuer_reference_id;

        return $this;
    }

    /**
     * Gets issuer_tin
     *
     * @return string|null
     */
    public function getIssuerTin()
    {
        return $this->container['issuer_tin'];
    }

    /**
     * Sets issuer_tin
     *
     * @param string|null $issuer_tin Issuer TIN - readonly
     *
     * @return self
     */
    public function setIssuerTin($issuer_tin)
    {
        $this->container['issuer_tin'] = $issuer_tin;

        return $this;
    }

    /**
     * Gets tax_year
     *
     * @return int|null
     */
    public function getTaxYear()
    {
        return $this->container['tax_year'];
    }

    /**
     * Sets tax_year
     *
     * @param int|null $tax_year Tax Year - only required when creating forms
     *
     * @return self
     */
    public function setTaxYear($tax_year)
    {
        $this->container['tax_year'] = $tax_year;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id Internal reference ID. Never shown to any agency or recipient.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets tin
     *
     * @return string|null
     */
    public function getTin()
    {
        return $this->container['tin'];
    }

    /**
     * Sets tin
     *
     * @param string|null $tin Recipient's Federal Tax Identification Number (TIN).
     *
     * @return self
     */
    public function setTin($tin)
    {
        $this->container['tin'] = $tin;

        return $this;
    }

    /**
     * Gets recipient_name
     *
     * @return string
     */
    public function getRecipientName()
    {
        return $this->container['recipient_name'];
    }

    /**
     * Sets recipient_name
     *
     * @param string $recipient_name Recipient name
     *
     * @return self
     */
    public function setRecipientName($recipient_name)
    {
        $this->container['recipient_name'] = $recipient_name;

        return $this;
    }

    /**
     * Gets recipient_second_name
     *
     * @return string|null
     */
    public function getRecipientSecondName()
    {
        return $this->container['recipient_second_name'];
    }

    /**
     * Sets recipient_second_name
     *
     * @param string|null $recipient_second_name Recipient second name
     *
     * @return self
     */
    public function setRecipientSecondName($recipient_second_name)
    {
        $this->container['recipient_second_name'] = $recipient_second_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Address.
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Address line 2.
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City.
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state Two-letter US state or Canadian province code (required for US/CA addresses).
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip ZIP/postal code.
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Recipient's Contact email address.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number Account number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets office_code
     *
     * @return string|null
     */
    public function getOfficeCode()
    {
        return $this->container['office_code'];
    }

    /**
     * Sets office_code
     *
     * @param string|null $office_code Office code
     *
     * @return self
     */
    public function setOfficeCode($office_code)
    {
        $this->container['office_code'] = $office_code;

        return $this;
    }

    /**
     * Gets non_us_province
     *
     * @return string|null
     */
    public function getNonUsProvince()
    {
        return $this->container['non_us_province'];
    }

    /**
     * Sets non_us_province
     *
     * @param string|null $non_us_province Province or region for non-US/CA addresses.
     *
     * @return self
     */
    public function setNonUsProvince($non_us_province)
    {
        $this->container['non_us_province'] = $non_us_province;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Two-letter IRS country code (e.g., 'US', 'CA'), as defined at https://www.irs.gov/e-file-providers/country-codes.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets federal_efile_date
     *
     * @return \DateTime|null
     */
    public function getFederalEfileDate()
    {
        return $this->container['federal_efile_date'];
    }

    /**
     * Sets federal_efile_date
     *
     * @param \DateTime|null $federal_efile_date Date when federal e-filing should be scheduled for this form
     *
     * @return self
     */
    public function setFederalEfileDate($federal_efile_date)
    {
        $this->container['federal_efile_date'] = $federal_efile_date;

        return $this;
    }

    /**
     * Gets postal_mail
     *
     * @return bool|null
     */
    public function getPostalMail()
    {
        return $this->container['postal_mail'];
    }

    /**
     * Sets postal_mail
     *
     * @param bool|null $postal_mail Boolean indicating that postal mailing to the recipient should be scheduled for this form
     *
     * @return self
     */
    public function setPostalMail($postal_mail)
    {
        $this->container['postal_mail'] = $postal_mail;

        return $this;
    }

    /**
     * Gets state_efile_date
     *
     * @return \DateTime|null
     */
    public function getStateEfileDate()
    {
        return $this->container['state_efile_date'];
    }

    /**
     * Sets state_efile_date
     *
     * @param \DateTime|null $state_efile_date Date when state e-filing should be scheduled for this form
     *
     * @return self
     */
    public function setStateEfileDate($state_efile_date)
    {
        $this->container['state_efile_date'] = $state_efile_date;

        return $this;
    }

    /**
     * Gets recipient_edelivery_date
     *
     * @return \DateTime|null
     */
    public function getRecipientEdeliveryDate()
    {
        return $this->container['recipient_edelivery_date'];
    }

    /**
     * Sets recipient_edelivery_date
     *
     * @param \DateTime|null $recipient_edelivery_date Date when recipient e-delivery should be scheduled for this form
     *
     * @return self
     */
    public function setRecipientEdeliveryDate($recipient_edelivery_date)
    {
        $this->container['recipient_edelivery_date'] = $recipient_edelivery_date;

        return $this;
    }

    /**
     * Gets tin_match
     *
     * @return bool|null
     */
    public function getTinMatch()
    {
        return $this->container['tin_match'];
    }

    /**
     * Sets tin_match
     *
     * @param bool|null $tin_match Boolean indicating that TIN Matching should be scheduled for this form
     *
     * @return self
     */
    public function setTinMatch($tin_match)
    {
        $this->container['tin_match'] = $tin_match;

        return $this;
    }

    /**
     * Gets no_tin
     *
     * @return bool|null
     */
    public function getNoTin()
    {
        return $this->container['no_tin'];
    }

    /**
     * Sets no_tin
     *
     * @param bool|null $no_tin No TIN indicator
     *
     * @return self
     */
    public function setNoTin($no_tin)
    {
        $this->container['no_tin'] = $no_tin;

        return $this;
    }

    /**
     * Gets address_verification
     *
     * @return bool|null
     */
    public function getAddressVerification()
    {
        return $this->container['address_verification'];
    }

    /**
     * Sets address_verification
     *
     * @param bool|null $address_verification Boolean indicating that address verification should be scheduled for this form
     *
     * @return self
     */
    public function setAddressVerification($address_verification)
    {
        $this->container['address_verification'] = $address_verification;

        return $this;
    }

    /**
     * Gets state_and_local_withholding
     *
     * @return \Avalara\SDK\Model\A1099\V2\StateAndLocalWithholding|null
     */
    public function getStateAndLocalWithholding()
    {
        return $this->container['state_and_local_withholding'];
    }

    /**
     * Sets state_and_local_withholding
     *
     * @param \Avalara\SDK\Model\A1099\V2\StateAndLocalWithholding|null $state_and_local_withholding State and local withholding information
     *
     * @return self
     */
    public function setStateAndLocalWithholding($state_and_local_withholding)
    {
        $this->container['state_and_local_withholding'] = $state_and_local_withholding;

        return $this;
    }

    /**
     * Gets second_tin_notice
     *
     * @return bool|null
     */
    public function getSecondTinNotice()
    {
        return $this->container['second_tin_notice'];
    }

    /**
     * Sets second_tin_notice
     *
     * @param bool|null $second_tin_notice Second TIN notice
     *
     * @return self
     */
    public function setSecondTinNotice($second_tin_notice)
    {
        $this->container['second_tin_notice'] = $second_tin_notice;

        return $this;
    }

    /**
     * Gets federal_efile_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null
     */
    public function getFederalEfileStatus()
    {
        return $this->container['federal_efile_status'];
    }

    /**
     * Sets federal_efile_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null $federal_efile_status Federal e-file status
     *
     * @return self
     */
    public function setFederalEfileStatus($federal_efile_status)
    {
        $this->container['federal_efile_status'] = $federal_efile_status;

        return $this;
    }

    /**
     * Gets state_efile_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\StateEfileStatusDetail[]|null
     */
    public function getStateEfileStatus()
    {
        return $this->container['state_efile_status'];
    }

    /**
     * Sets state_efile_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\StateEfileStatusDetail[]|null $state_efile_status State e-file status
     *
     * @return self
     */
    public function setStateEfileStatus($state_efile_status)
    {


        $this->container['state_efile_status'] = $state_efile_status;

        return $this;
    }

    /**
     * Gets postal_mail_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null
     */
    public function getPostalMailStatus()
    {
        return $this->container['postal_mail_status'];
    }

    /**
     * Sets postal_mail_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null $postal_mail_status Postal mail to recipient status
     *
     * @return self
     */
    public function setPostalMailStatus($postal_mail_status)
    {
        $this->container['postal_mail_status'] = $postal_mail_status;

        return $this;
    }

    /**
     * Gets tin_match_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null
     */
    public function getTinMatchStatus()
    {
        return $this->container['tin_match_status'];
    }

    /**
     * Sets tin_match_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null $tin_match_status TIN Match status
     *
     * @return self
     */
    public function setTinMatchStatus($tin_match_status)
    {
        $this->container['tin_match_status'] = $tin_match_status;

        return $this;
    }

    /**
     * Gets address_verification_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null
     */
    public function getAddressVerificationStatus()
    {
        return $this->container['address_verification_status'];
    }

    /**
     * Sets address_verification_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null $address_verification_status Address verification status
     *
     * @return self
     */
    public function setAddressVerificationStatus($address_verification_status)
    {
        $this->container['address_verification_status'] = $address_verification_status;

        return $this;
    }

    /**
     * Gets e_delivery_status
     *
     * @return \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null
     */
    public function getEDeliveryStatus()
    {
        return $this->container['e_delivery_status'];
    }

    /**
     * Sets e_delivery_status
     *
     * @param \Avalara\SDK\Model\A1099\V2\Form1099StatusDetail|null $e_delivery_status EDelivery status
     *
     * @return self
     */
    public function setEDeliveryStatus($e_delivery_status)
    {
        $this->container['e_delivery_status'] = $e_delivery_status;

        return $this;
    }

    /**
     * Gets validation_errors
     *
     * @return \Avalara\SDK\Model\A1099\V2\ValidationError[]|null
     */
    public function getValidationErrors()
    {
        return $this->container['validation_errors'];
    }

    /**
     * Sets validation_errors
     *
     * @param \Avalara\SDK\Model\A1099\V2\ValidationError[]|null $validation_errors Validation errors
     *
     * @return self
     */
    public function setValidationErrors($validation_errors)
    {


        $this->container['validation_errors'] = $validation_errors;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Date time when the record was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Date time when the record was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


