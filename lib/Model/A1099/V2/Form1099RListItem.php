<?php
/**
 * Form1099RListItem
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Use **username/password** or generate a **license key** from: *Avalara Portal → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * Form1099RListItem Class Doc Comment
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Form1099RListItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Form1099RListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gross_distribution' => 'float',
        'taxable_amount' => 'float',
        'taxable_amount_not_determined' => 'bool',
        'total_distribution_determined' => 'bool',
        'capital_gain' => 'float',
        'federal_income_tax_withheld' => 'float',
        'employee_contributions_or_designated_roth_or_insurance_premiums' => 'float',
        'net_unrealized_appreciation_in_employer_securities' => 'float',
        'distribution_code' => 'string',
        'second_distribution_code' => 'string',
        'ira_sep_simple' => 'bool',
        'traditional_ira_sep_simple_or_roth_conversion_amount' => 'float',
        'other_amount' => 'float',
        'other_percentage' => 'string',
        'total_distribution_percentage' => 'string',
        'total_employee_contributions' => 'float',
        'amount_allocable_to_irr_within5_years' => 'float',
        'first_year_of_designated_roth_contribution' => 'int',
        'fatca_filing_requirement' => 'bool',
        'date_of_payment' => '\DateTime',
        'issuer_reference_id' => 'string',
        'issuer_tin' => 'string',
        'tax_year' => 'int',
        'issuer_id' => 'string',
        'reference_id' => 'string',
        'recipient_name' => 'string',
        'recipient_tin' => 'string',
        'tin_type' => 'string',
        'recipient_second_name' => 'string',
        'address' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'recipient_email' => 'string',
        'account_number' => 'string',
        'office_code' => 'string',
        'recipient_non_us_province' => 'string',
        'country_code' => 'string',
        'federal_e_file' => 'bool',
        'postal_mail' => 'bool',
        'state_e_file' => 'bool',
        'tin_match' => 'bool',
        'address_verification' => 'bool',
        'state_and_local_withholding' => '\Avalara\SDK\Model\A1099\V2\StateAndLocalWithholdingRequest'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gross_distribution' => 'double',
        'taxable_amount' => 'double',
        'taxable_amount_not_determined' => null,
        'total_distribution_determined' => null,
        'capital_gain' => 'double',
        'federal_income_tax_withheld' => 'double',
        'employee_contributions_or_designated_roth_or_insurance_premiums' => 'double',
        'net_unrealized_appreciation_in_employer_securities' => 'double',
        'distribution_code' => null,
        'second_distribution_code' => null,
        'ira_sep_simple' => null,
        'traditional_ira_sep_simple_or_roth_conversion_amount' => 'double',
        'other_amount' => 'double',
        'other_percentage' => null,
        'total_distribution_percentage' => null,
        'total_employee_contributions' => 'double',
        'amount_allocable_to_irr_within5_years' => 'double',
        'first_year_of_designated_roth_contribution' => 'int32',
        'fatca_filing_requirement' => null,
        'date_of_payment' => 'date-time',
        'issuer_reference_id' => null,
        'issuer_tin' => null,
        'tax_year' => 'int32',
        'issuer_id' => null,
        'reference_id' => null,
        'recipient_name' => null,
        'recipient_tin' => null,
        'tin_type' => null,
        'recipient_second_name' => null,
        'address' => null,
        'address2' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'recipient_email' => null,
        'account_number' => null,
        'office_code' => null,
        'recipient_non_us_province' => null,
        'country_code' => null,
        'federal_e_file' => null,
        'postal_mail' => null,
        'state_e_file' => null,
        'tin_match' => null,
        'address_verification' => null,
        'state_and_local_withholding' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gross_distribution' => 'grossDistribution',
        'taxable_amount' => 'taxableAmount',
        'taxable_amount_not_determined' => 'taxableAmountNotDetermined',
        'total_distribution_determined' => 'totalDistributionDetermined',
        'capital_gain' => 'capitalGain',
        'federal_income_tax_withheld' => 'federalIncomeTaxWithheld',
        'employee_contributions_or_designated_roth_or_insurance_premiums' => 'employeeContributionsOrDesignatedRothOrInsurancePremiums',
        'net_unrealized_appreciation_in_employer_securities' => 'netUnrealizedAppreciationInEmployerSecurities',
        'distribution_code' => 'distributionCode',
        'second_distribution_code' => 'secondDistributionCode',
        'ira_sep_simple' => 'iraSepSimple',
        'traditional_ira_sep_simple_or_roth_conversion_amount' => 'traditionalIraSepSimpleOrRothConversionAmount',
        'other_amount' => 'otherAmount',
        'other_percentage' => 'otherPercentage',
        'total_distribution_percentage' => 'totalDistributionPercentage',
        'total_employee_contributions' => 'totalEmployeeContributions',
        'amount_allocable_to_irr_within5_years' => 'amountAllocableToIrrWithin5Years',
        'first_year_of_designated_roth_contribution' => 'firstYearOfDesignatedRothContribution',
        'fatca_filing_requirement' => 'fatcaFilingRequirement',
        'date_of_payment' => 'dateOfPayment',
        'issuer_reference_id' => 'issuerReferenceId',
        'issuer_tin' => 'issuerTin',
        'tax_year' => 'taxYear',
        'issuer_id' => 'issuerId',
        'reference_id' => 'referenceId',
        'recipient_name' => 'recipientName',
        'recipient_tin' => 'recipientTin',
        'tin_type' => 'tinType',
        'recipient_second_name' => 'recipientSecondName',
        'address' => 'address',
        'address2' => 'address2',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'recipient_email' => 'recipientEmail',
        'account_number' => 'accountNumber',
        'office_code' => 'officeCode',
        'recipient_non_us_province' => 'recipientNonUsProvince',
        'country_code' => 'countryCode',
        'federal_e_file' => 'federalEFile',
        'postal_mail' => 'postalMail',
        'state_e_file' => 'stateEFile',
        'tin_match' => 'tinMatch',
        'address_verification' => 'addressVerification',
        'state_and_local_withholding' => 'stateAndLocalWithholding'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gross_distribution' => 'setGrossDistribution',
        'taxable_amount' => 'setTaxableAmount',
        'taxable_amount_not_determined' => 'setTaxableAmountNotDetermined',
        'total_distribution_determined' => 'setTotalDistributionDetermined',
        'capital_gain' => 'setCapitalGain',
        'federal_income_tax_withheld' => 'setFederalIncomeTaxWithheld',
        'employee_contributions_or_designated_roth_or_insurance_premiums' => 'setEmployeeContributionsOrDesignatedRothOrInsurancePremiums',
        'net_unrealized_appreciation_in_employer_securities' => 'setNetUnrealizedAppreciationInEmployerSecurities',
        'distribution_code' => 'setDistributionCode',
        'second_distribution_code' => 'setSecondDistributionCode',
        'ira_sep_simple' => 'setIraSepSimple',
        'traditional_ira_sep_simple_or_roth_conversion_amount' => 'setTraditionalIraSepSimpleOrRothConversionAmount',
        'other_amount' => 'setOtherAmount',
        'other_percentage' => 'setOtherPercentage',
        'total_distribution_percentage' => 'setTotalDistributionPercentage',
        'total_employee_contributions' => 'setTotalEmployeeContributions',
        'amount_allocable_to_irr_within5_years' => 'setAmountAllocableToIrrWithin5Years',
        'first_year_of_designated_roth_contribution' => 'setFirstYearOfDesignatedRothContribution',
        'fatca_filing_requirement' => 'setFatcaFilingRequirement',
        'date_of_payment' => 'setDateOfPayment',
        'issuer_reference_id' => 'setIssuerReferenceId',
        'issuer_tin' => 'setIssuerTin',
        'tax_year' => 'setTaxYear',
        'issuer_id' => 'setIssuerId',
        'reference_id' => 'setReferenceId',
        'recipient_name' => 'setRecipientName',
        'recipient_tin' => 'setRecipientTin',
        'tin_type' => 'setTinType',
        'recipient_second_name' => 'setRecipientSecondName',
        'address' => 'setAddress',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'recipient_email' => 'setRecipientEmail',
        'account_number' => 'setAccountNumber',
        'office_code' => 'setOfficeCode',
        'recipient_non_us_province' => 'setRecipientNonUsProvince',
        'country_code' => 'setCountryCode',
        'federal_e_file' => 'setFederalEFile',
        'postal_mail' => 'setPostalMail',
        'state_e_file' => 'setStateEFile',
        'tin_match' => 'setTinMatch',
        'address_verification' => 'setAddressVerification',
        'state_and_local_withholding' => 'setStateAndLocalWithholding'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gross_distribution' => 'getGrossDistribution',
        'taxable_amount' => 'getTaxableAmount',
        'taxable_amount_not_determined' => 'getTaxableAmountNotDetermined',
        'total_distribution_determined' => 'getTotalDistributionDetermined',
        'capital_gain' => 'getCapitalGain',
        'federal_income_tax_withheld' => 'getFederalIncomeTaxWithheld',
        'employee_contributions_or_designated_roth_or_insurance_premiums' => 'getEmployeeContributionsOrDesignatedRothOrInsurancePremiums',
        'net_unrealized_appreciation_in_employer_securities' => 'getNetUnrealizedAppreciationInEmployerSecurities',
        'distribution_code' => 'getDistributionCode',
        'second_distribution_code' => 'getSecondDistributionCode',
        'ira_sep_simple' => 'getIraSepSimple',
        'traditional_ira_sep_simple_or_roth_conversion_amount' => 'getTraditionalIraSepSimpleOrRothConversionAmount',
        'other_amount' => 'getOtherAmount',
        'other_percentage' => 'getOtherPercentage',
        'total_distribution_percentage' => 'getTotalDistributionPercentage',
        'total_employee_contributions' => 'getTotalEmployeeContributions',
        'amount_allocable_to_irr_within5_years' => 'getAmountAllocableToIrrWithin5Years',
        'first_year_of_designated_roth_contribution' => 'getFirstYearOfDesignatedRothContribution',
        'fatca_filing_requirement' => 'getFatcaFilingRequirement',
        'date_of_payment' => 'getDateOfPayment',
        'issuer_reference_id' => 'getIssuerReferenceId',
        'issuer_tin' => 'getIssuerTin',
        'tax_year' => 'getTaxYear',
        'issuer_id' => 'getIssuerId',
        'reference_id' => 'getReferenceId',
        'recipient_name' => 'getRecipientName',
        'recipient_tin' => 'getRecipientTin',
        'tin_type' => 'getTinType',
        'recipient_second_name' => 'getRecipientSecondName',
        'address' => 'getAddress',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'recipient_email' => 'getRecipientEmail',
        'account_number' => 'getAccountNumber',
        'office_code' => 'getOfficeCode',
        'recipient_non_us_province' => 'getRecipientNonUsProvince',
        'country_code' => 'getCountryCode',
        'federal_e_file' => 'getFederalEFile',
        'postal_mail' => 'getPostalMail',
        'state_e_file' => 'getStateEFile',
        'tin_match' => 'getTinMatch',
        'address_verification' => 'getAddressVerification',
        'state_and_local_withholding' => 'getStateAndLocalWithholding'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DISTRIBUTION_CODE_EARLY_DISTRIBUTION_NO_EXCEPTION = 'EarlyDistributionNoException';
    const DISTRIBUTION_CODE_EARLY_DISTRIBUTION_WITH_EXCEPTION = 'EarlyDistributionWithException';
    const DISTRIBUTION_CODE_DISABILITY = 'Disability';
    const DISTRIBUTION_CODE_DEATH = 'Death';
    const DISTRIBUTION_CODE_PROHIBITED_TRANSACTION = 'ProhibitedTransaction';
    const DISTRIBUTION_CODE_SECTION1035_EXCHANGE = 'Section1035Exchange';
    const DISTRIBUTION_CODE_NORMAL_DISTRIBUTION = 'NormalDistribution';
    const DISTRIBUTION_CODE_EXCESS_CONTRIBUTIONS_CURRENT_YEAR = 'ExcessContributionsCurrentYear';
    const DISTRIBUTION_CODE_CURRENT_LIFE_INSURANCE_PROTECTION_COST = 'CurrentLifeInsuranceProtectionCost';
    const DISTRIBUTION_CODE_TEN_YEAR_TAX_OPTION = 'TenYearTaxOption';
    const DISTRIBUTION_CODE_DESIGNATED_ROTH_DISTRIBUTION = 'DesignatedRothDistribution';
    const DISTRIBUTION_CODE_REPORTABLE_DEATH_BENEFITS = 'ReportableDeathBenefits';
    const DISTRIBUTION_CODE_NONQUALIFIED_ANNUITY_PAYMENTS = 'NonqualifiedAnnuityPayments';
    const DISTRIBUTION_CODE_EPCRS_DISTRIBUTION = 'EPCRSDistribution';
    const DISTRIBUTION_CODE_CHARITABLE_GIFT_ANNUITY = 'CharitableGiftAnnuity';
    const DISTRIBUTION_CODE_DIRECT_ROLLOVER = 'DirectRollover';
    const DISTRIBUTION_CODE_ROTH_ACCOUNT_TO_IRA_DIRECT_ROLLOVER = 'RothAccountToIRADirectRollover';
    const DISTRIBUTION_CODE_EARLY_ROTH_IRA_DISTRIBUTION = 'EarlyRothIRADistribution';
    const DISTRIBUTION_CODE_IRA_ASSETS_NO_FMV = 'IRAAssetsNoFMV';
    const DISTRIBUTION_CODE_LOANS_DEEMED_DISTRIBUTIONS = 'LoansDeemedDistributions';
    const DISTRIBUTION_CODE_QUALIFIED_PLAN_LOAN_OFFSETS = 'QualifiedPlanLoanOffsets';
    const DISTRIBUTION_CODE_RECHARACTERIZED_IRA_NEXT_YEAR = 'RecharacterizedIRANextYear';
    const DISTRIBUTION_CODE_EXCESS_CONTRIBUTIONS_PREVIOUS_YEAR = 'ExcessContributionsPreviousYear';
    const DISTRIBUTION_CODE_QUALIFIED_ROTH_IRA_DISTRIBUTION = 'QualifiedRothIRADistribution';
    const DISTRIBUTION_CODE_RECHARACTERIZED_IRA_PREVIOUS_YEAR = 'RecharacterizedIRAPreviousYear';
    const DISTRIBUTION_CODE_EARLY_SIMPLE_IRA_DISTRIBUTION = 'EarlySimpleIRADistribution';
    const DISTRIBUTION_CODE_ROTH_IRA_DISTRIBUTION_EXCEPTION = 'RothIRADistributionException';
    const DISTRIBUTION_CODE_ESOP_DISTRIBUTION = 'ESOPDistribution';
    const DISTRIBUTION_CODE_LONG_TERM_CARE_INSURANCE = 'LongTermCareInsurance';
    const SECOND_DISTRIBUTION_CODE_EARLY_DISTRIBUTION_NO_EXCEPTION = 'EarlyDistributionNoException';
    const SECOND_DISTRIBUTION_CODE_EARLY_DISTRIBUTION_WITH_EXCEPTION = 'EarlyDistributionWithException';
    const SECOND_DISTRIBUTION_CODE_DISABILITY = 'Disability';
    const SECOND_DISTRIBUTION_CODE_DEATH = 'Death';
    const SECOND_DISTRIBUTION_CODE_PROHIBITED_TRANSACTION = 'ProhibitedTransaction';
    const SECOND_DISTRIBUTION_CODE_SECTION1035_EXCHANGE = 'Section1035Exchange';
    const SECOND_DISTRIBUTION_CODE_NORMAL_DISTRIBUTION = 'NormalDistribution';
    const SECOND_DISTRIBUTION_CODE_EXCESS_CONTRIBUTIONS_CURRENT_YEAR = 'ExcessContributionsCurrentYear';
    const SECOND_DISTRIBUTION_CODE_CURRENT_LIFE_INSURANCE_PROTECTION_COST = 'CurrentLifeInsuranceProtectionCost';
    const SECOND_DISTRIBUTION_CODE_TEN_YEAR_TAX_OPTION = 'TenYearTaxOption';
    const SECOND_DISTRIBUTION_CODE_DESIGNATED_ROTH_DISTRIBUTION = 'DesignatedRothDistribution';
    const SECOND_DISTRIBUTION_CODE_REPORTABLE_DEATH_BENEFITS = 'ReportableDeathBenefits';
    const SECOND_DISTRIBUTION_CODE_NONQUALIFIED_ANNUITY_PAYMENTS = 'NonqualifiedAnnuityPayments';
    const SECOND_DISTRIBUTION_CODE_EPCRS_DISTRIBUTION = 'EPCRSDistribution';
    const SECOND_DISTRIBUTION_CODE_CHARITABLE_GIFT_ANNUITY = 'CharitableGiftAnnuity';
    const SECOND_DISTRIBUTION_CODE_DIRECT_ROLLOVER = 'DirectRollover';
    const SECOND_DISTRIBUTION_CODE_ROTH_ACCOUNT_TO_IRA_DIRECT_ROLLOVER = 'RothAccountToIRADirectRollover';
    const SECOND_DISTRIBUTION_CODE_EARLY_ROTH_IRA_DISTRIBUTION = 'EarlyRothIRADistribution';
    const SECOND_DISTRIBUTION_CODE_IRA_ASSETS_NO_FMV = 'IRAAssetsNoFMV';
    const SECOND_DISTRIBUTION_CODE_LOANS_DEEMED_DISTRIBUTIONS = 'LoansDeemedDistributions';
    const SECOND_DISTRIBUTION_CODE_QUALIFIED_PLAN_LOAN_OFFSETS = 'QualifiedPlanLoanOffsets';
    const SECOND_DISTRIBUTION_CODE_RECHARACTERIZED_IRA_NEXT_YEAR = 'RecharacterizedIRANextYear';
    const SECOND_DISTRIBUTION_CODE_EXCESS_CONTRIBUTIONS_PREVIOUS_YEAR = 'ExcessContributionsPreviousYear';
    const SECOND_DISTRIBUTION_CODE_QUALIFIED_ROTH_IRA_DISTRIBUTION = 'QualifiedRothIRADistribution';
    const SECOND_DISTRIBUTION_CODE_RECHARACTERIZED_IRA_PREVIOUS_YEAR = 'RecharacterizedIRAPreviousYear';
    const SECOND_DISTRIBUTION_CODE_EARLY_SIMPLE_IRA_DISTRIBUTION = 'EarlySimpleIRADistribution';
    const SECOND_DISTRIBUTION_CODE_ROTH_IRA_DISTRIBUTION_EXCEPTION = 'RothIRADistributionException';
    const SECOND_DISTRIBUTION_CODE_ESOP_DISTRIBUTION = 'ESOPDistribution';
    const SECOND_DISTRIBUTION_CODE_LONG_TERM_CARE_INSURANCE = 'LongTermCareInsurance';
    const TIN_TYPE_EIN = 'EIN';
    const TIN_TYPE_SSN = 'SSN';
    const TIN_TYPE_ITIN = 'ITIN';
    const TIN_TYPE_ATIN = 'ATIN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDistributionCodeAllowableValues()
    {
        return [
            self::DISTRIBUTION_CODE_EARLY_DISTRIBUTION_NO_EXCEPTION,
            self::DISTRIBUTION_CODE_EARLY_DISTRIBUTION_WITH_EXCEPTION,
            self::DISTRIBUTION_CODE_DISABILITY,
            self::DISTRIBUTION_CODE_DEATH,
            self::DISTRIBUTION_CODE_PROHIBITED_TRANSACTION,
            self::DISTRIBUTION_CODE_SECTION1035_EXCHANGE,
            self::DISTRIBUTION_CODE_NORMAL_DISTRIBUTION,
            self::DISTRIBUTION_CODE_EXCESS_CONTRIBUTIONS_CURRENT_YEAR,
            self::DISTRIBUTION_CODE_CURRENT_LIFE_INSURANCE_PROTECTION_COST,
            self::DISTRIBUTION_CODE_TEN_YEAR_TAX_OPTION,
            self::DISTRIBUTION_CODE_DESIGNATED_ROTH_DISTRIBUTION,
            self::DISTRIBUTION_CODE_REPORTABLE_DEATH_BENEFITS,
            self::DISTRIBUTION_CODE_NONQUALIFIED_ANNUITY_PAYMENTS,
            self::DISTRIBUTION_CODE_EPCRS_DISTRIBUTION,
            self::DISTRIBUTION_CODE_CHARITABLE_GIFT_ANNUITY,
            self::DISTRIBUTION_CODE_DIRECT_ROLLOVER,
            self::DISTRIBUTION_CODE_ROTH_ACCOUNT_TO_IRA_DIRECT_ROLLOVER,
            self::DISTRIBUTION_CODE_EARLY_ROTH_IRA_DISTRIBUTION,
            self::DISTRIBUTION_CODE_IRA_ASSETS_NO_FMV,
            self::DISTRIBUTION_CODE_LOANS_DEEMED_DISTRIBUTIONS,
            self::DISTRIBUTION_CODE_QUALIFIED_PLAN_LOAN_OFFSETS,
            self::DISTRIBUTION_CODE_RECHARACTERIZED_IRA_NEXT_YEAR,
            self::DISTRIBUTION_CODE_EXCESS_CONTRIBUTIONS_PREVIOUS_YEAR,
            self::DISTRIBUTION_CODE_QUALIFIED_ROTH_IRA_DISTRIBUTION,
            self::DISTRIBUTION_CODE_RECHARACTERIZED_IRA_PREVIOUS_YEAR,
            self::DISTRIBUTION_CODE_EARLY_SIMPLE_IRA_DISTRIBUTION,
            self::DISTRIBUTION_CODE_ROTH_IRA_DISTRIBUTION_EXCEPTION,
            self::DISTRIBUTION_CODE_ESOP_DISTRIBUTION,
            self::DISTRIBUTION_CODE_LONG_TERM_CARE_INSURANCE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecondDistributionCodeAllowableValues()
    {
        return [
            self::SECOND_DISTRIBUTION_CODE_EARLY_DISTRIBUTION_NO_EXCEPTION,
            self::SECOND_DISTRIBUTION_CODE_EARLY_DISTRIBUTION_WITH_EXCEPTION,
            self::SECOND_DISTRIBUTION_CODE_DISABILITY,
            self::SECOND_DISTRIBUTION_CODE_DEATH,
            self::SECOND_DISTRIBUTION_CODE_PROHIBITED_TRANSACTION,
            self::SECOND_DISTRIBUTION_CODE_SECTION1035_EXCHANGE,
            self::SECOND_DISTRIBUTION_CODE_NORMAL_DISTRIBUTION,
            self::SECOND_DISTRIBUTION_CODE_EXCESS_CONTRIBUTIONS_CURRENT_YEAR,
            self::SECOND_DISTRIBUTION_CODE_CURRENT_LIFE_INSURANCE_PROTECTION_COST,
            self::SECOND_DISTRIBUTION_CODE_TEN_YEAR_TAX_OPTION,
            self::SECOND_DISTRIBUTION_CODE_DESIGNATED_ROTH_DISTRIBUTION,
            self::SECOND_DISTRIBUTION_CODE_REPORTABLE_DEATH_BENEFITS,
            self::SECOND_DISTRIBUTION_CODE_NONQUALIFIED_ANNUITY_PAYMENTS,
            self::SECOND_DISTRIBUTION_CODE_EPCRS_DISTRIBUTION,
            self::SECOND_DISTRIBUTION_CODE_CHARITABLE_GIFT_ANNUITY,
            self::SECOND_DISTRIBUTION_CODE_DIRECT_ROLLOVER,
            self::SECOND_DISTRIBUTION_CODE_ROTH_ACCOUNT_TO_IRA_DIRECT_ROLLOVER,
            self::SECOND_DISTRIBUTION_CODE_EARLY_ROTH_IRA_DISTRIBUTION,
            self::SECOND_DISTRIBUTION_CODE_IRA_ASSETS_NO_FMV,
            self::SECOND_DISTRIBUTION_CODE_LOANS_DEEMED_DISTRIBUTIONS,
            self::SECOND_DISTRIBUTION_CODE_QUALIFIED_PLAN_LOAN_OFFSETS,
            self::SECOND_DISTRIBUTION_CODE_RECHARACTERIZED_IRA_NEXT_YEAR,
            self::SECOND_DISTRIBUTION_CODE_EXCESS_CONTRIBUTIONS_PREVIOUS_YEAR,
            self::SECOND_DISTRIBUTION_CODE_QUALIFIED_ROTH_IRA_DISTRIBUTION,
            self::SECOND_DISTRIBUTION_CODE_RECHARACTERIZED_IRA_PREVIOUS_YEAR,
            self::SECOND_DISTRIBUTION_CODE_EARLY_SIMPLE_IRA_DISTRIBUTION,
            self::SECOND_DISTRIBUTION_CODE_ROTH_IRA_DISTRIBUTION_EXCEPTION,
            self::SECOND_DISTRIBUTION_CODE_ESOP_DISTRIBUTION,
            self::SECOND_DISTRIBUTION_CODE_LONG_TERM_CARE_INSURANCE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTinTypeAllowableValues()
    {
        return [
            self::TIN_TYPE_EIN,
            self::TIN_TYPE_SSN,
            self::TIN_TYPE_ITIN,
            self::TIN_TYPE_ATIN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gross_distribution'] = $data['gross_distribution'] ?? null;
        $this->container['taxable_amount'] = $data['taxable_amount'] ?? null;
        $this->container['taxable_amount_not_determined'] = $data['taxable_amount_not_determined'] ?? null;
        $this->container['total_distribution_determined'] = $data['total_distribution_determined'] ?? null;
        $this->container['capital_gain'] = $data['capital_gain'] ?? null;
        $this->container['federal_income_tax_withheld'] = $data['federal_income_tax_withheld'] ?? null;
        $this->container['employee_contributions_or_designated_roth_or_insurance_premiums'] = $data['employee_contributions_or_designated_roth_or_insurance_premiums'] ?? null;
        $this->container['net_unrealized_appreciation_in_employer_securities'] = $data['net_unrealized_appreciation_in_employer_securities'] ?? null;
        $this->container['distribution_code'] = $data['distribution_code'] ?? null;
        $this->container['second_distribution_code'] = $data['second_distribution_code'] ?? null;
        $this->container['ira_sep_simple'] = $data['ira_sep_simple'] ?? null;
        $this->container['traditional_ira_sep_simple_or_roth_conversion_amount'] = $data['traditional_ira_sep_simple_or_roth_conversion_amount'] ?? null;
        $this->container['other_amount'] = $data['other_amount'] ?? null;
        $this->container['other_percentage'] = $data['other_percentage'] ?? null;
        $this->container['total_distribution_percentage'] = $data['total_distribution_percentage'] ?? null;
        $this->container['total_employee_contributions'] = $data['total_employee_contributions'] ?? null;
        $this->container['amount_allocable_to_irr_within5_years'] = $data['amount_allocable_to_irr_within5_years'] ?? null;
        $this->container['first_year_of_designated_roth_contribution'] = $data['first_year_of_designated_roth_contribution'] ?? null;
        $this->container['fatca_filing_requirement'] = $data['fatca_filing_requirement'] ?? null;
        $this->container['date_of_payment'] = $data['date_of_payment'] ?? null;
        $this->container['issuer_reference_id'] = $data['issuer_reference_id'] ?? null;
        $this->container['issuer_tin'] = $data['issuer_tin'] ?? null;
        $this->container['tax_year'] = $data['tax_year'] ?? null;
        $this->container['issuer_id'] = $data['issuer_id'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['recipient_name'] = $data['recipient_name'] ?? null;
        $this->container['recipient_tin'] = $data['recipient_tin'] ?? null;
        $this->container['tin_type'] = $data['tin_type'] ?? null;
        $this->container['recipient_second_name'] = $data['recipient_second_name'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['address2'] = $data['address2'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['recipient_email'] = $data['recipient_email'] ?? null;
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['office_code'] = $data['office_code'] ?? null;
        $this->container['recipient_non_us_province'] = $data['recipient_non_us_province'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['federal_e_file'] = $data['federal_e_file'] ?? null;
        $this->container['postal_mail'] = $data['postal_mail'] ?? null;
        $this->container['state_e_file'] = $data['state_e_file'] ?? null;
        $this->container['tin_match'] = $data['tin_match'] ?? null;
        $this->container['address_verification'] = $data['address_verification'] ?? null;
        $this->container['state_and_local_withholding'] = $data['state_and_local_withholding'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDistributionCodeAllowableValues();
        if (!is_null($this->container['distribution_code']) && !in_array($this->container['distribution_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'distribution_code', must be one of '%s'",
                $this->container['distribution_code'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecondDistributionCodeAllowableValues();
        if (!is_null($this->container['second_distribution_code']) && !in_array($this->container['second_distribution_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'second_distribution_code', must be one of '%s'",
                $this->container['second_distribution_code'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTinTypeAllowableValues();
        if (!is_null($this->container['tin_type']) && !in_array($this->container['tin_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tin_type', must be one of '%s'",
                $this->container['tin_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gross_distribution
     *
     * @return float|null
     */
    public function getGrossDistribution()
    {
        return $this->container['gross_distribution'];
    }

    /**
     * Sets gross_distribution
     *
     * @param float|null $gross_distribution gross_distribution
     *
     * @return self
     */
    public function setGrossDistribution($gross_distribution)
    {
        $this->container['gross_distribution'] = $gross_distribution;

        return $this;
    }

    /**
     * Gets taxable_amount
     *
     * @return float|null
     */
    public function getTaxableAmount()
    {
        return $this->container['taxable_amount'];
    }

    /**
     * Sets taxable_amount
     *
     * @param float|null $taxable_amount taxable_amount
     *
     * @return self
     */
    public function setTaxableAmount($taxable_amount)
    {
        $this->container['taxable_amount'] = $taxable_amount;

        return $this;
    }

    /**
     * Gets taxable_amount_not_determined
     *
     * @return bool|null
     */
    public function getTaxableAmountNotDetermined()
    {
        return $this->container['taxable_amount_not_determined'];
    }

    /**
     * Sets taxable_amount_not_determined
     *
     * @param bool|null $taxable_amount_not_determined taxable_amount_not_determined
     *
     * @return self
     */
    public function setTaxableAmountNotDetermined($taxable_amount_not_determined)
    {
        $this->container['taxable_amount_not_determined'] = $taxable_amount_not_determined;

        return $this;
    }

    /**
     * Gets total_distribution_determined
     *
     * @return bool|null
     */
    public function getTotalDistributionDetermined()
    {
        return $this->container['total_distribution_determined'];
    }

    /**
     * Sets total_distribution_determined
     *
     * @param bool|null $total_distribution_determined total_distribution_determined
     *
     * @return self
     */
    public function setTotalDistributionDetermined($total_distribution_determined)
    {
        $this->container['total_distribution_determined'] = $total_distribution_determined;

        return $this;
    }

    /**
     * Gets capital_gain
     *
     * @return float|null
     */
    public function getCapitalGain()
    {
        return $this->container['capital_gain'];
    }

    /**
     * Sets capital_gain
     *
     * @param float|null $capital_gain capital_gain
     *
     * @return self
     */
    public function setCapitalGain($capital_gain)
    {
        $this->container['capital_gain'] = $capital_gain;

        return $this;
    }

    /**
     * Gets federal_income_tax_withheld
     *
     * @return float|null
     */
    public function getFederalIncomeTaxWithheld()
    {
        return $this->container['federal_income_tax_withheld'];
    }

    /**
     * Sets federal_income_tax_withheld
     *
     * @param float|null $federal_income_tax_withheld federal_income_tax_withheld
     *
     * @return self
     */
    public function setFederalIncomeTaxWithheld($federal_income_tax_withheld)
    {
        $this->container['federal_income_tax_withheld'] = $federal_income_tax_withheld;

        return $this;
    }

    /**
     * Gets employee_contributions_or_designated_roth_or_insurance_premiums
     *
     * @return float|null
     */
    public function getEmployeeContributionsOrDesignatedRothOrInsurancePremiums()
    {
        return $this->container['employee_contributions_or_designated_roth_or_insurance_premiums'];
    }

    /**
     * Sets employee_contributions_or_designated_roth_or_insurance_premiums
     *
     * @param float|null $employee_contributions_or_designated_roth_or_insurance_premiums employee_contributions_or_designated_roth_or_insurance_premiums
     *
     * @return self
     */
    public function setEmployeeContributionsOrDesignatedRothOrInsurancePremiums($employee_contributions_or_designated_roth_or_insurance_premiums)
    {
        $this->container['employee_contributions_or_designated_roth_or_insurance_premiums'] = $employee_contributions_or_designated_roth_or_insurance_premiums;

        return $this;
    }

    /**
     * Gets net_unrealized_appreciation_in_employer_securities
     *
     * @return float|null
     */
    public function getNetUnrealizedAppreciationInEmployerSecurities()
    {
        return $this->container['net_unrealized_appreciation_in_employer_securities'];
    }

    /**
     * Sets net_unrealized_appreciation_in_employer_securities
     *
     * @param float|null $net_unrealized_appreciation_in_employer_securities net_unrealized_appreciation_in_employer_securities
     *
     * @return self
     */
    public function setNetUnrealizedAppreciationInEmployerSecurities($net_unrealized_appreciation_in_employer_securities)
    {
        $this->container['net_unrealized_appreciation_in_employer_securities'] = $net_unrealized_appreciation_in_employer_securities;

        return $this;
    }

    /**
     * Gets distribution_code
     *
     * @return string|null
     */
    public function getDistributionCode()
    {
        return $this->container['distribution_code'];
    }

    /**
     * Sets distribution_code
     *
     * @param string|null $distribution_code distribution_code
     *
     * @return self
     */
    public function setDistributionCode($distribution_code)
    {
        $allowedValues = $this->getDistributionCodeAllowableValues();
        if (!is_null($distribution_code) && !in_array($distribution_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'distribution_code', must be one of '%s'",
                    $distribution_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['distribution_code'] = $distribution_code;

        return $this;
    }

    /**
     * Gets second_distribution_code
     *
     * @return string|null
     */
    public function getSecondDistributionCode()
    {
        return $this->container['second_distribution_code'];
    }

    /**
     * Sets second_distribution_code
     *
     * @param string|null $second_distribution_code second_distribution_code
     *
     * @return self
     */
    public function setSecondDistributionCode($second_distribution_code)
    {
        $allowedValues = $this->getSecondDistributionCodeAllowableValues();
        if (!is_null($second_distribution_code) && !in_array($second_distribution_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'second_distribution_code', must be one of '%s'",
                    $second_distribution_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['second_distribution_code'] = $second_distribution_code;

        return $this;
    }

    /**
     * Gets ira_sep_simple
     *
     * @return bool|null
     */
    public function getIraSepSimple()
    {
        return $this->container['ira_sep_simple'];
    }

    /**
     * Sets ira_sep_simple
     *
     * @param bool|null $ira_sep_simple ira_sep_simple
     *
     * @return self
     */
    public function setIraSepSimple($ira_sep_simple)
    {
        $this->container['ira_sep_simple'] = $ira_sep_simple;

        return $this;
    }

    /**
     * Gets traditional_ira_sep_simple_or_roth_conversion_amount
     *
     * @return float|null
     */
    public function getTraditionalIraSepSimpleOrRothConversionAmount()
    {
        return $this->container['traditional_ira_sep_simple_or_roth_conversion_amount'];
    }

    /**
     * Sets traditional_ira_sep_simple_or_roth_conversion_amount
     *
     * @param float|null $traditional_ira_sep_simple_or_roth_conversion_amount traditional_ira_sep_simple_or_roth_conversion_amount
     *
     * @return self
     */
    public function setTraditionalIraSepSimpleOrRothConversionAmount($traditional_ira_sep_simple_or_roth_conversion_amount)
    {
        $this->container['traditional_ira_sep_simple_or_roth_conversion_amount'] = $traditional_ira_sep_simple_or_roth_conversion_amount;

        return $this;
    }

    /**
     * Gets other_amount
     *
     * @return float|null
     */
    public function getOtherAmount()
    {
        return $this->container['other_amount'];
    }

    /**
     * Sets other_amount
     *
     * @param float|null $other_amount other_amount
     *
     * @return self
     */
    public function setOtherAmount($other_amount)
    {
        $this->container['other_amount'] = $other_amount;

        return $this;
    }

    /**
     * Gets other_percentage
     *
     * @return string|null
     */
    public function getOtherPercentage()
    {
        return $this->container['other_percentage'];
    }

    /**
     * Sets other_percentage
     *
     * @param string|null $other_percentage other_percentage
     *
     * @return self
     */
    public function setOtherPercentage($other_percentage)
    {
        $this->container['other_percentage'] = $other_percentage;

        return $this;
    }

    /**
     * Gets total_distribution_percentage
     *
     * @return string|null
     */
    public function getTotalDistributionPercentage()
    {
        return $this->container['total_distribution_percentage'];
    }

    /**
     * Sets total_distribution_percentage
     *
     * @param string|null $total_distribution_percentage total_distribution_percentage
     *
     * @return self
     */
    public function setTotalDistributionPercentage($total_distribution_percentage)
    {
        $this->container['total_distribution_percentage'] = $total_distribution_percentage;

        return $this;
    }

    /**
     * Gets total_employee_contributions
     *
     * @return float|null
     */
    public function getTotalEmployeeContributions()
    {
        return $this->container['total_employee_contributions'];
    }

    /**
     * Sets total_employee_contributions
     *
     * @param float|null $total_employee_contributions total_employee_contributions
     *
     * @return self
     */
    public function setTotalEmployeeContributions($total_employee_contributions)
    {
        $this->container['total_employee_contributions'] = $total_employee_contributions;

        return $this;
    }

    /**
     * Gets amount_allocable_to_irr_within5_years
     *
     * @return float|null
     */
    public function getAmountAllocableToIrrWithin5Years()
    {
        return $this->container['amount_allocable_to_irr_within5_years'];
    }

    /**
     * Sets amount_allocable_to_irr_within5_years
     *
     * @param float|null $amount_allocable_to_irr_within5_years amount_allocable_to_irr_within5_years
     *
     * @return self
     */
    public function setAmountAllocableToIrrWithin5Years($amount_allocable_to_irr_within5_years)
    {
        $this->container['amount_allocable_to_irr_within5_years'] = $amount_allocable_to_irr_within5_years;

        return $this;
    }

    /**
     * Gets first_year_of_designated_roth_contribution
     *
     * @return int|null
     */
    public function getFirstYearOfDesignatedRothContribution()
    {
        return $this->container['first_year_of_designated_roth_contribution'];
    }

    /**
     * Sets first_year_of_designated_roth_contribution
     *
     * @param int|null $first_year_of_designated_roth_contribution first_year_of_designated_roth_contribution
     *
     * @return self
     */
    public function setFirstYearOfDesignatedRothContribution($first_year_of_designated_roth_contribution)
    {
        $this->container['first_year_of_designated_roth_contribution'] = $first_year_of_designated_roth_contribution;

        return $this;
    }

    /**
     * Gets fatca_filing_requirement
     *
     * @return bool|null
     */
    public function getFatcaFilingRequirement()
    {
        return $this->container['fatca_filing_requirement'];
    }

    /**
     * Sets fatca_filing_requirement
     *
     * @param bool|null $fatca_filing_requirement fatca_filing_requirement
     *
     * @return self
     */
    public function setFatcaFilingRequirement($fatca_filing_requirement)
    {
        $this->container['fatca_filing_requirement'] = $fatca_filing_requirement;

        return $this;
    }

    /**
     * Gets date_of_payment
     *
     * @return \DateTime|null
     */
    public function getDateOfPayment()
    {
        return $this->container['date_of_payment'];
    }

    /**
     * Sets date_of_payment
     *
     * @param \DateTime|null $date_of_payment date_of_payment
     *
     * @return self
     */
    public function setDateOfPayment($date_of_payment)
    {
        $this->container['date_of_payment'] = $date_of_payment;

        return $this;
    }

    /**
     * Gets issuer_reference_id
     *
     * @return string|null
     */
    public function getIssuerReferenceId()
    {
        return $this->container['issuer_reference_id'];
    }

    /**
     * Sets issuer_reference_id
     *
     * @param string|null $issuer_reference_id issuer_reference_id
     *
     * @return self
     */
    public function setIssuerReferenceId($issuer_reference_id)
    {
        $this->container['issuer_reference_id'] = $issuer_reference_id;

        return $this;
    }

    /**
     * Gets issuer_tin
     *
     * @return string|null
     */
    public function getIssuerTin()
    {
        return $this->container['issuer_tin'];
    }

    /**
     * Sets issuer_tin
     *
     * @param string|null $issuer_tin issuer_tin
     *
     * @return self
     */
    public function setIssuerTin($issuer_tin)
    {
        $this->container['issuer_tin'] = $issuer_tin;

        return $this;
    }

    /**
     * Gets tax_year
     *
     * @return int|null
     */
    public function getTaxYear()
    {
        return $this->container['tax_year'];
    }

    /**
     * Sets tax_year
     *
     * @param int|null $tax_year tax_year
     *
     * @return self
     */
    public function setTaxYear($tax_year)
    {
        $this->container['tax_year'] = $tax_year;

        return $this;
    }

    /**
     * Gets issuer_id
     *
     * @return string|null
     */
    public function getIssuerId()
    {
        return $this->container['issuer_id'];
    }

    /**
     * Sets issuer_id
     *
     * @param string|null $issuer_id issuer_id
     *
     * @return self
     */
    public function setIssuerId($issuer_id)
    {
        $this->container['issuer_id'] = $issuer_id;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id reference_id
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets recipient_name
     *
     * @return string|null
     */
    public function getRecipientName()
    {
        return $this->container['recipient_name'];
    }

    /**
     * Sets recipient_name
     *
     * @param string|null $recipient_name recipient_name
     *
     * @return self
     */
    public function setRecipientName($recipient_name)
    {
        $this->container['recipient_name'] = $recipient_name;

        return $this;
    }

    /**
     * Gets recipient_tin
     *
     * @return string|null
     */
    public function getRecipientTin()
    {
        return $this->container['recipient_tin'];
    }

    /**
     * Sets recipient_tin
     *
     * @param string|null $recipient_tin recipient_tin
     *
     * @return self
     */
    public function setRecipientTin($recipient_tin)
    {
        $this->container['recipient_tin'] = $recipient_tin;

        return $this;
    }

    /**
     * Gets tin_type
     *
     * @return string|null
     */
    public function getTinType()
    {
        return $this->container['tin_type'];
    }

    /**
     * Sets tin_type
     *
     * @param string|null $tin_type tin_type
     *
     * @return self
     */
    public function setTinType($tin_type)
    {
        $allowedValues = $this->getTinTypeAllowableValues();
        if (!is_null($tin_type) && !in_array($tin_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tin_type', must be one of '%s'",
                    $tin_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tin_type'] = $tin_type;

        return $this;
    }

    /**
     * Gets recipient_second_name
     *
     * @return string|null
     */
    public function getRecipientSecondName()
    {
        return $this->container['recipient_second_name'];
    }

    /**
     * Sets recipient_second_name
     *
     * @param string|null $recipient_second_name recipient_second_name
     *
     * @return self
     */
    public function setRecipientSecondName($recipient_second_name)
    {
        $this->container['recipient_second_name'] = $recipient_second_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 address2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip zip
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets recipient_email
     *
     * @return string|null
     */
    public function getRecipientEmail()
    {
        return $this->container['recipient_email'];
    }

    /**
     * Sets recipient_email
     *
     * @param string|null $recipient_email recipient_email
     *
     * @return self
     */
    public function setRecipientEmail($recipient_email)
    {
        $this->container['recipient_email'] = $recipient_email;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number account_number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets office_code
     *
     * @return string|null
     */
    public function getOfficeCode()
    {
        return $this->container['office_code'];
    }

    /**
     * Sets office_code
     *
     * @param string|null $office_code office_code
     *
     * @return self
     */
    public function setOfficeCode($office_code)
    {
        $this->container['office_code'] = $office_code;

        return $this;
    }

    /**
     * Gets recipient_non_us_province
     *
     * @return string|null
     */
    public function getRecipientNonUsProvince()
    {
        return $this->container['recipient_non_us_province'];
    }

    /**
     * Sets recipient_non_us_province
     *
     * @param string|null $recipient_non_us_province recipient_non_us_province
     *
     * @return self
     */
    public function setRecipientNonUsProvince($recipient_non_us_province)
    {
        $this->container['recipient_non_us_province'] = $recipient_non_us_province;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code country_code
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets federal_e_file
     *
     * @return bool|null
     */
    public function getFederalEFile()
    {
        return $this->container['federal_e_file'];
    }

    /**
     * Sets federal_e_file
     *
     * @param bool|null $federal_e_file federal_e_file
     *
     * @return self
     */
    public function setFederalEFile($federal_e_file)
    {
        $this->container['federal_e_file'] = $federal_e_file;

        return $this;
    }

    /**
     * Gets postal_mail
     *
     * @return bool|null
     */
    public function getPostalMail()
    {
        return $this->container['postal_mail'];
    }

    /**
     * Sets postal_mail
     *
     * @param bool|null $postal_mail postal_mail
     *
     * @return self
     */
    public function setPostalMail($postal_mail)
    {
        $this->container['postal_mail'] = $postal_mail;

        return $this;
    }

    /**
     * Gets state_e_file
     *
     * @return bool|null
     */
    public function getStateEFile()
    {
        return $this->container['state_e_file'];
    }

    /**
     * Sets state_e_file
     *
     * @param bool|null $state_e_file state_e_file
     *
     * @return self
     */
    public function setStateEFile($state_e_file)
    {
        $this->container['state_e_file'] = $state_e_file;

        return $this;
    }

    /**
     * Gets tin_match
     *
     * @return bool|null
     */
    public function getTinMatch()
    {
        return $this->container['tin_match'];
    }

    /**
     * Sets tin_match
     *
     * @param bool|null $tin_match tin_match
     *
     * @return self
     */
    public function setTinMatch($tin_match)
    {
        $this->container['tin_match'] = $tin_match;

        return $this;
    }

    /**
     * Gets address_verification
     *
     * @return bool|null
     */
    public function getAddressVerification()
    {
        return $this->container['address_verification'];
    }

    /**
     * Sets address_verification
     *
     * @param bool|null $address_verification address_verification
     *
     * @return self
     */
    public function setAddressVerification($address_verification)
    {
        $this->container['address_verification'] = $address_verification;

        return $this;
    }

    /**
     * Gets state_and_local_withholding
     *
     * @return \Avalara\SDK\Model\A1099\V2\StateAndLocalWithholdingRequest|null
     */
    public function getStateAndLocalWithholding()
    {
        return $this->container['state_and_local_withholding'];
    }

    /**
     * Sets state_and_local_withholding
     *
     * @param \Avalara\SDK\Model\A1099\V2\StateAndLocalWithholdingRequest|null $state_and_local_withholding state_and_local_withholding
     *
     * @return self
     */
    public function setStateAndLocalWithholding($state_and_local_withholding)
    {
        $this->container['state_and_local_withholding'] = $state_and_local_withholding;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


