<?php
/**
 * StateAndLocalWithholdingRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 & W-9 API Definition
 *
 * ## 🔐 Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) → Settings → License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## 📘 API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples – 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\A1099\V2
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\A1099\V2;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * StateAndLocalWithholdingRequest Class Doc Comment
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class StateAndLocalWithholdingRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StateAndLocalWithholdingRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'state_tax_withheld' => 'float',
        'state' => 'string',
        'state_id_number' => 'string',
        'state_income' => 'float',
        'local_tax_withheld' => 'float',
        'locality' => 'string',
        'locality_id_number' => 'string',
        'local_income' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'state_tax_withheld' => 'double',
        'state' => null,
        'state_id_number' => null,
        'state_income' => 'double',
        'local_tax_withheld' => 'double',
        'locality' => null,
        'locality_id_number' => null,
        'local_income' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'state_tax_withheld' => 'stateTaxWithheld',
        'state' => 'state',
        'state_id_number' => 'stateIdNumber',
        'state_income' => 'stateIncome',
        'local_tax_withheld' => 'localTaxWithheld',
        'locality' => 'locality',
        'locality_id_number' => 'localityIdNumber',
        'local_income' => 'localIncome'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'state_tax_withheld' => 'setStateTaxWithheld',
        'state' => 'setState',
        'state_id_number' => 'setStateIdNumber',
        'state_income' => 'setStateIncome',
        'local_tax_withheld' => 'setLocalTaxWithheld',
        'locality' => 'setLocality',
        'locality_id_number' => 'setLocalityIdNumber',
        'local_income' => 'setLocalIncome'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'state_tax_withheld' => 'getStateTaxWithheld',
        'state' => 'getState',
        'state_id_number' => 'getStateIdNumber',
        'state_income' => 'getStateIncome',
        'local_tax_withheld' => 'getLocalTaxWithheld',
        'locality' => 'getLocality',
        'locality_id_number' => 'getLocalityIdNumber',
        'local_income' => 'getLocalIncome'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['state_tax_withheld'] = $data['state_tax_withheld'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['state_id_number'] = $data['state_id_number'] ?? null;
        $this->container['state_income'] = $data['state_income'] ?? null;
        $this->container['local_tax_withheld'] = $data['local_tax_withheld'] ?? null;
        $this->container['locality'] = $data['locality'] ?? null;
        $this->container['locality_id_number'] = $data['locality_id_number'] ?? null;
        $this->container['local_income'] = $data['local_income'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets state_tax_withheld
     *
     * @return float|null
     */
    public function getStateTaxWithheld()
    {
        return $this->container['state_tax_withheld'];
    }

    /**
     * Sets state_tax_withheld
     *
     * @param float|null $state_tax_withheld state_tax_withheld
     *
     * @return self
     */
    public function setStateTaxWithheld($state_tax_withheld)
    {
        $this->container['state_tax_withheld'] = $state_tax_withheld;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_id_number
     *
     * @return string|null
     */
    public function getStateIdNumber()
    {
        return $this->container['state_id_number'];
    }

    /**
     * Sets state_id_number
     *
     * @param string|null $state_id_number state_id_number
     *
     * @return self
     */
    public function setStateIdNumber($state_id_number)
    {
        $this->container['state_id_number'] = $state_id_number;

        return $this;
    }

    /**
     * Gets state_income
     *
     * @return float|null
     */
    public function getStateIncome()
    {
        return $this->container['state_income'];
    }

    /**
     * Sets state_income
     *
     * @param float|null $state_income state_income
     *
     * @return self
     */
    public function setStateIncome($state_income)
    {
        $this->container['state_income'] = $state_income;

        return $this;
    }

    /**
     * Gets local_tax_withheld
     *
     * @return float|null
     */
    public function getLocalTaxWithheld()
    {
        return $this->container['local_tax_withheld'];
    }

    /**
     * Sets local_tax_withheld
     *
     * @param float|null $local_tax_withheld local_tax_withheld
     *
     * @return self
     */
    public function setLocalTaxWithheld($local_tax_withheld)
    {
        $this->container['local_tax_withheld'] = $local_tax_withheld;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string|null
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string|null $locality locality
     *
     * @return self
     */
    public function setLocality($locality)
    {
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets locality_id_number
     *
     * @return string|null
     */
    public function getLocalityIdNumber()
    {
        return $this->container['locality_id_number'];
    }

    /**
     * Sets locality_id_number
     *
     * @param string|null $locality_id_number locality_id_number
     *
     * @return self
     */
    public function setLocalityIdNumber($locality_id_number)
    {
        $this->container['locality_id_number'] = $locality_id_number;

        return $this;
    }

    /**
     * Gets local_income
     *
     * @return float|null
     */
    public function getLocalIncome()
    {
        return $this->container['local_income'];
    }

    /**
     * Sets local_income
     *
     * @param float|null $local_income local_income
     *
     * @return self
     */
    public function setLocalIncome($local_income)
    {
        $this->container['local_income'] = $local_income;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


