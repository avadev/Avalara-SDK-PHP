<?php
/**
 * TradingPartner
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara E-Invoicing API
 *
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\EInvoicing\V1
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\EInvoicing\V1;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * TradingPartner Class Doc Comment
 *
 * @category Class
 * @description Represents a participant in the Avalara directory.
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TradingPartner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TradingPartner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'network' => 'string',
        'registration_date' => 'string',
        'identifiers' => '\Avalara\SDK\Model\EInvoicing\V1\Identifier[]',
        'addresses' => '\Avalara\SDK\Model\EInvoicing\V1\Address[]',
        'supported_document_types' => '\Avalara\SDK\Model\EInvoicing\V1\SupportedDocumentTypes[]',
        'consents' => '\Avalara\SDK\Model\EInvoicing\V1\Consents',
        'extensions' => '\Avalara\SDK\Model\EInvoicing\V1\Extension[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'network' => null,
        'registration_date' => 'datetime',
        'identifiers' => null,
        'addresses' => null,
        'supported_document_types' => null,
        'consents' => null,
        'extensions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'network' => 'network',
        'registration_date' => 'registrationDate',
        'identifiers' => 'identifiers',
        'addresses' => 'addresses',
        'supported_document_types' => 'supportedDocumentTypes',
        'consents' => 'consents',
        'extensions' => 'extensions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'network' => 'setNetwork',
        'registration_date' => 'setRegistrationDate',
        'identifiers' => 'setIdentifiers',
        'addresses' => 'setAddresses',
        'supported_document_types' => 'setSupportedDocumentTypes',
        'consents' => 'setConsents',
        'extensions' => 'setExtensions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'network' => 'getNetwork',
        'registration_date' => 'getRegistrationDate',
        'identifiers' => 'getIdentifiers',
        'addresses' => 'getAddresses',
        'supported_document_types' => 'getSupportedDocumentTypes',
        'consents' => 'getConsents',
        'extensions' => 'getExtensions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['network'] = $data['network'] ?? null;
        $this->container['registration_date'] = $data['registration_date'] ?? null;
        $this->container['identifiers'] = $data['identifiers'] ?? null;
        $this->container['addresses'] = $data['addresses'] ?? null;
        $this->container['supported_document_types'] = $data['supported_document_types'] ?? null;
        $this->container['consents'] = $data['consents'] ?? null;
        $this->container['extensions'] = $data['extensions'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 250)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 250.";
        }

        if ((mb_strlen($this->container['name']) < 3)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['identifiers'] === null) {
            $invalidProperties[] = "'identifiers' can't be null";
        }
        if ((count($this->container['identifiers']) < 1)) {
            $invalidProperties[] = "invalid value for 'identifiers', number of items must be greater than or equal to 1.";
        }

        if ($this->container['addresses'] === null) {
            $invalidProperties[] = "'addresses' can't be null";
        }
        if ((count($this->container['addresses']) < 1)) {
            $invalidProperties[] = "invalid value for 'addresses', number of items must be greater than or equal to 1.";
        }

        if ($this->container['supported_document_types'] === null) {
            $invalidProperties[] = "'supported_document_types' can't be null";
        }
        if ((count($this->container['supported_document_types']) < 1)) {
            $invalidProperties[] = "invalid value for 'supported_document_types', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Avalara unique ID of the participant in the directory.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the participant (typically, the name of the business entity).
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 250)) {
            throw new \InvalidArgumentException('invalid length for $name when calling TradingPartner., must be smaller than or equal to 250.');
        }
        if ((mb_strlen($name) < 3)) {
            throw new \InvalidArgumentException('invalid length for $name when calling TradingPartner., must be bigger than or equal to 3.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string|null $network The network where the participant is present. When creating or updating a trading partner, the value provided for the attribute 'network' will be ignored.
     *
     * @return self
     */
    public function setNetwork($network)
    {
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets registration_date
     *
     * @return string|null
     */
    public function getRegistrationDate()
    {
        return $this->container['registration_date'];
    }

    /**
     * Sets registration_date
     *
     * @param string|null $registration_date Registration date of the participant if available.
     *
     * @return self
     */
    public function setRegistrationDate($registration_date)
    {
        $this->container['registration_date'] = $registration_date;

        return $this;
    }

    /**
     * Gets identifiers
     *
     * @return \Avalara\SDK\Model\EInvoicing\V1\Identifier[]
     */
    public function getIdentifiers()
    {
        return $this->container['identifiers'];
    }

    /**
     * Sets identifiers
     *
     * @param \Avalara\SDK\Model\EInvoicing\V1\Identifier[] $identifiers A list of identifiers associated with the trading partner. Each identifier should consistently include the fields name, and value to maintain clarity and ensure consistent structure across entries. When creating or updating a trading partner, the attribute 'name' must be agreed upon with Avalara to ensure consistency. Failing to adhere to the agreed values will result in a validation error. Further, when creating or updating a trading partner, the value provided for the attribute 'displayName' will be ignored and instead retrieved from the standard set of display names maintained.
     *
     * @return self
     */
    public function setIdentifiers($identifiers)
    {


        if ((count($identifiers) < 1)) {
            throw new \InvalidArgumentException('invalid length for $identifiers when calling TradingPartner., number of items must be greater than or equal to 1.');
        }
        $this->container['identifiers'] = $identifiers;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Avalara\SDK\Model\EInvoicing\V1\Address[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Avalara\SDK\Model\EInvoicing\V1\Address[] $addresses addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {


        if ((count($addresses) < 1)) {
            throw new \InvalidArgumentException('invalid length for $addresses when calling TradingPartner., number of items must be greater than or equal to 1.');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets supported_document_types
     *
     * @return \Avalara\SDK\Model\EInvoicing\V1\SupportedDocumentTypes[]
     */
    public function getSupportedDocumentTypes()
    {
        return $this->container['supported_document_types'];
    }

    /**
     * Sets supported_document_types
     *
     * @param \Avalara\SDK\Model\EInvoicing\V1\SupportedDocumentTypes[] $supported_document_types A list of document types supported by the trading partner for exchange. Each document type identifier value must match the standard list maintained by Avalara, which includes Peppol and other public network document type identifier schemes and values, as well as any approved partner-specific identifiers. The 'value' field must exactly match an entry from the provided document identifier list. Any attempt to submit unsupported document types will result in a validation error. Further, when creating or updating a trading partner, the value provided for the attributes 'name' and 'supportedByAvalara' will be ignored.
     *
     * @return self
     */
    public function setSupportedDocumentTypes($supported_document_types)
    {


        if ((count($supported_document_types) < 1)) {
            throw new \InvalidArgumentException('invalid length for $supported_document_types when calling TradingPartner., number of items must be greater than or equal to 1.');
        }
        $this->container['supported_document_types'] = $supported_document_types;

        return $this;
    }

    /**
     * Gets consents
     *
     * @return \Avalara\SDK\Model\EInvoicing\V1\Consents|null
     */
    public function getConsents()
    {
        return $this->container['consents'];
    }

    /**
     * Sets consents
     *
     * @param \Avalara\SDK\Model\EInvoicing\V1\Consents|null $consents consents
     *
     * @return self
     */
    public function setConsents($consents)
    {
        $this->container['consents'] = $consents;

        return $this;
    }

    /**
     * Gets extensions
     *
     * @return \Avalara\SDK\Model\EInvoicing\V1\Extension[]|null
     */
    public function getExtensions()
    {
        return $this->container['extensions'];
    }

    /**
     * Sets extensions
     *
     * @param \Avalara\SDK\Model\EInvoicing\V1\Extension[]|null $extensions Optional array used to carry additional metadata or configuration values that may be required by specific networks. When creating or updating a trading partner, the keys provided in the 'extensions' attribute must be selected from a predefined list of supported extensions. Using any unsupported keys will result in a validation error.
     *
     * @return self
     */
    public function setExtensions($extensions)
    {
        $this->container['extensions'] = $extensions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


