<?php
/**
 * DocumentSummary
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2022 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara E-Invoicing API
 *
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * @category   Avalara client libraries
 * @package    Avalara\\SDK\API\\EInvoicing\\V1
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2022 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @version    
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\\SDK\Model\\EInvoicing\\V1;

use \ArrayAccess;
use \Avalara\\SDK\ObjectSerializer;
use \Avalara\\SDK\Model\ModelInterface;
/**
 * DocumentSummary Class Doc Comment
 *
 * @category Class
 * @description Displays a summary of information about the document
 * @package  Avalara\\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DocumentSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocumentSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'process_date_time' => 'string',
        'status' => 'string',
        'supplier_name' => 'string',
        'customer_name' => 'string',
        'document_type' => 'string',
        'document_version' => 'string',
        'document_number' => 'string',
        'document_date' => 'string',
        'flow' => 'string',
        'country_code' => 'string',
        'country_mandate' => 'string',
        'interface' => 'string',
        'receiver' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'process_date_time' => null,
        'status' => null,
        'supplier_name' => null,
        'customer_name' => null,
        'document_type' => null,
        'document_version' => null,
        'document_number' => null,
        'document_date' => null,
        'flow' => null,
        'country_code' => null,
        'country_mandate' => null,
        'interface' => null,
        'receiver' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'process_date_time' => 'processDateTime',
        'status' => 'status',
        'supplier_name' => 'supplierName',
        'customer_name' => 'customerName',
        'document_type' => 'documentType',
        'document_version' => 'documentVersion',
        'document_number' => 'documentNumber',
        'document_date' => 'documentDate',
        'flow' => 'flow',
        'country_code' => 'countryCode',
        'country_mandate' => 'countryMandate',
        'interface' => 'interface',
        'receiver' => 'receiver'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'process_date_time' => 'setProcessDateTime',
        'status' => 'setStatus',
        'supplier_name' => 'setSupplierName',
        'customer_name' => 'setCustomerName',
        'document_type' => 'setDocumentType',
        'document_version' => 'setDocumentVersion',
        'document_number' => 'setDocumentNumber',
        'document_date' => 'setDocumentDate',
        'flow' => 'setFlow',
        'country_code' => 'setCountryCode',
        'country_mandate' => 'setCountryMandate',
        'interface' => 'setInterface',
        'receiver' => 'setReceiver'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'process_date_time' => 'getProcessDateTime',
        'status' => 'getStatus',
        'supplier_name' => 'getSupplierName',
        'customer_name' => 'getCustomerName',
        'document_type' => 'getDocumentType',
        'document_version' => 'getDocumentVersion',
        'document_number' => 'getDocumentNumber',
        'document_date' => 'getDocumentDate',
        'flow' => 'getFlow',
        'country_code' => 'getCountryCode',
        'country_mandate' => 'getCountryMandate',
        'interface' => 'getInterface',
        'receiver' => 'getReceiver'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['process_date_time'] = $data['process_date_time'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['supplier_name'] = $data['supplier_name'] ?? null;
        $this->container['customer_name'] = $data['customer_name'] ?? null;
        $this->container['document_type'] = $data['document_type'] ?? null;
        $this->container['document_version'] = $data['document_version'] ?? null;
        $this->container['document_number'] = $data['document_number'] ?? null;
        $this->container['document_date'] = $data['document_date'] ?? null;
        $this->container['flow'] = $data['flow'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['country_mandate'] = $data['country_mandate'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['receiver'] = $data['receiver'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique ID for this document
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets process_date_time
     *
     * @return string|null
     */
    public function getProcessDateTime()
    {
        return $this->container['process_date_time'];
    }

    /**
     * Sets process_date_time
     *
     * @param string|null $process_date_time The date and time when the document was processed, displayed in the format YYYY-MM-DDThh:mm:ss
     *
     * @return self
     */
    public function setProcessDateTime($process_date_time)
    {
        $this->container['process_date_time'] = $process_date_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The Document status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string|null
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string|null $supplier_name The name of the supplier in the transaction
     *
     * @return self
     */
    public function setSupplierName($supplier_name)
    {
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string|null
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string|null $customer_name The name of the customer in the transaction
     *
     * @return self
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string|null $document_type The document type
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_version
     *
     * @return string|null
     */
    public function getDocumentVersion()
    {
        return $this->container['document_version'];
    }

    /**
     * Sets document_version
     *
     * @param string|null $document_version The document version
     *
     * @return self
     */
    public function setDocumentVersion($document_version)
    {
        $this->container['document_version'] = $document_version;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string|null
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string|null $document_number The document number
     *
     * @return self
     */
    public function setDocumentNumber($document_number)
    {
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return string|null
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param string|null $document_date The document issue date
     *
     * @return self
     */
    public function setDocumentDate($document_date)
    {
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets flow
     *
     * @return string|null
     */
    public function getFlow()
    {
        return $this->container['flow'];
    }

    /**
     * Sets flow
     *
     * @param string|null $flow The document direction, where issued = `out` and received = `in`
     *
     * @return self
     */
    public function setFlow($flow)
    {
        $this->container['flow'] = $flow;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code The two-letter ISO-3166 country code for the country where the document is being submitted
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets country_mandate
     *
     * @return string|null
     */
    public function getCountryMandate()
    {
        return $this->container['country_mandate'];
    }

    /**
     * Sets country_mandate
     *
     * @param string|null $country_mandate The e-invoicing mandate for the specified country
     *
     * @return self
     */
    public function setCountryMandate($country_mandate)
    {
        $this->container['country_mandate'] = $country_mandate;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface The interface where the document is sent
     *
     * @return self
     */
    public function setInterface($interface)
    {
        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets receiver
     *
     * @return string|null
     */
    public function getReceiver()
    {
        return $this->container['receiver'];
    }

    /**
     * Sets receiver
     *
     * @param string|null $receiver The document recipient based on the interface
     *
     * @return self
     */
    public function setReceiver($receiver)
    {
        $this->container['receiver'] = $receiver;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


