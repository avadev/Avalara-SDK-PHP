<?php
/**
 * SubmitDocumentMetadata
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara E-Invoicing API
 *
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\EInvoicing\V1
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\EInvoicing\V1;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * SubmitDocumentMetadata Class Doc Comment
 *
 * @category Class
 * @description Key value pairs of metadata for a document submission &lt;br&gt;&lt;pre&gt;{  \&quot;workflowId\&quot;: \&quot;partner-einvoicing\&quot;, \&quot;dataFormat\&quot;: \&quot;ubl-invoice\&quot;, \&quot;dataFormatVersion\&quot;: \&quot;2.1\&quot;, \&quot;countryCode\&quot;: \&quot;SA\&quot;, \&quot;countryMandate\&quot;: \&quot;SA-Phase1-B2B\&quot; }&lt;/pre&gt; &lt;br&gt;
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SubmitDocumentMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubmitDocument_metadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'workflow_id' => 'string',
        'data_format' => 'string',
        'data_format_version' => 'string',
        'output_data_format' => 'string',
        'output_data_format_version' => 'string',
        'country_code' => 'string',
        'country_mandate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'workflow_id' => null,
        'data_format' => null,
        'data_format_version' => null,
        'output_data_format' => null,
        'output_data_format_version' => null,
        'country_code' => null,
        'country_mandate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'workflow_id' => 'workflowId',
        'data_format' => 'dataFormat',
        'data_format_version' => 'dataFormatVersion',
        'output_data_format' => 'outputDataFormat',
        'output_data_format_version' => 'outputDataFormatVersion',
        'country_code' => 'countryCode',
        'country_mandate' => 'countryMandate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'workflow_id' => 'setWorkflowId',
        'data_format' => 'setDataFormat',
        'data_format_version' => 'setDataFormatVersion',
        'output_data_format' => 'setOutputDataFormat',
        'output_data_format_version' => 'setOutputDataFormatVersion',
        'country_code' => 'setCountryCode',
        'country_mandate' => 'setCountryMandate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'workflow_id' => 'getWorkflowId',
        'data_format' => 'getDataFormat',
        'data_format_version' => 'getDataFormatVersion',
        'output_data_format' => 'getOutputDataFormat',
        'output_data_format_version' => 'getOutputDataFormatVersion',
        'country_code' => 'getCountryCode',
        'country_mandate' => 'getCountryMandate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['workflow_id'] = $data['workflow_id'] ?? null;
        $this->container['data_format'] = $data['data_format'] ?? null;
        $this->container['data_format_version'] = $data['data_format_version'] ?? null;
        $this->container['output_data_format'] = $data['output_data_format'] ?? null;
        $this->container['output_data_format_version'] = $data['output_data_format_version'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['country_mandate'] = $data['country_mandate'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['workflow_id'] === null) {
            $invalidProperties[] = "'workflow_id' can't be null";
        }
        if ($this->container['data_format'] === null) {
            $invalidProperties[] = "'data_format' can't be null";
        }
        if ($this->container['data_format_version'] === null) {
            $invalidProperties[] = "'data_format_version' can't be null";
        }
        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        if ($this->container['country_mandate'] === null) {
            $invalidProperties[] = "'country_mandate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets workflow_id
     *
     * @return string
     */
    public function getWorkflowId()
    {
        return $this->container['workflow_id'];
    }

    /**
     * Sets workflow_id
     *
     * @param string $workflow_id Specifies a unique ID for this workflow.
     *
     * @return self
     */
    public function setWorkflowId($workflow_id)
    {
        $this->container['workflow_id'] = $workflow_id;

        return $this;
    }

    /**
     * Gets data_format
     *
     * @return string
     */
    public function getDataFormat()
    {
        return $this->container['data_format'];
    }

    /**
     * Sets data_format
     *
     * @param string $data_format Specifies the data format for this workflow.
     *
     * @return self
     */
    public function setDataFormat($data_format)
    {
        $this->container['data_format'] = $data_format;

        return $this;
    }

    /**
     * Gets data_format_version
     *
     * @return string
     */
    public function getDataFormatVersion()
    {
        return $this->container['data_format_version'];
    }

    /**
     * Sets data_format_version
     *
     * @param string $data_format_version Specifies the data format version number.
     *
     * @return self
     */
    public function setDataFormatVersion($data_format_version)
    {
        $this->container['data_format_version'] = $data_format_version;

        return $this;
    }

    /**
     * Gets output_data_format
     *
     * @return string|null
     */
    public function getOutputDataFormat()
    {
        return $this->container['output_data_format'];
    }

    /**
     * Sets output_data_format
     *
     * @param string|null $output_data_format Specifies the format of the output document to be generated for the recipient. This format should be chosen based on the recipient's preferences or requirements as defined by applicable e-invoicing regulations. When not specified for mandates that don't require a specific output format, the system will use the default format defined for that mandate.
     *
     * @return self
     */
    public function setOutputDataFormat($output_data_format)
    {
        $this->container['output_data_format'] = $output_data_format;

        return $this;
    }

    /**
     * Gets output_data_format_version
     *
     * @return string|null
     */
    public function getOutputDataFormatVersion()
    {
        return $this->container['output_data_format_version'];
    }

    /**
     * Sets output_data_format_version
     *
     * @param string|null $output_data_format_version Specifies the version of the selected output document format
     *
     * @return self
     */
    public function setOutputDataFormatVersion($output_data_format_version)
    {
        $this->container['output_data_format_version'] = $output_data_format_version;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code The two-letter ISO-3166 country code for the country where the document is being submitted
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets country_mandate
     *
     * @return string
     */
    public function getCountryMandate()
    {
        return $this->container['country_mandate'];
    }

    /**
     * Sets country_mandate
     *
     * @param string $country_mandate The e-invoicing mandate for the specified country.
     *
     * @return self
     */
    public function setCountryMandate($country_mandate)
    {
        $this->container['country_mandate'] = $country_mandate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


