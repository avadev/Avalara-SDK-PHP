<?php
/**
 * MandateDataInputField
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2022 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara E-Invoicing API
 *
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * @category   Avalara client libraries
 * @package    Avalara\\SDK\API\\EInvoicing\\V1
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2022 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @version    
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\\SDK\Model\\EInvoicing\\V1;

use \ArrayAccess;
use \Avalara\\SDK\ObjectSerializer;
use \Avalara\\SDK\Model\ModelInterface;
/**
 * MandateDataInputField Class Doc Comment
 *
 * @category Class
 * @description The Data Input Field
 * @package  Avalara\\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MandateDataInputField implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MandateDataInputField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'field_id' => 'string',
        'document_type' => 'string',
        'document_version' => 'string',
        'path' => 'string',
        'path_type' => 'string',
        'field_name' => 'string',
        'namespace' => '\Avalara\\SDK\Model\\EInvoicing\\V1\MandateDataInputFieldNamespace',
        'example_or_fixed_value' => 'string',
        'accepted_values' => 'string[]',
        'documentation_link' => 'string',
        'data_type' => 'string',
        'description' => 'string',
        'optionality' => 'string',
        'cardinality' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'field_id' => null,
        'document_type' => null,
        'document_version' => null,
        'path' => null,
        'path_type' => null,
        'field_name' => null,
        'namespace' => null,
        'example_or_fixed_value' => null,
        'accepted_values' => null,
        'documentation_link' => null,
        'data_type' => null,
        'description' => null,
        'optionality' => null,
        'cardinality' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'field_id' => 'fieldId',
        'document_type' => 'documentType',
        'document_version' => 'documentVersion',
        'path' => 'path',
        'path_type' => 'pathType',
        'field_name' => 'fieldName',
        'namespace' => 'namespace',
        'example_or_fixed_value' => 'exampleOrFixedValue',
        'accepted_values' => 'acceptedValues',
        'documentation_link' => 'documentationLink',
        'data_type' => 'dataType',
        'description' => 'description',
        'optionality' => 'optionality',
        'cardinality' => 'cardinality'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'field_id' => 'setFieldId',
        'document_type' => 'setDocumentType',
        'document_version' => 'setDocumentVersion',
        'path' => 'setPath',
        'path_type' => 'setPathType',
        'field_name' => 'setFieldName',
        'namespace' => 'setNamespace',
        'example_or_fixed_value' => 'setExampleOrFixedValue',
        'accepted_values' => 'setAcceptedValues',
        'documentation_link' => 'setDocumentationLink',
        'data_type' => 'setDataType',
        'description' => 'setDescription',
        'optionality' => 'setOptionality',
        'cardinality' => 'setCardinality'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'field_id' => 'getFieldId',
        'document_type' => 'getDocumentType',
        'document_version' => 'getDocumentVersion',
        'path' => 'getPath',
        'path_type' => 'getPathType',
        'field_name' => 'getFieldName',
        'namespace' => 'getNamespace',
        'example_or_fixed_value' => 'getExampleOrFixedValue',
        'accepted_values' => 'getAcceptedValues',
        'documentation_link' => 'getDocumentationLink',
        'data_type' => 'getDataType',
        'description' => 'getDescription',
        'optionality' => 'getOptionality',
        'cardinality' => 'getCardinality'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field_id'] = $data['field_id'] ?? null;
        $this->container['document_type'] = $data['document_type'] ?? null;
        $this->container['document_version'] = $data['document_version'] ?? null;
        $this->container['path'] = $data['path'] ?? null;
        $this->container['path_type'] = $data['path_type'] ?? null;
        $this->container['field_name'] = $data['field_name'] ?? null;
        $this->container['namespace'] = $data['namespace'] ?? null;
        $this->container['example_or_fixed_value'] = $data['example_or_fixed_value'] ?? null;
        $this->container['accepted_values'] = $data['accepted_values'] ?? null;
        $this->container['documentation_link'] = $data['documentation_link'] ?? null;
        $this->container['data_type'] = $data['data_type'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['optionality'] = $data['optionality'] ?? null;
        $this->container['cardinality'] = $data['cardinality'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets field_id
     *
     * @return string|null
     */
    public function getFieldId()
    {
        return $this->container['field_id'];
    }

    /**
     * Sets field_id
     *
     * @param string|null $field_id Field ID
     *
     * @return self
     */
    public function setFieldId($field_id)
    {
        $this->container['field_id'] = $field_id;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string|null $document_type The document type
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_version
     *
     * @return string|null
     */
    public function getDocumentVersion()
    {
        return $this->container['document_version'];
    }

    /**
     * Sets document_version
     *
     * @param string|null $document_version The document version
     *
     * @return self
     */
    public function setDocumentVersion($document_version)
    {
        $this->container['document_version'] = $document_version;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path Path to this field
     *
     * @return self
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets path_type
     *
     * @return string|null
     */
    public function getPathType()
    {
        return $this->container['path_type'];
    }

    /**
     * Sets path_type
     *
     * @param string|null $path_type The type of path
     *
     * @return self
     */
    public function setPathType($path_type)
    {
        $this->container['path_type'] = $path_type;

        return $this;
    }

    /**
     * Gets field_name
     *
     * @return string|null
     */
    public function getFieldName()
    {
        return $this->container['field_name'];
    }

    /**
     * Sets field_name
     *
     * @param string|null $field_name Field name
     *
     * @return self
     */
    public function setFieldName($field_name)
    {
        $this->container['field_name'] = $field_name;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return \Avalara\\SDK\Model\\EInvoicing\\V1\MandateDataInputFieldNamespace|null
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param \Avalara\\SDK\Model\\EInvoicing\\V1\MandateDataInputFieldNamespace|null $namespace namespace
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets example_or_fixed_value
     *
     * @return string|null
     */
    public function getExampleOrFixedValue()
    {
        return $this->container['example_or_fixed_value'];
    }

    /**
     * Sets example_or_fixed_value
     *
     * @param string|null $example_or_fixed_value An example of the content for this field
     *
     * @return self
     */
    public function setExampleOrFixedValue($example_or_fixed_value)
    {
        $this->container['example_or_fixed_value'] = $example_or_fixed_value;

        return $this;
    }

    /**
     * Gets accepted_values
     *
     * @return string[]|null
     */
    public function getAcceptedValues()
    {
        return $this->container['accepted_values'];
    }

    /**
     * Sets accepted_values
     *
     * @param string[]|null $accepted_values An Array representing the acceptable values for this field
     *
     * @return self
     */
    public function setAcceptedValues($accepted_values)
    {
        $this->container['accepted_values'] = $accepted_values;

        return $this;
    }

    /**
     * Gets documentation_link
     *
     * @return string|null
     */
    public function getDocumentationLink()
    {
        return $this->container['documentation_link'];
    }

    /**
     * Sets documentation_link
     *
     * @param string|null $documentation_link An example of the content for this field
     *
     * @return self
     */
    public function setDocumentationLink($documentation_link)
    {
        $this->container['documentation_link'] = $documentation_link;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string|null
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string|null $data_type The data type of this field.
     *
     * @return self
     */
    public function setDataType($data_type)
    {
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of this field
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets optionality
     *
     * @return string|null
     */
    public function getOptionality()
    {
        return $this->container['optionality'];
    }

    /**
     * Sets optionality
     *
     * @param string|null $optionality Determines if the field if Required/Conditional/Optional or not required.
     *
     * @return self
     */
    public function setOptionality($optionality)
    {
        $this->container['optionality'] = $optionality;

        return $this;
    }

    /**
     * Gets cardinality
     *
     * @return string|null
     */
    public function getCardinality()
    {
        return $this->container['cardinality'];
    }

    /**
     * Sets cardinality
     *
     * @param string|null $cardinality Represents the number of times an element can appear within the document
     *
     * @return self
     */
    public function setCardinality($cardinality)
    {
        $this->container['cardinality'] = $cardinality;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


