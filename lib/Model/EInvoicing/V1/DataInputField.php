<?php
/**
 * DataInputField
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2022 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara E-Invoicing API
 *
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\EInvoicing\V1
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2022 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @version    
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\EInvoicing\V1;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * DataInputField Class Doc Comment
 *
 * @category Class
 * @description The Data Input Field
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DataInputField implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataInputField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'field_id' => 'string',
        'applicable_document_roots' => 'object[]',
        'path' => 'string',
        'name_space' => 'string',
        'field_name' => 'string',
        'example_or_fixed_value' => 'string',
        'accepted_values' => 'object',
        'documentation_link' => 'string',
        'description' => 'string',
        'is_segment' => 'bool',
        'required_for' => '\Avalara\SDK\Model\EInvoicing\V1\DataInputFieldRequiredFor',
        'conditional_for' => '\Avalara\SDK\Model\EInvoicing\V1\ConditionalForField[]',
        'not_used_for' => '\Avalara\SDK\Model\EInvoicing\V1\DataInputFieldNotUsedFor',
        'optional_for' => '\Avalara\SDK\Model\EInvoicing\V1\DataInputFieldOptionalFor'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'field_id' => null,
        'applicable_document_roots' => null,
        'path' => null,
        'name_space' => null,
        'field_name' => null,
        'example_or_fixed_value' => null,
        'accepted_values' => null,
        'documentation_link' => null,
        'description' => null,
        'is_segment' => null,
        'required_for' => null,
        'conditional_for' => null,
        'not_used_for' => null,
        'optional_for' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'field_id' => 'fieldId',
        'applicable_document_roots' => 'applicableDocumentRoots',
        'path' => 'path',
        'name_space' => 'nameSpace',
        'field_name' => 'fieldName',
        'example_or_fixed_value' => 'exampleOrFixedValue',
        'accepted_values' => 'acceptedValues',
        'documentation_link' => 'documentationLink',
        'description' => 'description',
        'is_segment' => 'isSegment',
        'required_for' => 'requiredFor',
        'conditional_for' => 'conditionalFor',
        'not_used_for' => 'notUsedFor',
        'optional_for' => 'optionalFor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'field_id' => 'setFieldId',
        'applicable_document_roots' => 'setApplicableDocumentRoots',
        'path' => 'setPath',
        'name_space' => 'setNameSpace',
        'field_name' => 'setFieldName',
        'example_or_fixed_value' => 'setExampleOrFixedValue',
        'accepted_values' => 'setAcceptedValues',
        'documentation_link' => 'setDocumentationLink',
        'description' => 'setDescription',
        'is_segment' => 'setIsSegment',
        'required_for' => 'setRequiredFor',
        'conditional_for' => 'setConditionalFor',
        'not_used_for' => 'setNotUsedFor',
        'optional_for' => 'setOptionalFor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'field_id' => 'getFieldId',
        'applicable_document_roots' => 'getApplicableDocumentRoots',
        'path' => 'getPath',
        'name_space' => 'getNameSpace',
        'field_name' => 'getFieldName',
        'example_or_fixed_value' => 'getExampleOrFixedValue',
        'accepted_values' => 'getAcceptedValues',
        'documentation_link' => 'getDocumentationLink',
        'description' => 'getDescription',
        'is_segment' => 'getIsSegment',
        'required_for' => 'getRequiredFor',
        'conditional_for' => 'getConditionalFor',
        'not_used_for' => 'getNotUsedFor',
        'optional_for' => 'getOptionalFor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['field_id'] = $data['field_id'] ?? null;
        $this->container['applicable_document_roots'] = $data['applicable_document_roots'] ?? null;
        $this->container['path'] = $data['path'] ?? null;
        $this->container['name_space'] = $data['name_space'] ?? null;
        $this->container['field_name'] = $data['field_name'] ?? null;
        $this->container['example_or_fixed_value'] = $data['example_or_fixed_value'] ?? null;
        $this->container['accepted_values'] = $data['accepted_values'] ?? null;
        $this->container['documentation_link'] = $data['documentation_link'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['is_segment'] = $data['is_segment'] ?? null;
        $this->container['required_for'] = $data['required_for'] ?? null;
        $this->container['conditional_for'] = $data['conditional_for'] ?? null;
        $this->container['not_used_for'] = $data['not_used_for'] ?? null;
        $this->container['optional_for'] = $data['optional_for'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Field UUID
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets field_id
     *
     * @return string|null
     */
    public function getFieldId()
    {
        return $this->container['field_id'];
    }

    /**
     * Sets field_id
     *
     * @param string|null $field_id Field ID
     *
     * @return self
     */
    public function setFieldId($field_id)
    {
        $this->container['field_id'] = $field_id;

        return $this;
    }

    /**
     * Gets applicable_document_roots
     *
     * @return object[]|null
     */
    public function getApplicableDocumentRoots()
    {
        return $this->container['applicable_document_roots'];
    }

    /**
     * Sets applicable_document_roots
     *
     * @param object[]|null $applicable_document_roots applicable_document_roots
     *
     * @return self
     */
    public function setApplicableDocumentRoots($applicable_document_roots)
    {
        $this->container['applicable_document_roots'] = $applicable_document_roots;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path Path to this field
     *
     * @return self
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets name_space
     *
     * @return string|null
     */
    public function getNameSpace()
    {
        return $this->container['name_space'];
    }

    /**
     * Sets name_space
     *
     * @param string|null $name_space Namespace of this field
     *
     * @return self
     */
    public function setNameSpace($name_space)
    {
        $this->container['name_space'] = $name_space;

        return $this;
    }

    /**
     * Gets field_name
     *
     * @return string|null
     */
    public function getFieldName()
    {
        return $this->container['field_name'];
    }

    /**
     * Sets field_name
     *
     * @param string|null $field_name Field name
     *
     * @return self
     */
    public function setFieldName($field_name)
    {
        $this->container['field_name'] = $field_name;

        return $this;
    }

    /**
     * Gets example_or_fixed_value
     *
     * @return string|null
     */
    public function getExampleOrFixedValue()
    {
        return $this->container['example_or_fixed_value'];
    }

    /**
     * Sets example_or_fixed_value
     *
     * @param string|null $example_or_fixed_value An example of the content for this field
     *
     * @return self
     */
    public function setExampleOrFixedValue($example_or_fixed_value)
    {
        $this->container['example_or_fixed_value'] = $example_or_fixed_value;

        return $this;
    }

    /**
     * Gets accepted_values
     *
     * @return object|null
     */
    public function getAcceptedValues()
    {
        return $this->container['accepted_values'];
    }

    /**
     * Sets accepted_values
     *
     * @param object|null $accepted_values An object representing the acceptable values for this field
     *
     * @return self
     */
    public function setAcceptedValues($accepted_values)
    {
        $this->container['accepted_values'] = $accepted_values;

        return $this;
    }

    /**
     * Gets documentation_link
     *
     * @return string|null
     */
    public function getDocumentationLink()
    {
        return $this->container['documentation_link'];
    }

    /**
     * Sets documentation_link
     *
     * @param string|null $documentation_link An example of the content for this field
     *
     * @return self
     */
    public function setDocumentationLink($documentation_link)
    {
        $this->container['documentation_link'] = $documentation_link;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of this field
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_segment
     *
     * @return bool|null
     */
    public function getIsSegment()
    {
        return $this->container['is_segment'];
    }

    /**
     * Sets is_segment
     *
     * @param bool|null $is_segment Is this a segment of the schema
     *
     * @return self
     */
    public function setIsSegment($is_segment)
    {
        $this->container['is_segment'] = $is_segment;

        return $this;
    }

    /**
     * Gets required_for
     *
     * @return \Avalara\SDK\Model\EInvoicing\V1\DataInputFieldRequiredFor|null
     */
    public function getRequiredFor()
    {
        return $this->container['required_for'];
    }

    /**
     * Sets required_for
     *
     * @param \Avalara\SDK\Model\EInvoicing\V1\DataInputFieldRequiredFor|null $required_for required_for
     *
     * @return self
     */
    public function setRequiredFor($required_for)
    {
        $this->container['required_for'] = $required_for;

        return $this;
    }

    /**
     * Gets conditional_for
     *
     * @return \Avalara\SDK\Model\EInvoicing\V1\ConditionalForField[]|null
     */
    public function getConditionalFor()
    {
        return $this->container['conditional_for'];
    }

    /**
     * Sets conditional_for
     *
     * @param \Avalara\SDK\Model\EInvoicing\V1\ConditionalForField[]|null $conditional_for conditional_for
     *
     * @return self
     */
    public function setConditionalFor($conditional_for)
    {
        $this->container['conditional_for'] = $conditional_for;

        return $this;
    }

    /**
     * Gets not_used_for
     *
     * @return \Avalara\SDK\Model\EInvoicing\V1\DataInputFieldNotUsedFor|null
     */
    public function getNotUsedFor()
    {
        return $this->container['not_used_for'];
    }

    /**
     * Sets not_used_for
     *
     * @param \Avalara\SDK\Model\EInvoicing\V1\DataInputFieldNotUsedFor|null $not_used_for not_used_for
     *
     * @return self
     */
    public function setNotUsedFor($not_used_for)
    {
        $this->container['not_used_for'] = $not_used_for;

        return $this;
    }

    /**
     * Gets optional_for
     *
     * @return \Avalara\SDK\Model\EInvoicing\V1\DataInputFieldOptionalFor|null
     */
    public function getOptionalFor()
    {
        return $this->container['optional_for'];
    }

    /**
     * Sets optional_for
     *
     * @param \Avalara\SDK\Model\EInvoicing\V1\DataInputFieldOptionalFor|null $optional_for optional_for
     *
     * @return self
     */
    public function setOptionalFor($optional_for)
    {
        $this->container['optional_for'] = $optional_for;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


