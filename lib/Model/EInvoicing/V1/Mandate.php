<?php
/**
 * Mandate
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2025 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara E-Invoicing API
 *
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\EInvoicing\V1
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2025 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\EInvoicing\V1;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * Mandate Class Doc Comment
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Mandate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Mandate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mandate_id' => 'string',
        'country_mandate' => 'string',
        'country_code' => 'string',
        'description' => 'string',
        'supported_by_elrapi' => 'bool',
        'mandate_format' => 'string',
        'e_invoicing_flow' => 'string',
        'e_invoicing_flow_documentation_link' => 'string',
        'get_invoice_available_media_type' => 'string[]',
        'supports_inbound_digital_document' => 'string',
        'input_data_formats' => '\Avalara\SDK\Model\EInvoicing\V1\InputDataFormats[]',
        'output_data_formats' => '\Avalara\SDK\Model\EInvoicing\V1\OutputDataFormats[]',
        'workflow_ids' => '\Avalara\SDK\Model\EInvoicing\V1\WorkflowIds[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mandate_id' => null,
        'country_mandate' => null,
        'country_code' => null,
        'description' => null,
        'supported_by_elrapi' => null,
        'mandate_format' => null,
        'e_invoicing_flow' => null,
        'e_invoicing_flow_documentation_link' => null,
        'get_invoice_available_media_type' => null,
        'supports_inbound_digital_document' => null,
        'input_data_formats' => null,
        'output_data_formats' => null,
        'workflow_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mandate_id' => 'mandateId',
        'country_mandate' => 'countryMandate',
        'country_code' => 'countryCode',
        'description' => 'description',
        'supported_by_elrapi' => 'supportedByELRAPI',
        'mandate_format' => 'mandateFormat',
        'e_invoicing_flow' => 'eInvoicingFlow',
        'e_invoicing_flow_documentation_link' => 'eInvoicingFlowDocumentationLink',
        'get_invoice_available_media_type' => 'getInvoiceAvailableMediaType',
        'supports_inbound_digital_document' => 'supportsInboundDigitalDocument',
        'input_data_formats' => 'inputDataFormats',
        'output_data_formats' => 'outputDataFormats',
        'workflow_ids' => 'workflowIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mandate_id' => 'setMandateId',
        'country_mandate' => 'setCountryMandate',
        'country_code' => 'setCountryCode',
        'description' => 'setDescription',
        'supported_by_elrapi' => 'setSupportedByElrapi',
        'mandate_format' => 'setMandateFormat',
        'e_invoicing_flow' => 'setEInvoicingFlow',
        'e_invoicing_flow_documentation_link' => 'setEInvoicingFlowDocumentationLink',
        'get_invoice_available_media_type' => 'setGetInvoiceAvailableMediaType',
        'supports_inbound_digital_document' => 'setSupportsInboundDigitalDocument',
        'input_data_formats' => 'setInputDataFormats',
        'output_data_formats' => 'setOutputDataFormats',
        'workflow_ids' => 'setWorkflowIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mandate_id' => 'getMandateId',
        'country_mandate' => 'getCountryMandate',
        'country_code' => 'getCountryCode',
        'description' => 'getDescription',
        'supported_by_elrapi' => 'getSupportedByElrapi',
        'mandate_format' => 'getMandateFormat',
        'e_invoicing_flow' => 'getEInvoicingFlow',
        'e_invoicing_flow_documentation_link' => 'getEInvoicingFlowDocumentationLink',
        'get_invoice_available_media_type' => 'getGetInvoiceAvailableMediaType',
        'supports_inbound_digital_document' => 'getSupportsInboundDigitalDocument',
        'input_data_formats' => 'getInputDataFormats',
        'output_data_formats' => 'getOutputDataFormats',
        'workflow_ids' => 'getWorkflowIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mandate_id'] = $data['mandate_id'] ?? null;
        $this->container['country_mandate'] = $data['country_mandate'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['supported_by_elrapi'] = $data['supported_by_elrapi'] ?? null;
        $this->container['mandate_format'] = $data['mandate_format'] ?? null;
        $this->container['e_invoicing_flow'] = $data['e_invoicing_flow'] ?? null;
        $this->container['e_invoicing_flow_documentation_link'] = $data['e_invoicing_flow_documentation_link'] ?? null;
        $this->container['get_invoice_available_media_type'] = $data['get_invoice_available_media_type'] ?? null;
        $this->container['supports_inbound_digital_document'] = $data['supports_inbound_digital_document'] ?? null;
        $this->container['input_data_formats'] = $data['input_data_formats'] ?? null;
        $this->container['output_data_formats'] = $data['output_data_formats'] ?? null;
        $this->container['workflow_ids'] = $data['workflow_ids'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mandate_id
     *
     * @return string|null
     */
    public function getMandateId()
    {
        return $this->container['mandate_id'];
    }

    /**
     * Sets mandate_id
     *
     * @param string|null $mandate_id The `mandateId` is comprised of the country code, mandate type, and the network or regulation type (for example, AU-B2G-PEPPOL). Keep in mind the following when specifying a `mandateId`. - A country can have multiple mandate types (B2C, B2B, B2G). - A entity/company can opt in for multiple mandates. - A `mandateId` is the combination of country + mandate type + network/regulation.
     *
     * @return self
     */
    public function setMandateId($mandate_id)
    {
        $this->container['mandate_id'] = $mandate_id;

        return $this;
    }

    /**
     * Gets country_mandate
     *
     * @return string|null
     */
    public function getCountryMandate()
    {
        return $this->container['country_mandate'];
    }

    /**
     * Sets country_mandate
     *
     * @param string|null $country_mandate **[LEGACY]** This field is retained for backward compatibility. It is recommended to use `mandateId` instead. The `countryMandate` similar to the `mandateId` is comprised of the country code, mandate type, and the network or regulation type (for example, AU-B2G-PEPPOL).
     *
     * @return self
     */
    public function setCountryMandate($country_mandate)
    {
        $this->container['country_mandate'] = $country_mandate;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code Country code
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Mandate description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets supported_by_elrapi
     *
     * @return bool|null
     */
    public function getSupportedByElrapi()
    {
        return $this->container['supported_by_elrapi'];
    }

    /**
     * Sets supported_by_elrapi
     *
     * @param bool|null $supported_by_elrapi Indicates whether this mandate supported by the ELR API
     *
     * @return self
     */
    public function setSupportedByElrapi($supported_by_elrapi)
    {
        $this->container['supported_by_elrapi'] = $supported_by_elrapi;

        return $this;
    }

    /**
     * Gets mandate_format
     *
     * @return string|null
     */
    public function getMandateFormat()
    {
        return $this->container['mandate_format'];
    }

    /**
     * Sets mandate_format
     *
     * @param string|null $mandate_format Mandate format
     *
     * @return self
     */
    public function setMandateFormat($mandate_format)
    {
        $this->container['mandate_format'] = $mandate_format;

        return $this;
    }

    /**
     * Gets e_invoicing_flow
     *
     * @return string|null
     */
    public function getEInvoicingFlow()
    {
        return $this->container['e_invoicing_flow'];
    }

    /**
     * Sets e_invoicing_flow
     *
     * @param string|null $e_invoicing_flow The type of e-invoicing flow for this mandate
     *
     * @return self
     */
    public function setEInvoicingFlow($e_invoicing_flow)
    {
        $this->container['e_invoicing_flow'] = $e_invoicing_flow;

        return $this;
    }

    /**
     * Gets e_invoicing_flow_documentation_link
     *
     * @return string|null
     */
    public function getEInvoicingFlowDocumentationLink()
    {
        return $this->container['e_invoicing_flow_documentation_link'];
    }

    /**
     * Sets e_invoicing_flow_documentation_link
     *
     * @param string|null $e_invoicing_flow_documentation_link Link to the documentation for this mandate's e-invoicing flow
     *
     * @return self
     */
    public function setEInvoicingFlowDocumentationLink($e_invoicing_flow_documentation_link)
    {
        $this->container['e_invoicing_flow_documentation_link'] = $e_invoicing_flow_documentation_link;

        return $this;
    }

    /**
     * Gets get_invoice_available_media_type
     *
     * @return string[]|null
     */
    public function getGetInvoiceAvailableMediaType()
    {
        return $this->container['get_invoice_available_media_type'];
    }

    /**
     * Sets get_invoice_available_media_type
     *
     * @param string[]|null $get_invoice_available_media_type List of available media types for downloading invoices for this mandate
     *
     * @return self
     */
    public function setGetInvoiceAvailableMediaType($get_invoice_available_media_type)
    {
        $this->container['get_invoice_available_media_type'] = $get_invoice_available_media_type;

        return $this;
    }

    /**
     * Gets supports_inbound_digital_document
     *
     * @return string|null
     */
    public function getSupportsInboundDigitalDocument()
    {
        return $this->container['supports_inbound_digital_document'];
    }

    /**
     * Sets supports_inbound_digital_document
     *
     * @param string|null $supports_inbound_digital_document Indicates whether this mandate supports inbound digital documents
     *
     * @return self
     */
    public function setSupportsInboundDigitalDocument($supports_inbound_digital_document)
    {
        $this->container['supports_inbound_digital_document'] = $supports_inbound_digital_document;

        return $this;
    }

    /**
     * Gets input_data_formats
     *
     * @return \Avalara\SDK\Model\EInvoicing\V1\InputDataFormats[]|null
     */
    public function getInputDataFormats()
    {
        return $this->container['input_data_formats'];
    }

    /**
     * Sets input_data_formats
     *
     * @param \Avalara\SDK\Model\EInvoicing\V1\InputDataFormats[]|null $input_data_formats Format and version used when inputting the data
     *
     * @return self
     */
    public function setInputDataFormats($input_data_formats)
    {
        $this->container['input_data_formats'] = $input_data_formats;

        return $this;
    }

    /**
     * Gets output_data_formats
     *
     * @return \Avalara\SDK\Model\EInvoicing\V1\OutputDataFormats[]|null
     */
    public function getOutputDataFormats()
    {
        return $this->container['output_data_formats'];
    }

    /**
     * Sets output_data_formats
     *
     * @param \Avalara\SDK\Model\EInvoicing\V1\OutputDataFormats[]|null $output_data_formats Lists the supported output document formats for the country mandate. For countries where specifying an output document format is required (e.g., France), this array will contain the applicable formats. For other countries where output format selection is not necessary, the array will be empty.
     *
     * @return self
     */
    public function setOutputDataFormats($output_data_formats)
    {
        $this->container['output_data_formats'] = $output_data_formats;

        return $this;
    }

    /**
     * Gets workflow_ids
     *
     * @return \Avalara\SDK\Model\EInvoicing\V1\WorkflowIds[]|null
     */
    public function getWorkflowIds()
    {
        return $this->container['workflow_ids'];
    }

    /**
     * Sets workflow_ids
     *
     * @param \Avalara\SDK\Model\EInvoicing\V1\WorkflowIds[]|null $workflow_ids Workflow ID list
     *
     * @return self
     */
    public function setWorkflowIds($workflow_ids)
    {
        $this->container['workflow_ids'] = $workflow_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


