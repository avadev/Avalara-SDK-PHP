<?php
/**
 * Configuration
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Avalara Shipping Verification for Beverage Alcohol
 *
 * API for evaluating transactions against direct-to-consumer Beverage Alcohol shipping regulations.  This API is currently in beta.
 *
 * The version of the OpenAPI document: 2.1.0-beta
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\Request;
use Avalara\SDK\Utils\LogOptions;

/**
 * Configuration Class Doc Comment
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Configuration
{
    public $PRODUCTION_OPENID_CONFIG_URL = 'https://identity.avalara.com/.well-known/openid-configuration';
    public $SANDBOX_OPENID_CONFIG_URL = 'https://ai-sbx.avlr.sh/.well-known/openid-configuration';
    public $QA_OPENID_CONFIG_URL = 'https://ai-awsfqa.avlr.sh/.well-known/openid-configuration';
    public $FALLBACK_TOKEN_URL = 'https://identity.avalara.com/connect/token';
    public $FALLBACK_DEVICE_AUTHORIZATION_URL = 'https://identity.avalara.com/connect/token';

    // Official URL of EInvoicing Service (Production by Environment)
    public $EINVOICING_SERVICE_PRODUCTION_URL = 'https://api.avalara.com';
    public $EINVOICING_SERVICE_SANDBOX_URL = 'https://api.sbx.avalara.com';
    public $EINVOICING_SERVICE_QA_URL = 'https://superapi.qa.avalara.io';
    public $EINVOICING_SERVICE_DEV_URL = 'https://superapi.dev.avalara.io';

    // Official URL of A1099 Service (Production by Environment)
    public $A1099_SERVICE_PRODUCTION_URL = 'https://api.avalara.com/avalara1099';
    public $A1099_SERVICE_SANDBOX_URL = 'https://api.sbx.avalara.com/avalara1099';
    public $A1099_SERVICE_QA_URL = 'https://api-ava1099.gamma.qa.us-west-2.aws.avalara.io';
    public $A1099_SERVICE_DEV_URL = 'https://api-ava1099.gamma.dev.us-west-2.aws.avalara.io';

    /**
     * @var Configuration
     */
    private static $defaultConfiguration;

    /**
     * Associate array to store API key(s)
     *
     * @var string[]
     */
    public $apiKeys = [];

    /**
     * Associate array to store API prefix (e.g. Bearer)
     *
     * @var string[]
     */
    public $apiKeyPrefixes = [];

    /**
     * Gets the application name. 
     *
     * @var string
     */
    public $appName = '';

    /**
     * Gets the application version. 
     *
     * @var string
     */
    public $appVersion = '';

    /**
     * Gets the machine name. 
     *
     * @var string
     */
    public $machineName = '';


    /**
     * Username for HTTP basic authentication
     *
     * @var string
     */
    public $username = '';

    /**
     * Password for HTTP basic authentication
     *
     * @var string
     */
    public $password = '';

    /**
     * The environment
     *
     * @var string
     */
    public $environment = '';
  
    /**
     * The host
     *
     * @var string
     */
    protected $host = '';
    
    /**
     * Debug switch (default set to false)
     *
     * @var bool
     */
    protected $debug = false;

    /**
     * Debug file location (log to STDOUT by default)
     *
     * @var string
     */
    protected $debugFile = 'php://output';

    /**
     * Debug file location (log to STDOUT by default)
     *
     * @var string
     */
    protected $tempFolderPath;

    /**
     * The OAuth 2.0 token provided by Avalara Identity
     *
     * @var string
     */
    protected $bearerToken;

    /**
     * The ClientId used for the OAuth2 Client Credentials flow
     *
     * @var string
     */
    protected $clientId;

    /**
     * The ClientSecret used for the OAuth2 Client Credentials flow
     *
     * @var string
     */
    protected $clientSecret;

    /**
     * The Test Base Path to be used for local development for calling the Avalara APIs
     *
     * @var string
     */
    protected $testBasePath;

    /**
     * The Test Token URL to be used for local development to invoke the OAuth2 flow
     *
     * @var string
     */
    protected $testTokenUrl;

    /**
     * The Test Device Authorization URL to be used for local development to invoke the OAuth2 Device Code flow
     *
     * @var string
     */
    protected $testDeviceAuthorizationUrl;

    /**
     * The Token URL to be used to invoke the OAuth2 flow
     *
     * @var string
     */
    protected $tokenUrl;

    /**
     * The Device Authorization URL to be used to invoke the OAuth2 Device Code flow
     *
     * @var string
     */
    protected $deviceAuthorizationUrl;

    /**
     * The LogOptions that will be used to control the information logged in the SDK.
     *
     * @var LogOptions
     */
    protected $logOptions;

    /**
     * The Guzzle Http Client instance
     *
     * @var string
     */
    protected $client = null;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->tempFolderPath = sys_get_temp_dir();
        $this->logOptions = new LogOptions();
    }

    /**
     * Returns base URL for specified operation based on server settings and microservice
     *
     * @param string $microservice Microservice name (EInvoicing, A1099, or none)
     * @return string Base URL for the microservice
     */
    public function getBasePath($microservice = 'none')
    {
        $environment = strtolower($this->environment);
        
        if ($environment == 'test' && empty($this->testBasePath)) {
            throw new \InvalidArgumentException("TestBasePath must be configured to run in test environment mode.");
        }

        switch ($microservice) {
            case 'EInvoicing':
                switch ($environment) {
                    case 'production':
                        return $this->EINVOICING_SERVICE_PRODUCTION_URL;
                    case 'sandbox':
                        return $this->EINVOICING_SERVICE_SANDBOX_URL;
                    case 'qa':
                        return $this->EINVOICING_SERVICE_QA_URL;
                    case 'dev':
                        return $this->EINVOICING_SERVICE_DEV_URL;
                    case 'test':
                        return $this->testBasePath;
                    default:
                        throw new \InvalidArgumentException('Environment not configured correctly, Acceptable values are "production", "sandbox", "qa", "dev", and "test".');
                }
            case 'A1099':
                switch ($environment) {
                    case 'production':
                        return $this->A1099_SERVICE_PRODUCTION_URL;
                    case 'sandbox':
                        return $this->A1099_SERVICE_SANDBOX_URL;
                    case 'qa':
                        return $this->A1099_SERVICE_QA_URL;
                    case 'dev':
                        return $this->A1099_SERVICE_DEV_URL;
                    case 'test':
                        return $this->testBasePath;
                    default:
                        throw new \InvalidArgumentException('Environment not configured correctly, Acceptable values are "production", "sandbox", "qa", "dev", and "test".');
                }
            case 'none':
                throw new \InvalidArgumentException('Microservice not configured correctly, Acceptable values are "EInvoicing", "A1099", and "none".');
        }
    }

    /**
     * Sets API key
     *
     * @param string $environment API 
     *
     * @return $this
     */
    public function setEnvironment($environment)
    {
        $this->environment = $environment;
        return $this;
    }
    /**
     * Sets API key
     *
     * @param string $apiKeyIdentifier API key identifier (authentication scheme)
     * @param string $key              API key or token
     *
     * @return $this
     */
    public function setApiKey($apiKeyIdentifier, $key)
    {
        $this->apiKeys[$apiKeyIdentifier] = $key;
        return $this;
    }

    /**
     * Gets API key
     *
     * @param string $apiKeyIdentifier API key identifier (authentication scheme)
     *
     * @return null|string API key or token
     */
    public function getApiKey($apiKeyIdentifier)
    {
        return isset($this->apiKeys[$apiKeyIdentifier]) ? $this->apiKeys[$apiKeyIdentifier] : null;
    }

    /**
     * Sets the prefix for API key (e.g. Bearer)
     *
     * @param string $apiKeyIdentifier API key identifier (authentication scheme)
     * @param string $prefix           API key prefix, e.g. Bearer
     *
     * @return $this
     */
    public function setApiKeyPrefix($apiKeyIdentifier, $prefix)
    {
        $this->apiKeyPrefixes[$apiKeyIdentifier] = $prefix;
        return $this;
    }

    /**
     * Gets API key prefix
     *
     * @param string $apiKeyIdentifier API key identifier (authentication scheme)
     *
     * @return null|string
     */
    public function getApiKeyPrefix($apiKeyIdentifier)
    {
        return isset($this->apiKeyPrefixes[$apiKeyIdentifier]) ? $this->apiKeyPrefixes[$apiKeyIdentifier] : null;
    }

    /**
     * Sets the access token for OAuth
     *
     * @param string Bearer Token for OAuth
     *
     * @return $this
     */
    public function setBearerToken($bearerToken)
    {
        $this->bearerToken = $bearerToken;
        return $this;
    }

    /**
     * Gets the access token for OAuth
     *
     * @return string Bearer token for OAuth
     */
    public function getBearerToken()
    {
        return $this->bearerToken;
    }

    /**
     * Gets the Guzzle client for the app
     *
     * @return string GuzzleClient
     */
    public function getClient()
    {
        if (is_null($this->client)) {
            $this->client = new Client();
        }
        return $this->client;
    }

    /**
     * Sets the ClientId used for the OAuth2 Client Credentials flow
     *
     * @param string ClientId for OAuth client creds flow
     *
     * @return $this
     */
    public function setClientId($clientId)
    {
        $this->clientId = $clientId;
        return $this;
    }

    /**
     * Gets the clientId for OAuth2
     *
     * @return string ClientId for OAuth2
     */
    public function getClientId()
    {
        return $this->clientId;
    }

    /**
     * Sets the clientSecret used for the OAuth2 Client Credentials flow
     *
     * @param string clientSecret for OAuth client creds flow
     *
     * @return $this
     */
    public function setClientSecret($clientSecret)
    {
        $this->clientSecret = $clientSecret;
        return $this;
    }

    /**
     * Gets the clientSecret for OAuth2
     *
     * @return string clientSecret for OAuth2
     */
    public function getClientSecret()
    {
        return $this->clientSecret;
    }

    /**
     * Sets the Test Base Path to be used for local development for calling the Avalara APIs
     *
     * @param string testBasePath
     *
     * @return $this
     */
    public function setTestBasePath($testBasePath)
    {
        $this->testBasePath = $testBasePath;
        return $this;
    }

    /**
     * Gets the Test Base Path to be used for local development for calling the Avalara APIs
     *
     * @return string testBasePath
     */
    public function getTestBasePath()
    {
        return $this->testBasePath;
    }

    /**
     * Sets The Test Token URL to be used for local development to invoke the OAuth2 flow
     *
     * @param string clientSecret for OAuth client creds flow
     *
     * @return $this
     */
    public function setTestTokenUrl($testTokenUrl)
    {
        $this->testTokenUrl = $testTokenUrl;
        return $this;
    }

    /**
     * Gets the Token URL to be used to invoke the OAuth2 flow
     *
     * @return string tokenUrl
     */
    public function getTokenUrl()
    {
        return $this->tokenUrl;
    }

    /**
     * Gets the Token URL to be used to invoke the OAuth2 flow
     *
     * @return string deviceAuthorizationUrl
     */
    public function getDeviceAuthorizationUrl()
    {
        return $this->deviceAuthorizationUrl;
    }

    /**
     * Gets the Test Token URL to be used for local development to invoke the OAuth2 flow
     *
     * @return string testTokenUrl
     */
    public function getTestTokenUrl()
    {
        return $this->testTokenUrl;
    }

    /**
     * Gets the Test Authorization URL to be used for local development to invoke the OAuth2 Device Code flow
     *
     * @return string testDeviceAuthorizationUrl
     */
    public function getTestDeviceAuthorizationUrl()
    {
        return $this->testDeviceAuthorizationUrl;
    }

    /**
     * Sets the appName
     *
     * @param string $appname
     *
     * @return $this
     */
    public function setAppName($appName)
    {
        $this->appName = $appName;
        return $this;
    }

    /**
     * Gets the application name.
     *
     * @return string appname 
     */
    public function getAppName()
    {
        return $this->appName;
    }

    /**
     * Sets the appVersion
     *
     * @param string $appVersion
     *
     * @return $this
     */
    public function setAppVersion($appVersion)
    {
        $this->appVersion = $appVersion;
        return $this;
    }

    /**
     * Gets the application version.
     *
     * @return string appVersion
     */
    public function getAppVersion()
    {
        return $this->appVersion;
    }
    /**
     * Sets the machineName
     *
     * @param string $machineName
     *
     * @return $this
     */
    public function setMachineName($machineName)
    {
        $this->machineName = $machineName;
        return $this;
    }

    /**
     * Gets the machine name.
     *
     * @return string machineName 
     */
    public function getMachineName()
    {
        return $this->machineName;
    }

    /**
     * Sets the username for HTTP basic authentication
     *
     * @param string $username Username for HTTP basic authentication
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->username = $username;
        return $this;
    }

    /**
     * Gets the username for HTTP basic authentication
     *
     * @return string Username for HTTP basic authentication
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     * Sets the password for HTTP basic authentication
     *
     * @param string $password Password for HTTP basic authentication
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->password = $password;
        return $this;
    }

    /**
     * Gets the password for HTTP basic authentication
     *
     * @return string Password for HTTP basic authentication
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Sets log options
     *
     * @param LogOptions logOptions
     *
     * @return $this
     */
    public function setLogOptions($logOptions)
    {
        $this->logOptions = $logOptions;
        return $this;
    }

    /**
     * Gets the current logOptions
     *
     * @return LogOptions
     */
    public function getLogOptions()
    {
        return $this->logOptions;
    }

    /**
     * Sets the temp folder path
     *
     * @param string $tempFolderPath Temp folder path
     *
     * @return $this
     */
    public function setTempFolderPath($tempFolderPath)
    {
        $this->tempFolderPath = $tempFolderPath;
        return $this;
    }

    /**
     * Gets the temp folder path
     *
     * @return string Temp folder path
     */
    public function getTempFolderPath()
    {
        return $this->tempFolderPath;
    }

    /**
     * Gets Envrionment
     *
     * @return string environment
     */
    public function getEnvironment()
    {
        return $this->environment;
    }

    /**
     * Gets the default configuration instance
     *
     * @return Configuration
     */
    public static function getDefaultConfiguration()
    {
        if (self::$defaultConfiguration === null) {
            self::$defaultConfiguration = new Configuration();
        }

        return self::$defaultConfiguration;
    }

    /**
     * Sets the default configuration instance
     *
     * @param Configuration $config An instance of the Configuration Object
     *
     * @return void
     */
    public static function setDefaultConfiguration(Configuration $config)
    {
        self::$defaultConfiguration = $config;
    }

    /**
     * Gets the essential information for debugging
     *
     * @return string The report for debugging
     */
    public static function toDebugReport()
    {
        $report  = 'PHP SDK (Avalara\SDK) Debug Report:' . PHP_EOL;
        $report .= '    OS: ' . php_uname() . PHP_EOL;
        $report .= '    PHP Version: ' . PHP_VERSION . PHP_EOL;
        $report .= '    The version of the OpenAPI document: 2.1.0-beta' . PHP_EOL;
        $report .= '    SDK Package Version: 22.1.0' . PHP_EOL;
        $report .= '    Temp Folder Path: ' . self::getDefaultConfiguration()->getTempFolderPath() . PHP_EOL;

        return $report;
    }

    /**
     * Get API key (with prefix if set)
     *
     * @param  string $apiKeyIdentifier name of apikey
     *
     * @return null|string API key with the prefix
     */
    public function getApiKeyWithPrefix($apiKeyIdentifier)
    {
        $prefix = $this->getApiKeyPrefix($apiKeyIdentifier);
        $apiKey = $this->getApiKey($apiKeyIdentifier);

        if ($apiKey === null) {
            return null;
        }

        if ($prefix === null) {
            $keyWithPrefix = $apiKey;
        } else {
            $keyWithPrefix = $prefix . ' ' . $apiKey;
        }

        return $keyWithPrefix;
    }

    /**
     * Returns an array of host settings
     *
     * @return array an array of host settings
     */
    public function getHostSettings()
    {
        return [
            [
                "url" => "",
                "description" => "No description provided",
            ]
        ];
    }

    /**
     * Returns URL based on the index and variables
     *
     * @param int        $index     index of the host settings
     * @param array|null $variables hash of variable and the corresponding value (optional)
     * @return string URL based on host settings
     */
    public function getHostFromSettings($index, $variables = null)
    {
        if (null === $variables) {
            $variables = [];
        }

        $hosts = $this->getHostSettings();

        // check array index out of bound
        if ($index < 0 || $index >= sizeof($hosts)) {
            throw new \InvalidArgumentException("Invalid index $index when selecting the host. Must be less than ".sizeof($hosts));
        }

        $host = $hosts[$index];
        $url = $host["url"];

        // go through variable and assign a value
        foreach ($host["variables"] ?? [] as $name => $variable) {
            if (array_key_exists($name, $variables)) { // check to see if it's in the variables provided by the user
                if (in_array($variables[$name], $variable["enum_values"], true)) { // check to see if the value is in the enum
                    $url = str_replace("{".$name."}", $variables[$name], $url);
                } else {
                    throw new \InvalidArgumentException("The variable `$name` in the host URL has invalid value ".$variables[$name].". Must be ".join(',', $variable["enum_values"]).".");
                }
            } else {
                // use default value
                $url = str_replace("{".$name."}", $variable["default_value"], $url);
            }
        }

        return $url;
    }

    /**
     * Sets the tokenUrl
     *
     *
     * @return $this
     */
    public function setOAuthEndpoints()
    {
        $environment = $this->environment;
        if (strtolower($environment)=="test") {
            $this->tokenUrl = $this->getTestTokenUrl();
            $this->deviceAuthorizationUrl = $this->getTestDeviceAuthorizationUrl();
        } else if (is_null($this->tokenUrl) || strlen($this->tokenUrl) == 0) {
            try {
                $request = new Request('GET', $this->getOpenIdConnectUrl());
                $response = $this->getClient()->send($request, []);
                $content = (string) $response->getBody();
                $oidcResponse = json_decode($content);
                $this->tokenUrl = $oidcResponse->token_endpoint;
                $this->deviceAuthorizationUrl = $oidcResponse->device_authorization_endpoint;
            } catch (Exception $e) {
                echo 'Exception when calling OpenIdConnect to fetch the token endpoint so using fallbacks. Error: ',  $e->getMessage(), "\n";
                $this->tokenUrl = $FALLBACK_TOKEN_URL;
                $this->deviceAuthorizationUrl = $FALLBACK_DEVICE_AUTHORIZATION_URL;
            }
        }
        return $this;
    }

    public function getOpenIdConnectUrl() {
        $environment = strtolower($this->environment);
        switch ($environment) {
            case "production":
                return $this->PRODUCTION_OPENID_CONFIG_URL;
            case "sandbox":
                return $this->SANDBOX_OPENID_CONFIG_URL;
            case "qa":
                return $this->QA_OPENID_CONFIG_URL;
        }
    }
}

/**
 * Microservice enumeration
 */
class AvalaraMicroservice
{
    const EINVOICING = 'EInvoicing';
    const A1099 = 'A1099';
    const NONE = 'none';
}
